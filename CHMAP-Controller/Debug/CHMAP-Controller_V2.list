
CHMAP-Controller_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011940  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  08011bf0  08011bf0  00021bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011dc4  08011dc4  00021dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011dcc  08011dcc  00021dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08011dd0  08011dd0  00021dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  24000000  08011dd4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004420  2400007c  08011e50  0003007c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400449c  08011e50  0003449c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00022ff0  00000000  00000000  000300aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003c3c  00000000  00000000  0005309a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ad8  00000000  00000000  00056cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001970  00000000  00000000  000587b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035090  00000000  00000000  0005a120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00022411  00000000  00000000  0008f1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001602e3  00000000  00000000  000b15c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002118a4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007434  00000000  00000000  002118f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	2400007c 	.word	0x2400007c
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08011bd8 	.word	0x08011bd8

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000080 	.word	0x24000080
 80002ec:	08011bd8 	.word	0x08011bd8

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	60b9      	str	r1, [r7, #8]
 80005fe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	4a07      	ldr	r2, [pc, #28]	; (8000620 <vApplicationGetIdleTaskMemory+0x2c>)
 8000604:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	4a06      	ldr	r2, [pc, #24]	; (8000624 <vApplicationGetIdleTaskMemory+0x30>)
 800060a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2280      	movs	r2, #128	; 0x80
 8000610:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000612:	bf00      	nop
 8000614:	3714      	adds	r7, #20
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	24000098 	.word	0x24000098
 8000624:	240000ec 	.word	0x240000ec

08000628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062e:	f001 ff2f 	bl	8002490 <HAL_Init>

  /* USER CODE BEGIN Init */

  /* Initialise Pins ****************************/
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);		// EN X and Y
 8000632:	2200      	movs	r2, #0
 8000634:	2120      	movs	r1, #32
 8000636:	48be      	ldr	r0, [pc, #760]	; (8000930 <main+0x308>)
 8000638:	f006 ff3a 	bl	80074b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);		// CS X and Y
 800063c:	2201      	movs	r2, #1
 800063e:	2108      	movs	r1, #8
 8000640:	48bb      	ldr	r0, [pc, #748]	; (8000930 <main+0x308>)
 8000642:	f006 ff35 	bl	80074b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); 	// DIR X
 8000646:	2200      	movs	r2, #0
 8000648:	2110      	movs	r1, #16
 800064a:	48ba      	ldr	r0, [pc, #744]	; (8000934 <main+0x30c>)
 800064c:	f006 ff30 	bl	80074b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); 	// STEP X
 8000650:	2200      	movs	r2, #0
 8000652:	2110      	movs	r1, #16
 8000654:	48b6      	ldr	r0, [pc, #728]	; (8000930 <main+0x308>)
 8000656:	f006 ff2b 	bl	80074b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); 	// DIR Y
 800065a:	2200      	movs	r2, #0
 800065c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000660:	48b3      	ldr	r0, [pc, #716]	; (8000930 <main+0x308>)
 8000662:	f006 ff25 	bl	80074b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET); 	// STEP Y
 8000666:	2200      	movs	r2, #0
 8000668:	f44f 7180 	mov.w	r1, #256	; 0x100
 800066c:	48b0      	ldr	r0, [pc, #704]	; (8000930 <main+0x308>)
 800066e:	f006 ff1f 	bl	80074b0 <HAL_GPIO_WritePin>


  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET); 	// EN Z
 8000672:	2200      	movs	r2, #0
 8000674:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000678:	48ad      	ldr	r0, [pc, #692]	; (8000930 <main+0x308>)
 800067a:	f006 ff19 	bl	80074b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); 		// CS Z
 800067e:	2201      	movs	r2, #1
 8000680:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000684:	48aa      	ldr	r0, [pc, #680]	; (8000930 <main+0x308>)
 8000686:	f006 ff13 	bl	80074b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET); 	// DIR Z
 800068a:	2200      	movs	r2, #0
 800068c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000690:	48a7      	ldr	r0, [pc, #668]	; (8000930 <main+0x308>)
 8000692:	f006 ff0d 	bl	80074b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET); 	// STEP Z
 8000696:	2200      	movs	r2, #0
 8000698:	2140      	movs	r1, #64	; 0x40
 800069a:	48a7      	ldr	r0, [pc, #668]	; (8000938 <main+0x310>)
 800069c:	f006 ff08 	bl	80074b0 <HAL_GPIO_WritePin>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a0:	f000 f994 	bl	80009cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a4:	f000 fcb8 	bl	8001018 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006a8:	f000 fc42 	bl	8000f30 <MX_USART3_UART_Init>
  MX_DMA_Init();
 80006ac:	f000 fc94 	bl	8000fd8 <MX_DMA_Init>
  MX_USB_OTG_HS_USB_Init();
 80006b0:	f000 fc8a 	bl	8000fc8 <MX_USB_OTG_HS_USB_Init>
  MX_SPI2_Init();
 80006b4:	f000 fad4 	bl	8000c60 <MX_SPI2_Init>
  MX_SPI1_Init();
 80006b8:	f000 fa7a 	bl	8000bb0 <MX_SPI1_Init>
  MX_ADC1_Init();
 80006bc:	f000 fa00 	bl	8000ac0 <MX_ADC1_Init>
  MX_TIM2_Init();
 80006c0:	f000 fb1e 	bl	8000d00 <MX_TIM2_Init>
  MX_TIM5_Init();
 80006c4:	f000 fbe4 	bl	8000e90 <MX_TIM5_Init>
  MX_TIM3_Init();
 80006c8:	f000 fb92 	bl	8000df0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  while(HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK);
 80006cc:	bf00      	nop
 80006ce:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80006d2:	2100      	movs	r1, #0
 80006d4:	4899      	ldr	r0, [pc, #612]	; (800093c <main+0x314>)
 80006d6:	f003 fc25 	bl	8003f24 <HAL_ADCEx_Calibration_Start>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d1f6      	bne.n	80006ce <main+0xa6>

  /* Create Queues *********************************/

  UARTtxQueue = xQueueCreate(10, 2);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2102      	movs	r1, #2
 80006e4:	200a      	movs	r0, #10
 80006e6:	f00e ffad 	bl	800f644 <xQueueGenericCreate>
 80006ea:	4603      	mov	r3, r0
 80006ec:	4a94      	ldr	r2, [pc, #592]	; (8000940 <main+0x318>)
 80006ee:	6013      	str	r3, [r2, #0]
  DPPrxQueue = xQueueCreate(50, 2); // Send and receive 2 bytes to/from the MCA
 80006f0:	2200      	movs	r2, #0
 80006f2:	2102      	movs	r1, #2
 80006f4:	2032      	movs	r0, #50	; 0x32
 80006f6:	f00e ffa5 	bl	800f644 <xQueueGenericCreate>
 80006fa:	4603      	mov	r3, r0
 80006fc:	4a91      	ldr	r2, [pc, #580]	; (8000944 <main+0x31c>)
 80006fe:	6013      	str	r3, [r2, #0]
  MtrCtrlXrxQueue = xQueueCreate(10, 8);
 8000700:	2200      	movs	r2, #0
 8000702:	2108      	movs	r1, #8
 8000704:	200a      	movs	r0, #10
 8000706:	f00e ff9d 	bl	800f644 <xQueueGenericCreate>
 800070a:	4603      	mov	r3, r0
 800070c:	4a8e      	ldr	r2, [pc, #568]	; (8000948 <main+0x320>)
 800070e:	6013      	str	r3, [r2, #0]
  MtrCtrlYrxQueue = xQueueCreate(10, 8);
 8000710:	2200      	movs	r2, #0
 8000712:	2108      	movs	r1, #8
 8000714:	200a      	movs	r0, #10
 8000716:	f00e ff95 	bl	800f644 <xQueueGenericCreate>
 800071a:	4603      	mov	r3, r0
 800071c:	4a8b      	ldr	r2, [pc, #556]	; (800094c <main+0x324>)
 800071e:	6013      	str	r3, [r2, #0]
  HelCtrlrxQueue = xQueueCreate(1, 2); // Just an atomic variable, not really a "queue" per se. Could probably just use a semaphore and a global variable as I did in the ISRs
 8000720:	2200      	movs	r2, #0
 8000722:	2102      	movs	r1, #2
 8000724:	2001      	movs	r0, #1
 8000726:	f00e ff8d 	bl	800f644 <xQueueGenericCreate>
 800072a:	4603      	mov	r3, r0
 800072c:	4a88      	ldr	r2, [pc, #544]	; (8000950 <main+0x328>)
 800072e:	6013      	str	r3, [r2, #0]
  //AutoFocusrxQueue = xQueueCreate(1, 4);

  /* Create Semaphores *****************************/

  MotorPulseSem = xSemaphoreCreateBinary();
 8000730:	2203      	movs	r2, #3
 8000732:	2100      	movs	r1, #0
 8000734:	2001      	movs	r0, #1
 8000736:	f00e ff85 	bl	800f644 <xQueueGenericCreate>
 800073a:	4603      	mov	r3, r0
 800073c:	4a85      	ldr	r2, [pc, #532]	; (8000954 <main+0x32c>)
 800073e:	6013      	str	r3, [r2, #0]
  AutoFocusSem = xSemaphoreCreateBinary();
 8000740:	2203      	movs	r2, #3
 8000742:	2100      	movs	r1, #0
 8000744:	2001      	movs	r0, #1
 8000746:	f00e ff7d 	bl	800f644 <xQueueGenericCreate>
 800074a:	4603      	mov	r3, r0
 800074c:	4a82      	ldr	r2, [pc, #520]	; (8000958 <main+0x330>)
 800074e:	6013      	str	r3, [r2, #0]
  UARTComSem = xSemaphoreCreateBinary();
 8000750:	2203      	movs	r2, #3
 8000752:	2100      	movs	r1, #0
 8000754:	2001      	movs	r0, #1
 8000756:	f00e ff75 	bl	800f644 <xQueueGenericCreate>
 800075a:	4603      	mov	r3, r0
 800075c:	4a7f      	ldr	r2, [pc, #508]	; (800095c <main+0x334>)
 800075e:	6013      	str	r3, [r2, #0]
  AutoFocusPulseSem = xSemaphoreCreateBinary();
 8000760:	2203      	movs	r2, #3
 8000762:	2100      	movs	r1, #0
 8000764:	2001      	movs	r0, #1
 8000766:	f00e ff6d 	bl	800f644 <xQueueGenericCreate>
 800076a:	4603      	mov	r3, r0
 800076c:	4a7c      	ldr	r2, [pc, #496]	; (8000960 <main+0x338>)
 800076e:	6013      	str	r3, [r2, #0]

  /* Init HAL Functionalities **********************************/

  HAL_TIM_Base_Start_IT(&htim5);
 8000770:	487c      	ldr	r0, [pc, #496]	; (8000964 <main+0x33c>)
 8000772:	f00a ffc3 	bl	800b6fc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000776:	487c      	ldr	r0, [pc, #496]	; (8000968 <main+0x340>)
 8000778:	f00a ffc0 	bl	800b6fc <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800077c:	2100      	movs	r1, #0
 800077e:	487b      	ldr	r0, [pc, #492]	; (800096c <main+0x344>)
 8000780:	f00b f896 	bl	800b8b0 <HAL_TIM_PWM_Start>
  HAL_SPI_Receive_DMA(&hspi2, DPPrxBuffer, 2);
 8000784:	2202      	movs	r2, #2
 8000786:	497a      	ldr	r1, [pc, #488]	; (8000970 <main+0x348>)
 8000788:	487a      	ldr	r0, [pc, #488]	; (8000974 <main+0x34c>)
 800078a:	f00a fa97 	bl	800acbc <HAL_SPI_Receive_DMA>
  //HAL_ADC_Start(&hadc1);


  /* Create Tasks **********************************/

  xTaskCreate(AutoFocus, 	"Auto_Focus", 			256, NULL, 	4, &AutoFocusHandle);
 800078e:	4b7a      	ldr	r3, [pc, #488]	; (8000978 <main+0x350>)
 8000790:	9301      	str	r3, [sp, #4]
 8000792:	2304      	movs	r3, #4
 8000794:	9300      	str	r3, [sp, #0]
 8000796:	2300      	movs	r3, #0
 8000798:	f44f 7280 	mov.w	r2, #256	; 0x100
 800079c:	4977      	ldr	r1, [pc, #476]	; (800097c <main+0x354>)
 800079e:	4878      	ldr	r0, [pc, #480]	; (8000980 <main+0x358>)
 80007a0:	f00f fd41 	bl	8010226 <xTaskCreate>
  xTaskCreate(MotorCtrlX, 	"Motor_Controller_X", 	128, NULL, 	3, &MotorCtrlXHandle);
 80007a4:	4b77      	ldr	r3, [pc, #476]	; (8000984 <main+0x35c>)
 80007a6:	9301      	str	r3, [sp, #4]
 80007a8:	2303      	movs	r3, #3
 80007aa:	9300      	str	r3, [sp, #0]
 80007ac:	2300      	movs	r3, #0
 80007ae:	2280      	movs	r2, #128	; 0x80
 80007b0:	4975      	ldr	r1, [pc, #468]	; (8000988 <main+0x360>)
 80007b2:	4876      	ldr	r0, [pc, #472]	; (800098c <main+0x364>)
 80007b4:	f00f fd37 	bl	8010226 <xTaskCreate>
  xTaskCreate(MotorCtrlY, 	"Motor_Controller_Y", 	128, NULL, 	3, &MotorCtrlYHandle);
 80007b8:	4b75      	ldr	r3, [pc, #468]	; (8000990 <main+0x368>)
 80007ba:	9301      	str	r3, [sp, #4]
 80007bc:	2303      	movs	r3, #3
 80007be:	9300      	str	r3, [sp, #0]
 80007c0:	2300      	movs	r3, #0
 80007c2:	2280      	movs	r2, #128	; 0x80
 80007c4:	4973      	ldr	r1, [pc, #460]	; (8000994 <main+0x36c>)
 80007c6:	4874      	ldr	r0, [pc, #464]	; (8000998 <main+0x370>)
 80007c8:	f00f fd2d 	bl	8010226 <xTaskCreate>
  xTaskCreate(HeliumCtrl, 	"Helium_Controller", 	128, NULL, 	1, &HeliumCtrlHandle);
 80007cc:	4b73      	ldr	r3, [pc, #460]	; (800099c <main+0x374>)
 80007ce:	9301      	str	r3, [sp, #4]
 80007d0:	2301      	movs	r3, #1
 80007d2:	9300      	str	r3, [sp, #0]
 80007d4:	2300      	movs	r3, #0
 80007d6:	2280      	movs	r2, #128	; 0x80
 80007d8:	4971      	ldr	r1, [pc, #452]	; (80009a0 <main+0x378>)
 80007da:	4872      	ldr	r0, [pc, #456]	; (80009a4 <main+0x37c>)
 80007dc:	f00f fd23 	bl	8010226 <xTaskCreate>
  xTaskCreate(UARTCom, 		"UART_Communication", 	128, NULL, 	2, &UARTComHandle);
 80007e0:	4b71      	ldr	r3, [pc, #452]	; (80009a8 <main+0x380>)
 80007e2:	9301      	str	r3, [sp, #4]
 80007e4:	2302      	movs	r3, #2
 80007e6:	9300      	str	r3, [sp, #0]
 80007e8:	2300      	movs	r3, #0
 80007ea:	2280      	movs	r2, #128	; 0x80
 80007ec:	496f      	ldr	r1, [pc, #444]	; (80009ac <main+0x384>)
 80007ee:	4870      	ldr	r0, [pc, #448]	; (80009b0 <main+0x388>)
 80007f0:	f00f fd19 	bl	8010226 <xTaskCreate>


 /* Platform initialisation ***********************************/

  // Being that we send the same information to all the motor drivers, we set the CS for all three low prior to sending a message
  vTaskDelay(pdMS_TO_TICKS(1));
 80007f4:	2001      	movs	r0, #1
 80007f6:	f00f fe4d 	bl	8010494 <vTaskDelay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2108      	movs	r1, #8
 80007fe:	484c      	ldr	r0, [pc, #304]	; (8000930 <main+0x308>)
 8000800:	f006 fe56 	bl	80074b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000804:	2200      	movs	r2, #0
 8000806:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800080a:	4849      	ldr	r0, [pc, #292]	; (8000930 <main+0x308>)
 800080c:	f006 fe50 	bl	80074b0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, (uint8_t *)&GCONF, 5, 100);
 8000810:	2364      	movs	r3, #100	; 0x64
 8000812:	2205      	movs	r2, #5
 8000814:	4967      	ldr	r1, [pc, #412]	; (80009b4 <main+0x38c>)
 8000816:	4868      	ldr	r0, [pc, #416]	; (80009b8 <main+0x390>)
 8000818:	f00a f85e 	bl	800a8d8 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 800081c:	2201      	movs	r2, #1
 800081e:	2108      	movs	r1, #8
 8000820:	4843      	ldr	r0, [pc, #268]	; (8000930 <main+0x308>)
 8000822:	f006 fe45 	bl	80074b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000826:	2201      	movs	r2, #1
 8000828:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800082c:	4840      	ldr	r0, [pc, #256]	; (8000930 <main+0x308>)
 800082e:	f006 fe3f 	bl	80074b0 <HAL_GPIO_WritePin>

  vTaskDelay(pdMS_TO_TICKS(1));
 8000832:	2001      	movs	r0, #1
 8000834:	f00f fe2e 	bl	8010494 <vTaskDelay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000838:	2200      	movs	r2, #0
 800083a:	2108      	movs	r1, #8
 800083c:	483c      	ldr	r0, [pc, #240]	; (8000930 <main+0x308>)
 800083e:	f006 fe37 	bl	80074b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000848:	4839      	ldr	r0, [pc, #228]	; (8000930 <main+0x308>)
 800084a:	f006 fe31 	bl	80074b0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, (uint8_t *)&IHOLD_IRUN, 5, 100);
 800084e:	2364      	movs	r3, #100	; 0x64
 8000850:	2205      	movs	r2, #5
 8000852:	495a      	ldr	r1, [pc, #360]	; (80009bc <main+0x394>)
 8000854:	4858      	ldr	r0, [pc, #352]	; (80009b8 <main+0x390>)
 8000856:	f00a f83f 	bl	800a8d8 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 800085a:	2201      	movs	r2, #1
 800085c:	2108      	movs	r1, #8
 800085e:	4834      	ldr	r0, [pc, #208]	; (8000930 <main+0x308>)
 8000860:	f006 fe26 	bl	80074b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000864:	2201      	movs	r2, #1
 8000866:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800086a:	4831      	ldr	r0, [pc, #196]	; (8000930 <main+0x308>)
 800086c:	f006 fe20 	bl	80074b0 <HAL_GPIO_WritePin>

  vTaskDelay(pdMS_TO_TICKS(1));
 8000870:	2001      	movs	r0, #1
 8000872:	f00f fe0f 	bl	8010494 <vTaskDelay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	2108      	movs	r1, #8
 800087a:	482d      	ldr	r0, [pc, #180]	; (8000930 <main+0x308>)
 800087c:	f006 fe18 	bl	80074b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000880:	2200      	movs	r2, #0
 8000882:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000886:	482a      	ldr	r0, [pc, #168]	; (8000930 <main+0x308>)
 8000888:	f006 fe12 	bl	80074b0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, (uint8_t *)&TPOWERDOWN, 5, 100);
 800088c:	2364      	movs	r3, #100	; 0x64
 800088e:	2205      	movs	r2, #5
 8000890:	494b      	ldr	r1, [pc, #300]	; (80009c0 <main+0x398>)
 8000892:	4849      	ldr	r0, [pc, #292]	; (80009b8 <main+0x390>)
 8000894:	f00a f820 	bl	800a8d8 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000898:	2201      	movs	r2, #1
 800089a:	2108      	movs	r1, #8
 800089c:	4824      	ldr	r0, [pc, #144]	; (8000930 <main+0x308>)
 800089e:	f006 fe07 	bl	80074b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80008a2:	2201      	movs	r2, #1
 80008a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008a8:	4821      	ldr	r0, [pc, #132]	; (8000930 <main+0x308>)
 80008aa:	f006 fe01 	bl	80074b0 <HAL_GPIO_WritePin>

  vTaskDelay(pdMS_TO_TICKS(1));
 80008ae:	2001      	movs	r0, #1
 80008b0:	f00f fdf0 	bl	8010494 <vTaskDelay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2108      	movs	r1, #8
 80008b8:	481d      	ldr	r0, [pc, #116]	; (8000930 <main+0x308>)
 80008ba:	f006 fdf9 	bl	80074b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008c4:	481a      	ldr	r0, [pc, #104]	; (8000930 <main+0x308>)
 80008c6:	f006 fdf3 	bl	80074b0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, (uint8_t *)&CHOPCONF, 5, 100);
 80008ca:	2364      	movs	r3, #100	; 0x64
 80008cc:	2205      	movs	r2, #5
 80008ce:	493d      	ldr	r1, [pc, #244]	; (80009c4 <main+0x39c>)
 80008d0:	4839      	ldr	r0, [pc, #228]	; (80009b8 <main+0x390>)
 80008d2:	f00a f801 	bl	800a8d8 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 80008d6:	2201      	movs	r2, #1
 80008d8:	2108      	movs	r1, #8
 80008da:	4815      	ldr	r0, [pc, #84]	; (8000930 <main+0x308>)
 80008dc:	f006 fde8 	bl	80074b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80008e0:	2201      	movs	r2, #1
 80008e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008e6:	4812      	ldr	r0, [pc, #72]	; (8000930 <main+0x308>)
 80008e8:	f006 fde2 	bl	80074b0 <HAL_GPIO_WritePin>

  vTaskDelay(pdMS_TO_TICKS(1));
 80008ec:	2001      	movs	r0, #1
 80008ee:	f00f fdd1 	bl	8010494 <vTaskDelay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2108      	movs	r1, #8
 80008f6:	480e      	ldr	r0, [pc, #56]	; (8000930 <main+0x308>)
 80008f8:	f006 fdda 	bl	80074b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80008fc:	2200      	movs	r2, #0
 80008fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000902:	480b      	ldr	r0, [pc, #44]	; (8000930 <main+0x308>)
 8000904:	f006 fdd4 	bl	80074b0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, (uint8_t *)&COOLCONF, 5, 100);
 8000908:	2364      	movs	r3, #100	; 0x64
 800090a:	2205      	movs	r2, #5
 800090c:	492e      	ldr	r1, [pc, #184]	; (80009c8 <main+0x3a0>)
 800090e:	482a      	ldr	r0, [pc, #168]	; (80009b8 <main+0x390>)
 8000910:	f009 ffe2 	bl	800a8d8 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000914:	2201      	movs	r2, #1
 8000916:	2108      	movs	r1, #8
 8000918:	4805      	ldr	r0, [pc, #20]	; (8000930 <main+0x308>)
 800091a:	f006 fdc9 	bl	80074b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800091e:	2201      	movs	r2, #1
 8000920:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000924:	4802      	ldr	r0, [pc, #8]	; (8000930 <main+0x308>)
 8000926:	f006 fdc3 	bl	80074b0 <HAL_GPIO_WritePin>



  vTaskStartScheduler();
 800092a:	f00f fde7 	bl	80104fc <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800092e:	e7fe      	b.n	800092e <main+0x306>
 8000930:	58020400 	.word	0x58020400
 8000934:	58020000 	.word	0x58020000
 8000938:	58020800 	.word	0x58020800
 800093c:	240002ec 	.word	0x240002ec
 8000940:	24000668 	.word	0x24000668
 8000944:	2400066c 	.word	0x2400066c
 8000948:	24000670 	.word	0x24000670
 800094c:	24000674 	.word	0x24000674
 8000950:	24000678 	.word	0x24000678
 8000954:	2400067c 	.word	0x2400067c
 8000958:	24000680 	.word	0x24000680
 800095c:	24000684 	.word	0x24000684
 8000960:	24000688 	.word	0x24000688
 8000964:	24000570 	.word	0x24000570
 8000968:	24000524 	.word	0x24000524
 800096c:	240004d8 	.word	0x240004d8
 8000970:	2400064c 	.word	0x2400064c
 8000974:	240003d8 	.word	0x240003d8
 8000978:	24000664 	.word	0x24000664
 800097c:	08011bf0 	.word	0x08011bf0
 8000980:	0800144d 	.word	0x0800144d
 8000984:	24000654 	.word	0x24000654
 8000988:	08011bfc 	.word	0x08011bfc
 800098c:	08001591 	.word	0x08001591
 8000990:	24000658 	.word	0x24000658
 8000994:	08011c10 	.word	0x08011c10
 8000998:	080017e9 	.word	0x080017e9
 800099c:	2400065c 	.word	0x2400065c
 80009a0:	08011c24 	.word	0x08011c24
 80009a4:	08001a59 	.word	0x08001a59
 80009a8:	24000660 	.word	0x24000660
 80009ac:	08011c38 	.word	0x08011c38
 80009b0:	080012b1 	.word	0x080012b1
 80009b4:	08011c54 	.word	0x08011c54
 80009b8:	24000350 	.word	0x24000350
 80009bc:	08011c5c 	.word	0x08011c5c
 80009c0:	08011c64 	.word	0x08011c64
 80009c4:	08011c6c 	.word	0x08011c6c
 80009c8:	08011c74 	.word	0x08011c74

080009cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b09c      	sub	sp, #112	; 0x70
 80009d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d6:	224c      	movs	r2, #76	; 0x4c
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f011 f822 	bl	8011a24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e0:	1d3b      	adds	r3, r7, #4
 80009e2:	2220      	movs	r2, #32
 80009e4:	2100      	movs	r1, #0
 80009e6:	4618      	mov	r0, r3
 80009e8:	f011 f81c 	bl	8011a24 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80009ec:	2004      	movs	r0, #4
 80009ee:	f006 fd93 	bl	8007518 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80009f2:	2300      	movs	r3, #0
 80009f4:	603b      	str	r3, [r7, #0]
 80009f6:	4b30      	ldr	r3, [pc, #192]	; (8000ab8 <SystemClock_Config+0xec>)
 80009f8:	699b      	ldr	r3, [r3, #24]
 80009fa:	4a2f      	ldr	r2, [pc, #188]	; (8000ab8 <SystemClock_Config+0xec>)
 80009fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a00:	6193      	str	r3, [r2, #24]
 8000a02:	4b2d      	ldr	r3, [pc, #180]	; (8000ab8 <SystemClock_Config+0xec>)
 8000a04:	699b      	ldr	r3, [r3, #24]
 8000a06:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a0e:	bf00      	nop
 8000a10:	4b29      	ldr	r3, [pc, #164]	; (8000ab8 <SystemClock_Config+0xec>)
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a1c:	d1f8      	bne.n	8000a10 <SystemClock_Config+0x44>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000a1e:	4b27      	ldr	r3, [pc, #156]	; (8000abc <SystemClock_Config+0xf0>)
 8000a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a22:	f023 0303 	bic.w	r3, r3, #3
 8000a26:	4a25      	ldr	r2, [pc, #148]	; (8000abc <SystemClock_Config+0xf0>)
 8000a28:	f043 0302 	orr.w	r3, r3, #2
 8000a2c:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000a2e:	2321      	movs	r3, #33	; 0x21
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a32:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a36:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a40:	2302      	movs	r3, #2
 8000a42:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a44:	2301      	movs	r3, #1
 8000a46:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8000a48:	2346      	movs	r3, #70	; 0x46
 8000a4a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a50:	2304      	movs	r3, #4
 8000a52:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a54:	2302      	movs	r3, #2
 8000a56:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a58:	230c      	movs	r3, #12
 8000a5a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f006 fdaf 	bl	80075cc <HAL_RCC_OscConfig>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000a74:	f001 f902 	bl	8001c7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a78:	233f      	movs	r3, #63	; 0x3f
 8000a7a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a88:	2340      	movs	r3, #64	; 0x40
 8000a8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a8c:	2340      	movs	r3, #64	; 0x40
 8000a8e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a94:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a96:	2340      	movs	r3, #64	; 0x40
 8000a98:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	2107      	movs	r1, #7
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f007 f998 	bl	8007dd4 <HAL_RCC_ClockConfig>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000aaa:	f001 f8e7 	bl	8001c7c <Error_Handler>
  }
}
 8000aae:	bf00      	nop
 8000ab0:	3770      	adds	r7, #112	; 0x70
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	58024800 	.word	0x58024800
 8000abc:	58024400 	.word	0x58024400

08000ac0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08a      	sub	sp, #40	; 0x28
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ac6:	f107 031c 	add.w	r3, r7, #28
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ad2:	463b      	mov	r3, r7
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
 8000ae0:	615a      	str	r2, [r3, #20]
 8000ae2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ae4:	4b2f      	ldr	r3, [pc, #188]	; (8000ba4 <MX_ADC1_Init+0xe4>)
 8000ae6:	4a30      	ldr	r2, [pc, #192]	; (8000ba8 <MX_ADC1_Init+0xe8>)
 8000ae8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000aea:	4b2e      	ldr	r3, [pc, #184]	; (8000ba4 <MX_ADC1_Init+0xe4>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000af0:	4b2c      	ldr	r3, [pc, #176]	; (8000ba4 <MX_ADC1_Init+0xe4>)
 8000af2:	2208      	movs	r2, #8
 8000af4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000af6:	4b2b      	ldr	r3, [pc, #172]	; (8000ba4 <MX_ADC1_Init+0xe4>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000afc:	4b29      	ldr	r3, [pc, #164]	; (8000ba4 <MX_ADC1_Init+0xe4>)
 8000afe:	2204      	movs	r2, #4
 8000b00:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b02:	4b28      	ldr	r3, [pc, #160]	; (8000ba4 <MX_ADC1_Init+0xe4>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b08:	4b26      	ldr	r3, [pc, #152]	; (8000ba4 <MX_ADC1_Init+0xe4>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000b0e:	4b25      	ldr	r3, [pc, #148]	; (8000ba4 <MX_ADC1_Init+0xe4>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b14:	4b23      	ldr	r3, [pc, #140]	; (8000ba4 <MX_ADC1_Init+0xe4>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b1a:	4b22      	ldr	r3, [pc, #136]	; (8000ba4 <MX_ADC1_Init+0xe4>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b20:	4b20      	ldr	r3, [pc, #128]	; (8000ba4 <MX_ADC1_Init+0xe4>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b26:	4b1f      	ldr	r3, [pc, #124]	; (8000ba4 <MX_ADC1_Init+0xe4>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ba4 <MX_ADC1_Init+0xe4>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b32:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <MX_ADC1_Init+0xe4>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000b38:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <MX_ADC1_Init+0xe4>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b40:	4818      	ldr	r0, [pc, #96]	; (8000ba4 <MX_ADC1_Init+0xe4>)
 8000b42:	f001 ff47 	bl	80029d4 <HAL_ADC_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000b4c:	f001 f896 	bl	8001c7c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b54:	f107 031c 	add.w	r3, r7, #28
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4812      	ldr	r0, [pc, #72]	; (8000ba4 <MX_ADC1_Init+0xe4>)
 8000b5c:	f003 fa78 	bl	8004050 <HAL_ADCEx_MultiModeConfigChannel>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000b66:	f001 f889 	bl	8001c7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000b6a:	4b10      	ldr	r3, [pc, #64]	; (8000bac <MX_ADC1_Init+0xec>)
 8000b6c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b6e:	2306      	movs	r3, #6
 8000b70:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b72:	2300      	movs	r3, #0
 8000b74:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b76:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000b7a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b7c:	2304      	movs	r3, #4
 8000b7e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b84:	2300      	movs	r3, #0
 8000b86:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b88:	463b      	mov	r3, r7
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <MX_ADC1_Init+0xe4>)
 8000b8e:	f002 fc25 	bl	80033dc <HAL_ADC_ConfigChannel>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000b98:	f001 f870 	bl	8001c7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b9c:	bf00      	nop
 8000b9e:	3728      	adds	r7, #40	; 0x28
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	240002ec 	.word	0x240002ec
 8000ba8:	40022000 	.word	0x40022000
 8000bac:	08600004 	.word	0x08600004

08000bb0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bb4:	4b28      	ldr	r3, [pc, #160]	; (8000c58 <MX_SPI1_Init+0xa8>)
 8000bb6:	4a29      	ldr	r2, [pc, #164]	; (8000c5c <MX_SPI1_Init+0xac>)
 8000bb8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bba:	4b27      	ldr	r3, [pc, #156]	; (8000c58 <MX_SPI1_Init+0xa8>)
 8000bbc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000bc0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bc2:	4b25      	ldr	r3, [pc, #148]	; (8000c58 <MX_SPI1_Init+0xa8>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bc8:	4b23      	ldr	r3, [pc, #140]	; (8000c58 <MX_SPI1_Init+0xa8>)
 8000bca:	2207      	movs	r2, #7
 8000bcc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000bce:	4b22      	ldr	r3, [pc, #136]	; (8000c58 <MX_SPI1_Init+0xa8>)
 8000bd0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000bd4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000bd6:	4b20      	ldr	r3, [pc, #128]	; (8000c58 <MX_SPI1_Init+0xa8>)
 8000bd8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000bdc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bde:	4b1e      	ldr	r3, [pc, #120]	; (8000c58 <MX_SPI1_Init+0xa8>)
 8000be0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000be4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000be6:	4b1c      	ldr	r3, [pc, #112]	; (8000c58 <MX_SPI1_Init+0xa8>)
 8000be8:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000bec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bee:	4b1a      	ldr	r3, [pc, #104]	; (8000c58 <MX_SPI1_Init+0xa8>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bf4:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <MX_SPI1_Init+0xa8>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bfa:	4b17      	ldr	r3, [pc, #92]	; (8000c58 <MX_SPI1_Init+0xa8>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000c00:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <MX_SPI1_Init+0xa8>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c06:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <MX_SPI1_Init+0xa8>)
 8000c08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c0c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c0e:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <MX_SPI1_Init+0xa8>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c14:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <MX_SPI1_Init+0xa8>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c1a:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <MX_SPI1_Init+0xa8>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c20:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <MX_SPI1_Init+0xa8>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c26:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <MX_SPI1_Init+0xa8>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c2c:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <MX_SPI1_Init+0xa8>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <MX_SPI1_Init+0xa8>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c38:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <MX_SPI1_Init+0xa8>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <MX_SPI1_Init+0xa8>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c44:	4804      	ldr	r0, [pc, #16]	; (8000c58 <MX_SPI1_Init+0xa8>)
 8000c46:	f009 fd41 	bl	800a6cc <HAL_SPI_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8000c50:	f001 f814 	bl	8001c7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	24000350 	.word	0x24000350
 8000c5c:	40013000 	.word	0x40013000

08000c60 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000c64:	4b24      	ldr	r3, [pc, #144]	; (8000cf8 <MX_SPI2_Init+0x98>)
 8000c66:	4a25      	ldr	r2, [pc, #148]	; (8000cfc <MX_SPI2_Init+0x9c>)
 8000c68:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000c6a:	4b23      	ldr	r3, [pc, #140]	; (8000cf8 <MX_SPI2_Init+0x98>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c70:	4b21      	ldr	r3, [pc, #132]	; (8000cf8 <MX_SPI2_Init+0x98>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c76:	4b20      	ldr	r3, [pc, #128]	; (8000cf8 <MX_SPI2_Init+0x98>)
 8000c78:	2207      	movs	r2, #7
 8000c7a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c7c:	4b1e      	ldr	r3, [pc, #120]	; (8000cf8 <MX_SPI2_Init+0x98>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c82:	4b1d      	ldr	r3, [pc, #116]	; (8000cf8 <MX_SPI2_Init+0x98>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c88:	4b1b      	ldr	r3, [pc, #108]	; (8000cf8 <MX_SPI2_Init+0x98>)
 8000c8a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000c8e:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c90:	4b19      	ldr	r3, [pc, #100]	; (8000cf8 <MX_SPI2_Init+0x98>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c96:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <MX_SPI2_Init+0x98>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c9c:	4b16      	ldr	r3, [pc, #88]	; (8000cf8 <MX_SPI2_Init+0x98>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000ca2:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <MX_SPI2_Init+0x98>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000ca8:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <MX_SPI2_Init+0x98>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000cae:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <MX_SPI2_Init+0x98>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000cb4:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <MX_SPI2_Init+0x98>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cba:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <MX_SPI2_Init+0x98>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cc0:	4b0d      	ldr	r3, [pc, #52]	; (8000cf8 <MX_SPI2_Init+0x98>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <MX_SPI2_Init+0x98>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ccc:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <MX_SPI2_Init+0x98>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000cd2:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <MX_SPI2_Init+0x98>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000cd8:	4b07      	ldr	r3, [pc, #28]	; (8000cf8 <MX_SPI2_Init+0x98>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <MX_SPI2_Init+0x98>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ce4:	4804      	ldr	r0, [pc, #16]	; (8000cf8 <MX_SPI2_Init+0x98>)
 8000ce6:	f009 fcf1 	bl	800a6cc <HAL_SPI_Init>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_SPI2_Init+0x94>
  {
    Error_Handler();
 8000cf0:	f000 ffc4 	bl	8001c7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	240003d8 	.word	0x240003d8
 8000cfc:	40003800 	.word	0x40003800

08000d00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08e      	sub	sp, #56	; 0x38
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d14:	f107 031c 	add.w	r3, r7, #28
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d20:	463b      	mov	r3, r7
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	609a      	str	r2, [r3, #8]
 8000d2a:	60da      	str	r2, [r3, #12]
 8000d2c:	611a      	str	r2, [r3, #16]
 8000d2e:	615a      	str	r2, [r3, #20]
 8000d30:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d32:	4b2d      	ldr	r3, [pc, #180]	; (8000de8 <MX_TIM2_Init+0xe8>)
 8000d34:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d38:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d3a:	4b2b      	ldr	r3, [pc, #172]	; (8000de8 <MX_TIM2_Init+0xe8>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d40:	4b29      	ldr	r3, [pc, #164]	; (8000de8 <MX_TIM2_Init+0xe8>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 280000-1;
 8000d46:	4b28      	ldr	r3, [pc, #160]	; (8000de8 <MX_TIM2_Init+0xe8>)
 8000d48:	4a28      	ldr	r2, [pc, #160]	; (8000dec <MX_TIM2_Init+0xec>)
 8000d4a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d4c:	4b26      	ldr	r3, [pc, #152]	; (8000de8 <MX_TIM2_Init+0xe8>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d52:	4b25      	ldr	r3, [pc, #148]	; (8000de8 <MX_TIM2_Init+0xe8>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d58:	4823      	ldr	r0, [pc, #140]	; (8000de8 <MX_TIM2_Init+0xe8>)
 8000d5a:	f00a fc78 	bl	800b64e <HAL_TIM_Base_Init>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000d64:	f000 ff8a 	bl	8001c7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d6c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d72:	4619      	mov	r1, r3
 8000d74:	481c      	ldr	r0, [pc, #112]	; (8000de8 <MX_TIM2_Init+0xe8>)
 8000d76:	f00b f8dd 	bl	800bf34 <HAL_TIM_ConfigClockSource>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000d80:	f000 ff7c 	bl	8001c7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d84:	4818      	ldr	r0, [pc, #96]	; (8000de8 <MX_TIM2_Init+0xe8>)
 8000d86:	f00a fd31 	bl	800b7ec <HAL_TIM_PWM_Init>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000d90:	f000 ff74 	bl	8001c7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d94:	2300      	movs	r3, #0
 8000d96:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d9c:	f107 031c 	add.w	r3, r7, #28
 8000da0:	4619      	mov	r1, r3
 8000da2:	4811      	ldr	r0, [pc, #68]	; (8000de8 <MX_TIM2_Init+0xe8>)
 8000da4:	f00b fe1a 	bl	800c9dc <HAL_TIMEx_MasterConfigSynchronization>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000dae:	f000 ff65 	bl	8001c7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000db2:	2360      	movs	r3, #96	; 0x60
 8000db4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dc2:	463b      	mov	r3, r7
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4807      	ldr	r0, [pc, #28]	; (8000de8 <MX_TIM2_Init+0xe8>)
 8000dca:	f00a ff9f 	bl	800bd0c <HAL_TIM_PWM_ConfigChannel>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000dd4:	f000 ff52 	bl	8001c7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000dd8:	4803      	ldr	r0, [pc, #12]	; (8000de8 <MX_TIM2_Init+0xe8>)
 8000dda:	f001 f953 	bl	8002084 <HAL_TIM_MspPostInit>

}
 8000dde:	bf00      	nop
 8000de0:	3738      	adds	r7, #56	; 0x38
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	240004d8 	.word	0x240004d8
 8000dec:	000445bf 	.word	0x000445bf

08000df0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b088      	sub	sp, #32
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000df6:	f107 0310 	add.w	r3, r7, #16
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e0e:	4b1e      	ldr	r3, [pc, #120]	; (8000e88 <MX_TIM3_Init+0x98>)
 8000e10:	4a1e      	ldr	r2, [pc, #120]	; (8000e8c <MX_TIM3_Init+0x9c>)
 8000e12:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 280-1;
 8000e14:	4b1c      	ldr	r3, [pc, #112]	; (8000e88 <MX_TIM3_Init+0x98>)
 8000e16:	f240 1217 	movw	r2, #279	; 0x117
 8000e1a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e1c:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <MX_TIM3_Init+0x98>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1500-1;
 8000e22:	4b19      	ldr	r3, [pc, #100]	; (8000e88 <MX_TIM3_Init+0x98>)
 8000e24:	f240 52db 	movw	r2, #1499	; 0x5db
 8000e28:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e2a:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <MX_TIM3_Init+0x98>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e30:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <MX_TIM3_Init+0x98>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e36:	4814      	ldr	r0, [pc, #80]	; (8000e88 <MX_TIM3_Init+0x98>)
 8000e38:	f00a fc09 	bl	800b64e <HAL_TIM_Base_Init>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000e42:	f000 ff1b 	bl	8001c7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e4a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e4c:	f107 0310 	add.w	r3, r7, #16
 8000e50:	4619      	mov	r1, r3
 8000e52:	480d      	ldr	r0, [pc, #52]	; (8000e88 <MX_TIM3_Init+0x98>)
 8000e54:	f00b f86e 	bl	800bf34 <HAL_TIM_ConfigClockSource>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000e5e:	f000 ff0d 	bl	8001c7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e62:	2300      	movs	r3, #0
 8000e64:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4806      	ldr	r0, [pc, #24]	; (8000e88 <MX_TIM3_Init+0x98>)
 8000e70:	f00b fdb4 	bl	800c9dc <HAL_TIMEx_MasterConfigSynchronization>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000e7a:	f000 feff 	bl	8001c7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e7e:	bf00      	nop
 8000e80:	3720      	adds	r7, #32
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	24000524 	.word	0x24000524
 8000e8c:	40000400 	.word	0x40000400

08000e90 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b088      	sub	sp, #32
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e96:	f107 0310 	add.w	r3, r7, #16
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea4:	1d3b      	adds	r3, r7, #4
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000eae:	4b1e      	ldr	r3, [pc, #120]	; (8000f28 <MX_TIM5_Init+0x98>)
 8000eb0:	4a1e      	ldr	r2, [pc, #120]	; (8000f2c <MX_TIM5_Init+0x9c>)
 8000eb2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 280-1;
 8000eb4:	4b1c      	ldr	r3, [pc, #112]	; (8000f28 <MX_TIM5_Init+0x98>)
 8000eb6:	f240 1217 	movw	r2, #279	; 0x117
 8000eba:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ebc:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <MX_TIM5_Init+0x98>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1500-1;
 8000ec2:	4b19      	ldr	r3, [pc, #100]	; (8000f28 <MX_TIM5_Init+0x98>)
 8000ec4:	f240 52db 	movw	r2, #1499	; 0x5db
 8000ec8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eca:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <MX_TIM5_Init+0x98>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed0:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <MX_TIM5_Init+0x98>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000ed6:	4814      	ldr	r0, [pc, #80]	; (8000f28 <MX_TIM5_Init+0x98>)
 8000ed8:	f00a fbb9 	bl	800b64e <HAL_TIM_Base_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8000ee2:	f000 fecb 	bl	8001c7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ee6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000eec:	f107 0310 	add.w	r3, r7, #16
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	480d      	ldr	r0, [pc, #52]	; (8000f28 <MX_TIM5_Init+0x98>)
 8000ef4:	f00b f81e 	bl	800bf34 <HAL_TIM_ConfigClockSource>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8000efe:	f000 febd 	bl	8001c7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f02:	2300      	movs	r3, #0
 8000f04:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4806      	ldr	r0, [pc, #24]	; (8000f28 <MX_TIM5_Init+0x98>)
 8000f10:	f00b fd64 	bl	800c9dc <HAL_TIMEx_MasterConfigSynchronization>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8000f1a:	f000 feaf 	bl	8001c7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000f1e:	bf00      	nop
 8000f20:	3720      	adds	r7, #32
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	24000570 	.word	0x24000570
 8000f2c:	40000c00 	.word	0x40000c00

08000f30 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f34:	4b22      	ldr	r3, [pc, #136]	; (8000fc0 <MX_USART3_UART_Init+0x90>)
 8000f36:	4a23      	ldr	r2, [pc, #140]	; (8000fc4 <MX_USART3_UART_Init+0x94>)
 8000f38:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f3a:	4b21      	ldr	r3, [pc, #132]	; (8000fc0 <MX_USART3_UART_Init+0x90>)
 8000f3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f40:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f42:	4b1f      	ldr	r3, [pc, #124]	; (8000fc0 <MX_USART3_UART_Init+0x90>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f48:	4b1d      	ldr	r3, [pc, #116]	; (8000fc0 <MX_USART3_UART_Init+0x90>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f4e:	4b1c      	ldr	r3, [pc, #112]	; (8000fc0 <MX_USART3_UART_Init+0x90>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f54:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <MX_USART3_UART_Init+0x90>)
 8000f56:	220c      	movs	r2, #12
 8000f58:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f5a:	4b19      	ldr	r3, [pc, #100]	; (8000fc0 <MX_USART3_UART_Init+0x90>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f60:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <MX_USART3_UART_Init+0x90>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f66:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <MX_USART3_UART_Init+0x90>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f6c:	4b14      	ldr	r3, [pc, #80]	; (8000fc0 <MX_USART3_UART_Init+0x90>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f72:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <MX_USART3_UART_Init+0x90>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f78:	4811      	ldr	r0, [pc, #68]	; (8000fc0 <MX_USART3_UART_Init+0x90>)
 8000f7a:	f00b fddb 	bl	800cb34 <HAL_UART_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000f84:	f000 fe7a 	bl	8001c7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f88:	2100      	movs	r1, #0
 8000f8a:	480d      	ldr	r0, [pc, #52]	; (8000fc0 <MX_USART3_UART_Init+0x90>)
 8000f8c:	f00e f973 	bl	800f276 <HAL_UARTEx_SetTxFifoThreshold>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000f96:	f000 fe71 	bl	8001c7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4808      	ldr	r0, [pc, #32]	; (8000fc0 <MX_USART3_UART_Init+0x90>)
 8000f9e:	f00e f9a8 	bl	800f2f2 <HAL_UARTEx_SetRxFifoThreshold>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000fa8:	f000 fe68 	bl	8001c7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000fac:	4804      	ldr	r0, [pc, #16]	; (8000fc0 <MX_USART3_UART_Init+0x90>)
 8000fae:	f00e f929 	bl	800f204 <HAL_UARTEx_DisableFifoMode>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000fb8:	f000 fe60 	bl	8001c7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	240005bc 	.word	0x240005bc
 8000fc4:	40004800 	.word	0x40004800

08000fc8 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
	...

08000fd8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fde:	4b0d      	ldr	r3, [pc, #52]	; (8001014 <MX_DMA_Init+0x3c>)
 8000fe0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000fe4:	4a0b      	ldr	r2, [pc, #44]	; (8001014 <MX_DMA_Init+0x3c>)
 8000fe6:	f043 0301 	orr.w	r3, r3, #1
 8000fea:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000fee:	4b09      	ldr	r3, [pc, #36]	; (8001014 <MX_DMA_Init+0x3c>)
 8000ff0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2105      	movs	r1, #5
 8001000:	200b      	movs	r0, #11
 8001002:	f003 f979 	bl	80042f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001006:	200b      	movs	r0, #11
 8001008:	f003 f990 	bl	800432c <HAL_NVIC_EnableIRQ>

}
 800100c:	bf00      	nop
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	58024400 	.word	0x58024400

08001018 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08e      	sub	sp, #56	; 0x38
 800101c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	60da      	str	r2, [r3, #12]
 800102c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800102e:	4b99      	ldr	r3, [pc, #612]	; (8001294 <MX_GPIO_Init+0x27c>)
 8001030:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001034:	4a97      	ldr	r2, [pc, #604]	; (8001294 <MX_GPIO_Init+0x27c>)
 8001036:	f043 0304 	orr.w	r3, r3, #4
 800103a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800103e:	4b95      	ldr	r3, [pc, #596]	; (8001294 <MX_GPIO_Init+0x27c>)
 8001040:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001044:	f003 0304 	and.w	r3, r3, #4
 8001048:	623b      	str	r3, [r7, #32]
 800104a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800104c:	4b91      	ldr	r3, [pc, #580]	; (8001294 <MX_GPIO_Init+0x27c>)
 800104e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001052:	4a90      	ldr	r2, [pc, #576]	; (8001294 <MX_GPIO_Init+0x27c>)
 8001054:	f043 0320 	orr.w	r3, r3, #32
 8001058:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800105c:	4b8d      	ldr	r3, [pc, #564]	; (8001294 <MX_GPIO_Init+0x27c>)
 800105e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001062:	f003 0320 	and.w	r3, r3, #32
 8001066:	61fb      	str	r3, [r7, #28]
 8001068:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800106a:	4b8a      	ldr	r3, [pc, #552]	; (8001294 <MX_GPIO_Init+0x27c>)
 800106c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001070:	4a88      	ldr	r2, [pc, #544]	; (8001294 <MX_GPIO_Init+0x27c>)
 8001072:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001076:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800107a:	4b86      	ldr	r3, [pc, #536]	; (8001294 <MX_GPIO_Init+0x27c>)
 800107c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001084:	61bb      	str	r3, [r7, #24]
 8001086:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001088:	4b82      	ldr	r3, [pc, #520]	; (8001294 <MX_GPIO_Init+0x27c>)
 800108a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800108e:	4a81      	ldr	r2, [pc, #516]	; (8001294 <MX_GPIO_Init+0x27c>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001098:	4b7e      	ldr	r3, [pc, #504]	; (8001294 <MX_GPIO_Init+0x27c>)
 800109a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	617b      	str	r3, [r7, #20]
 80010a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a6:	4b7b      	ldr	r3, [pc, #492]	; (8001294 <MX_GPIO_Init+0x27c>)
 80010a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010ac:	4a79      	ldr	r2, [pc, #484]	; (8001294 <MX_GPIO_Init+0x27c>)
 80010ae:	f043 0302 	orr.w	r3, r3, #2
 80010b2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80010b6:	4b77      	ldr	r3, [pc, #476]	; (8001294 <MX_GPIO_Init+0x27c>)
 80010b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010bc:	f003 0302 	and.w	r3, r3, #2
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010c4:	4b73      	ldr	r3, [pc, #460]	; (8001294 <MX_GPIO_Init+0x27c>)
 80010c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010ca:	4a72      	ldr	r2, [pc, #456]	; (8001294 <MX_GPIO_Init+0x27c>)
 80010cc:	f043 0308 	orr.w	r3, r3, #8
 80010d0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80010d4:	4b6f      	ldr	r3, [pc, #444]	; (8001294 <MX_GPIO_Init+0x27c>)
 80010d6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010da:	f003 0308 	and.w	r3, r3, #8
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010e2:	4b6c      	ldr	r3, [pc, #432]	; (8001294 <MX_GPIO_Init+0x27c>)
 80010e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010e8:	4a6a      	ldr	r2, [pc, #424]	; (8001294 <MX_GPIO_Init+0x27c>)
 80010ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010ee:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80010f2:	4b68      	ldr	r3, [pc, #416]	; (8001294 <MX_GPIO_Init+0x27c>)
 80010f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010fc:	60bb      	str	r3, [r7, #8]
 80010fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001100:	4b64      	ldr	r3, [pc, #400]	; (8001294 <MX_GPIO_Init+0x27c>)
 8001102:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001106:	4a63      	ldr	r2, [pc, #396]	; (8001294 <MX_GPIO_Init+0x27c>)
 8001108:	f043 0310 	orr.w	r3, r3, #16
 800110c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001110:	4b60      	ldr	r3, [pc, #384]	; (8001294 <MX_GPIO_Init+0x27c>)
 8001112:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001116:	f003 0310 	and.w	r3, r3, #16
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800111e:	2200      	movs	r2, #0
 8001120:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001124:	485c      	ldr	r0, [pc, #368]	; (8001298 <MX_GPIO_Init+0x280>)
 8001126:	f006 f9c3 	bl	80074b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	2110      	movs	r1, #16
 800112e:	485b      	ldr	r0, [pc, #364]	; (800129c <MX_GPIO_Init+0x284>)
 8001130:	f006 f9be 	bl	80074b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|GPIO_PIN_12|GPIO_PIN_13|LD3_Pin
 8001134:	2200      	movs	r2, #0
 8001136:	f24f 3139 	movw	r1, #62265	; 0xf339
 800113a:	4859      	ldr	r0, [pc, #356]	; (80012a0 <MX_GPIO_Init+0x288>)
 800113c:	f006 f9b8 	bl	80074b0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001140:	2200      	movs	r2, #0
 8001142:	2140      	movs	r1, #64	; 0x40
 8001144:	4857      	ldr	r0, [pc, #348]	; (80012a4 <MX_GPIO_Init+0x28c>)
 8001146:	f006 f9b3 	bl	80074b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800114a:	2200      	movs	r2, #0
 800114c:	2102      	movs	r1, #2
 800114e:	4856      	ldr	r0, [pc, #344]	; (80012a8 <MX_GPIO_Init+0x290>)
 8001150:	f006 f9ae 	bl	80074b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001154:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800115a:	2300      	movs	r3, #0
 800115c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001162:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001166:	4619      	mov	r1, r3
 8001168:	484e      	ldr	r0, [pc, #312]	; (80012a4 <MX_GPIO_Init+0x28c>)
 800116a:	f005 ffd9 	bl	8007120 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 800116e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001174:	2301      	movs	r3, #1
 8001176:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117c:	2300      	movs	r3, #0
 800117e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001184:	4619      	mov	r1, r3
 8001186:	4844      	ldr	r0, [pc, #272]	; (8001298 <MX_GPIO_Init+0x280>)
 8001188:	f005 ffca 	bl	8007120 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800118c:	2310      	movs	r3, #16
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001190:	2301      	movs	r3, #1
 8001192:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001198:	2300      	movs	r3, #0
 800119a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a0:	4619      	mov	r1, r3
 80011a2:	483e      	ldr	r0, [pc, #248]	; (800129c <MX_GPIO_Init+0x284>)
 80011a4:	f005 ffbc 	bl	8007120 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin PB12 PB13 LD3_Pin
                           PB15 PB3 PB4 PB5
                           PB8 PB9 */
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_12|GPIO_PIN_13|LD3_Pin
 80011a8:	f24f 3339 	movw	r3, #62265	; 0xf339
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ae:	2301      	movs	r3, #1
 80011b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b6:	2300      	movs	r3, #0
 80011b8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011be:	4619      	mov	r1, r3
 80011c0:	4837      	ldr	r0, [pc, #220]	; (80012a0 <MX_GPIO_Init+0x288>)
 80011c2:	f005 ffad 	bl	8007120 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80011c6:	2380      	movs	r3, #128	; 0x80
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011ca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80011d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d8:	4619      	mov	r1, r3
 80011da:	4834      	ldr	r0, [pc, #208]	; (80012ac <MX_GPIO_Init+0x294>)
 80011dc:	f005 ffa0 	bl	8007120 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011e0:	2340      	movs	r3, #64	; 0x40
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e4:	2301      	movs	r3, #1
 80011e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	2300      	movs	r3, #0
 80011ee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f4:	4619      	mov	r1, r3
 80011f6:	482b      	ldr	r0, [pc, #172]	; (80012a4 <MX_GPIO_Init+0x28c>)
 80011f8:	f005 ff92 	bl	8007120 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80011fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001202:	2300      	movs	r3, #0
 8001204:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800120a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120e:	4619      	mov	r1, r3
 8001210:	4822      	ldr	r0, [pc, #136]	; (800129c <MX_GPIO_Init+0x284>)
 8001212:	f005 ff85 	bl	8007120 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001216:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800121a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121c:	2302      	movs	r3, #2
 800121e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001224:	2300      	movs	r3, #0
 8001226:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001228:	230a      	movs	r3, #10
 800122a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800122c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001230:	4619      	mov	r1, r3
 8001232:	481a      	ldr	r0, [pc, #104]	; (800129c <MX_GPIO_Init+0x284>)
 8001234:	f005 ff74 	bl	8007120 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8001238:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123e:	2302      	movs	r3, #2
 8001240:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001246:	2300      	movs	r3, #0
 8001248:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124e:	4619      	mov	r1, r3
 8001250:	4812      	ldr	r0, [pc, #72]	; (800129c <MX_GPIO_Init+0x284>)
 8001252:	f005 ff65 	bl	8007120 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001256:	f44f 7300 	mov.w	r3, #512	; 0x200
 800125a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800125c:	2300      	movs	r3, #0
 800125e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001264:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001268:	4619      	mov	r1, r3
 800126a:	4810      	ldr	r0, [pc, #64]	; (80012ac <MX_GPIO_Init+0x294>)
 800126c:	f005 ff58 	bl	8007120 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001270:	2302      	movs	r3, #2
 8001272:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001274:	2301      	movs	r3, #1
 8001276:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127c:	2300      	movs	r3, #0
 800127e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001280:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001284:	4619      	mov	r1, r3
 8001286:	4808      	ldr	r0, [pc, #32]	; (80012a8 <MX_GPIO_Init+0x290>)
 8001288:	f005 ff4a 	bl	8007120 <HAL_GPIO_Init>

}
 800128c:	bf00      	nop
 800128e:	3738      	adds	r7, #56	; 0x38
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	58024400 	.word	0x58024400
 8001298:	58021400 	.word	0x58021400
 800129c:	58020000 	.word	0x58020000
 80012a0:	58020400 	.word	0x58020400
 80012a4:	58020800 	.word	0x58020800
 80012a8:	58021000 	.word	0x58021000
 80012ac:	58021800 	.word	0x58021800

080012b0 <UARTCom>:
/* USER CODE BEGIN 4 */


// Tasks

void UARTCom(void *argument){
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
	while(1){


		// Send data from the tx UART queue over uart
		// Receive from UARTtxQueue, buffer into UARTtxBuffer, and send over UART
		if (xQueueReceive(UARTtxQueue, &UARTtxBuffer, 100) == pdTRUE){
 80012b8:	4b53      	ldr	r3, [pc, #332]	; (8001408 <UARTCom+0x158>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2264      	movs	r2, #100	; 0x64
 80012be:	4953      	ldr	r1, [pc, #332]	; (800140c <UARTCom+0x15c>)
 80012c0:	4618      	mov	r0, r3
 80012c2:	f00e fc3f 	bl	800fb44 <xQueueReceive>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d105      	bne.n	80012d8 <UARTCom+0x28>
			HAL_UART_Transmit(&huart3, (uint8_t *)UARTtxBuffer, sizeof(UARTtxBuffer), 100);
 80012cc:	2364      	movs	r3, #100	; 0x64
 80012ce:	2202      	movs	r2, #2
 80012d0:	494e      	ldr	r1, [pc, #312]	; (800140c <UARTCom+0x15c>)
 80012d2:	484f      	ldr	r0, [pc, #316]	; (8001410 <UARTCom+0x160>)
 80012d4:	f00b fc7e 	bl	800cbd4 <HAL_UART_Transmit>
		}



		HAL_UART_Receive_IT(&huart3, (uint8_t *)UARTrxBuffer, 9);
 80012d8:	2209      	movs	r2, #9
 80012da:	494e      	ldr	r1, [pc, #312]	; (8001414 <UARTCom+0x164>)
 80012dc:	484c      	ldr	r0, [pc, #304]	; (8001410 <UARTCom+0x160>)
 80012de:	f00b fd0f 	bl	800cd00 <HAL_UART_Receive_IT>
		if(xSemaphoreTake(UARTComSem, 100) == pdTRUE){
 80012e2:	4b4d      	ldr	r3, [pc, #308]	; (8001418 <UARTCom+0x168>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2164      	movs	r1, #100	; 0x64
 80012e8:	4618      	mov	r0, r3
 80012ea:	f00e fd0b 	bl	800fd04 <xQueueSemaphoreTake>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	f040 8084 	bne.w	80013fe <UARTCom+0x14e>


			// Process data received over UART

			if (UARTrxBuffer[1] == '0'){
 80012f6:	4b47      	ldr	r3, [pc, #284]	; (8001414 <UARTCom+0x164>)
 80012f8:	785b      	ldrb	r3, [r3, #1]
 80012fa:	2b30      	cmp	r3, #48	; 0x30
 80012fc:	d102      	bne.n	8001304 <UARTCom+0x54>
				MtrStop = true;
 80012fe:	4b47      	ldr	r3, [pc, #284]	; (800141c <UARTCom+0x16c>)
 8001300:	2201      	movs	r2, #1
 8001302:	701a      	strb	r2, [r3, #0]
			}

			switch(UARTrxBuffer[0]){
 8001304:	4b43      	ldr	r3, [pc, #268]	; (8001414 <UARTCom+0x164>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	3b31      	subs	r3, #49	; 0x31
 800130a:	2b03      	cmp	r3, #3
 800130c:	d866      	bhi.n	80013dc <UARTCom+0x12c>
 800130e:	a201      	add	r2, pc, #4	; (adr r2, 8001314 <UARTCom+0x64>)
 8001310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001314:	08001325 	.word	0x08001325
 8001318:	08001349 	.word	0x08001349
 800131c:	0800136d 	.word	0x0800136d
 8001320:	080013b9 	.word	0x080013b9
			case '1':
				memcpy(MtrCtrlXrx_temp, UARTrxBuffer + 1, 8);
 8001324:	4a3e      	ldr	r2, [pc, #248]	; (8001420 <UARTCom+0x170>)
 8001326:	4b3f      	ldr	r3, [pc, #252]	; (8001424 <UARTCom+0x174>)
 8001328:	6810      	ldr	r0, [r2, #0]
 800132a:	6851      	ldr	r1, [r2, #4]
 800132c:	c303      	stmia	r3!, {r0, r1}
				xQueueSend(MtrCtrlXrxQueue, &MtrCtrlXrx_temp, 100);
 800132e:	4b3e      	ldr	r3, [pc, #248]	; (8001428 <UARTCom+0x178>)
 8001330:	6818      	ldr	r0, [r3, #0]
 8001332:	2300      	movs	r3, #0
 8001334:	2264      	movs	r2, #100	; 0x64
 8001336:	493b      	ldr	r1, [pc, #236]	; (8001424 <UARTCom+0x174>)
 8001338:	f00e f9de 	bl	800f6f8 <xQueueGenericSend>
				memset(&MtrCtrlXrx_temp[0], '0', 8);
 800133c:	2208      	movs	r2, #8
 800133e:	2130      	movs	r1, #48	; 0x30
 8001340:	4838      	ldr	r0, [pc, #224]	; (8001424 <UARTCom+0x174>)
 8001342:	f010 fb6f 	bl	8011a24 <memset>
				break;
 8001346:	e049      	b.n	80013dc <UARTCom+0x12c>

			case '2':
				memcpy(MtrCtrlYrx_temp, UARTrxBuffer + 1, 8);
 8001348:	4a35      	ldr	r2, [pc, #212]	; (8001420 <UARTCom+0x170>)
 800134a:	4b38      	ldr	r3, [pc, #224]	; (800142c <UARTCom+0x17c>)
 800134c:	6810      	ldr	r0, [r2, #0]
 800134e:	6851      	ldr	r1, [r2, #4]
 8001350:	c303      	stmia	r3!, {r0, r1}
				xQueueSend(MtrCtrlYrxQueue, &MtrCtrlYrx_temp, 100);
 8001352:	4b37      	ldr	r3, [pc, #220]	; (8001430 <UARTCom+0x180>)
 8001354:	6818      	ldr	r0, [r3, #0]
 8001356:	2300      	movs	r3, #0
 8001358:	2264      	movs	r2, #100	; 0x64
 800135a:	4934      	ldr	r1, [pc, #208]	; (800142c <UARTCom+0x17c>)
 800135c:	f00e f9cc 	bl	800f6f8 <xQueueGenericSend>
				memset(&MtrCtrlYrx_temp[0], '0', 8);
 8001360:	2208      	movs	r2, #8
 8001362:	2130      	movs	r1, #48	; 0x30
 8001364:	4831      	ldr	r0, [pc, #196]	; (800142c <UARTCom+0x17c>)
 8001366:	f010 fb5d 	bl	8011a24 <memset>
				break;
 800136a:	e037      	b.n	80013dc <UARTCom+0x12c>

			case '3':
				memcpy(AutoFocusrx_temp, UARTrxBuffer + 1, 5);
 800136c:	4b2c      	ldr	r3, [pc, #176]	; (8001420 <UARTCom+0x170>)
 800136e:	2205      	movs	r2, #5
 8001370:	4619      	mov	r1, r3
 8001372:	4830      	ldr	r0, [pc, #192]	; (8001434 <UARTCom+0x184>)
 8001374:	f010 fb48 	bl	8011a08 <memcpy>
				dist = atoi(AutoFocusrx_temp)/10;
 8001378:	482e      	ldr	r0, [pc, #184]	; (8001434 <UARTCom+0x184>)
 800137a:	f010 fb17 	bl	80119ac <atoi>
 800137e:	4603      	mov	r3, r0
 8001380:	4a2d      	ldr	r2, [pc, #180]	; (8001438 <UARTCom+0x188>)
 8001382:	fb82 1203 	smull	r1, r2, r2, r3
 8001386:	1092      	asrs	r2, r2, #2
 8001388:	17db      	asrs	r3, r3, #31
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	b29a      	uxth	r2, r3
 800138e:	4b2b      	ldr	r3, [pc, #172]	; (800143c <UARTCom+0x18c>)
 8001390:	801a      	strh	r2, [r3, #0]

				if (atoi(AutoFocusrx_temp) == 0){
 8001392:	4828      	ldr	r0, [pc, #160]	; (8001434 <UARTCom+0x184>)
 8001394:	f010 fb0a 	bl	80119ac <atoi>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d103      	bne.n	80013a6 <UARTCom+0xf6>
					AutoFocusEn = false;
 800139e:	4b28      	ldr	r3, [pc, #160]	; (8001440 <UARTCom+0x190>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	701a      	strb	r2, [r3, #0]
 80013a4:	e002      	b.n	80013ac <UARTCom+0xfc>
				} else {
					AutoFocusEn = true;
 80013a6:	4b26      	ldr	r3, [pc, #152]	; (8001440 <UARTCom+0x190>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	701a      	strb	r2, [r3, #0]
				}

				memset(&AutoFocusrx_temp[0], '0', 4);
 80013ac:	2204      	movs	r2, #4
 80013ae:	2130      	movs	r1, #48	; 0x30
 80013b0:	4820      	ldr	r0, [pc, #128]	; (8001434 <UARTCom+0x184>)
 80013b2:	f010 fb37 	bl	8011a24 <memset>
				break;
 80013b6:	e011      	b.n	80013dc <UARTCom+0x12c>

			case '4':
				memcpy(HelCtrlrx_temp, UARTrxBuffer + 1, 2);
 80013b8:	4b19      	ldr	r3, [pc, #100]	; (8001420 <UARTCom+0x170>)
 80013ba:	881b      	ldrh	r3, [r3, #0]
 80013bc:	b29a      	uxth	r2, r3
 80013be:	4b21      	ldr	r3, [pc, #132]	; (8001444 <UARTCom+0x194>)
 80013c0:	801a      	strh	r2, [r3, #0]
				xQueueSend(HelCtrlrxQueue, &HelCtrlrx_temp, 100);
 80013c2:	4b21      	ldr	r3, [pc, #132]	; (8001448 <UARTCom+0x198>)
 80013c4:	6818      	ldr	r0, [r3, #0]
 80013c6:	2300      	movs	r3, #0
 80013c8:	2264      	movs	r2, #100	; 0x64
 80013ca:	491e      	ldr	r1, [pc, #120]	; (8001444 <UARTCom+0x194>)
 80013cc:	f00e f994 	bl	800f6f8 <xQueueGenericSend>
				memset(&HelCtrlrx_temp[0], '0', 2);
 80013d0:	2202      	movs	r2, #2
 80013d2:	2130      	movs	r1, #48	; 0x30
 80013d4:	481b      	ldr	r0, [pc, #108]	; (8001444 <UARTCom+0x194>)
 80013d6:	f010 fb25 	bl	8011a24 <memset>
				break;
 80013da:	bf00      	nop
			}


			if (UARTrxBuffer[0] != '0'){
 80013dc:	4b0d      	ldr	r3, [pc, #52]	; (8001414 <UARTCom+0x164>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b30      	cmp	r3, #48	; 0x30
 80013e2:	f43f af69 	beq.w	80012b8 <UARTCom+0x8>
				HAL_UART_Transmit(&huart3, (uint8_t *)UARTrxBuffer, 9, 100);
 80013e6:	2364      	movs	r3, #100	; 0x64
 80013e8:	2209      	movs	r2, #9
 80013ea:	490a      	ldr	r1, [pc, #40]	; (8001414 <UARTCom+0x164>)
 80013ec:	4808      	ldr	r0, [pc, #32]	; (8001410 <UARTCom+0x160>)
 80013ee:	f00b fbf1 	bl	800cbd4 <HAL_UART_Transmit>
				memset(&UARTrxBuffer[0], '0', 9);
 80013f2:	2209      	movs	r2, #9
 80013f4:	2130      	movs	r1, #48	; 0x30
 80013f6:	4807      	ldr	r0, [pc, #28]	; (8001414 <UARTCom+0x164>)
 80013f8:	f010 fb14 	bl	8011a24 <memset>
 80013fc:	e75c      	b.n	80012b8 <UARTCom+0x8>
			}

		} else {

			vTaskDelay(pdMS_TO_TICKS(100));
 80013fe:	2064      	movs	r0, #100	; 0x64
 8001400:	f00f f848 	bl	8010494 <vTaskDelay>
		if (xQueueReceive(UARTtxQueue, &UARTtxBuffer, 100) == pdTRUE){
 8001404:	e758      	b.n	80012b8 <UARTCom+0x8>
 8001406:	bf00      	nop
 8001408:	24000668 	.word	0x24000668
 800140c:	2400068c 	.word	0x2400068c
 8001410:	240005bc 	.word	0x240005bc
 8001414:	24000690 	.word	0x24000690
 8001418:	24000684 	.word	0x24000684
 800141c:	24000651 	.word	0x24000651
 8001420:	24000691 	.word	0x24000691
 8001424:	2400069c 	.word	0x2400069c
 8001428:	24000670 	.word	0x24000670
 800142c:	240006a4 	.word	0x240006a4
 8001430:	24000674 	.word	0x24000674
 8001434:	240006ac 	.word	0x240006ac
 8001438:	66666667 	.word	0x66666667
 800143c:	24000000 	.word	0x24000000
 8001440:	24000650 	.word	0x24000650
 8001444:	240006b0 	.word	0x240006b0
 8001448:	24000678 	.word	0x24000678

0800144c <AutoFocus>:

	}

}

void AutoFocus(void *argument){
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]

	//static uint16_t dist = 2048;
	static uint8_t i = 0;
//	static char test_buff[5];

	TIM3 -> ARR = 0;
 8001454:	4b43      	ldr	r3, [pc, #268]	; (8001564 <AutoFocus+0x118>)
 8001456:	2200      	movs	r2, #0
 8001458:	62da      	str	r2, [r3, #44]	; 0x2c

	//static char AutoFocusrxQueueBuffer[4] = {0};

	while(1){

		if (AutoFocusEn){
 800145a:	4b43      	ldr	r3, [pc, #268]	; (8001568 <AutoFocus+0x11c>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d07b      	beq.n	800155a <AutoFocus+0x10e>

			// ADC sampling
			HAL_ADC_Start_IT(&hadc1);
 8001462:	4842      	ldr	r0, [pc, #264]	; (800156c <AutoFocus+0x120>)
 8001464:	f001 fc10 	bl	8002c88 <HAL_ADC_Start_IT>

			if (xSemaphoreTake(AutoFocusSem, 1) == pdTRUE){
 8001468:	4b41      	ldr	r3, [pc, #260]	; (8001570 <AutoFocus+0x124>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2101      	movs	r1, #1
 800146e:	4618      	mov	r0, r3
 8001470:	f00e fc48 	bl	800fd04 <xQueueSemaphoreTake>
 8001474:	4603      	mov	r3, r0
 8001476:	2b01      	cmp	r3, #1
 8001478:	d12e      	bne.n	80014d8 <AutoFocus+0x8c>


				// Setting direction of rotation
				if (ADCBuffer < dist - 300){
 800147a:	4b3e      	ldr	r3, [pc, #248]	; (8001574 <AutoFocus+0x128>)
 800147c:	881b      	ldrh	r3, [r3, #0]
 800147e:	461a      	mov	r2, r3
 8001480:	4b3d      	ldr	r3, [pc, #244]	; (8001578 <AutoFocus+0x12c>)
 8001482:	881b      	ldrh	r3, [r3, #0]
 8001484:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001488:	429a      	cmp	r2, r3
 800148a:	da06      	bge.n	800149a <AutoFocus+0x4e>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET); // This needs to be checked
 800148c:	2201      	movs	r2, #1
 800148e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001492:	483a      	ldr	r0, [pc, #232]	; (800157c <AutoFocus+0x130>)
 8001494:	f006 f80c 	bl	80074b0 <HAL_GPIO_WritePin>
 8001498:	e00e      	b.n	80014b8 <AutoFocus+0x6c>
				} else if (ADCBuffer > dist + 300){
 800149a:	4b36      	ldr	r3, [pc, #216]	; (8001574 <AutoFocus+0x128>)
 800149c:	881b      	ldrh	r3, [r3, #0]
 800149e:	461a      	mov	r2, r3
 80014a0:	4b35      	ldr	r3, [pc, #212]	; (8001578 <AutoFocus+0x12c>)
 80014a2:	881b      	ldrh	r3, [r3, #0]
 80014a4:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 80014a8:	429a      	cmp	r2, r3
 80014aa:	dd05      	ble.n	80014b8 <AutoFocus+0x6c>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80014ac:	2200      	movs	r2, #0
 80014ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014b2:	4832      	ldr	r0, [pc, #200]	; (800157c <AutoFocus+0x130>)
 80014b4:	f005 fffc 	bl	80074b0 <HAL_GPIO_WritePin>
				}


				// Setting the motor speed through the timer frequency
				TIM3 -> ARR = -abs(ADCBuffer - dist) + (dist + 500);
 80014b8:	4b2f      	ldr	r3, [pc, #188]	; (8001578 <AutoFocus+0x12c>)
 80014ba:	881b      	ldrh	r3, [r3, #0]
 80014bc:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 80014c0:	4b2c      	ldr	r3, [pc, #176]	; (8001574 <AutoFocus+0x128>)
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	4619      	mov	r1, r3
 80014c6:	4b2c      	ldr	r3, [pc, #176]	; (8001578 <AutoFocus+0x12c>)
 80014c8:	881b      	ldrh	r3, [r3, #0]
 80014ca:	1acb      	subs	r3, r1, r3
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	bfb8      	it	lt
 80014d0:	425b      	neglt	r3, r3
 80014d2:	1ad2      	subs	r2, r2, r3
 80014d4:	4b23      	ldr	r3, [pc, #140]	; (8001564 <AutoFocus+0x118>)
 80014d6:	62da      	str	r2, [r3, #44]	; 0x2c

			// The actual movement
			// Nothing is done if the distance is approximately correct
			// Additionally, due to what apppears to be a glitch in the internal gain settings, when the value of ADCBuffer is around 2048
			// it sometimes skips to 1535 (2^11 - 2^9) so we must also account for this to ensure the autofocus doesn't skip around unpredictably
			if ( (ADCBuffer > (dist - 300) && ADCBuffer < (dist + 300)) || (ADCBuffer == 1535) ){
 80014d8:	4b27      	ldr	r3, [pc, #156]	; (8001578 <AutoFocus+0x12c>)
 80014da:	881b      	ldrh	r3, [r3, #0]
 80014dc:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80014e0:	4a24      	ldr	r2, [pc, #144]	; (8001574 <AutoFocus+0x128>)
 80014e2:	8812      	ldrh	r2, [r2, #0]
 80014e4:	4293      	cmp	r3, r2
 80014e6:	dc07      	bgt.n	80014f8 <AutoFocus+0xac>
 80014e8:	4b23      	ldr	r3, [pc, #140]	; (8001578 <AutoFocus+0x12c>)
 80014ea:	881b      	ldrh	r3, [r3, #0]
 80014ec:	f203 132b 	addw	r3, r3, #299	; 0x12b
 80014f0:	4a20      	ldr	r2, [pc, #128]	; (8001574 <AutoFocus+0x128>)
 80014f2:	8812      	ldrh	r2, [r2, #0]
 80014f4:	4293      	cmp	r3, r2
 80014f6:	da05      	bge.n	8001504 <AutoFocus+0xb8>
 80014f8:	4b1e      	ldr	r3, [pc, #120]	; (8001574 <AutoFocus+0x128>)
 80014fa:	881b      	ldrh	r3, [r3, #0]
 80014fc:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001500:	4293      	cmp	r3, r2
 8001502:	d103      	bne.n	800150c <AutoFocus+0xc0>
				vTaskDelay(pdMS_TO_TICKS(5));
 8001504:	2005      	movs	r0, #5
 8001506:	f00e ffc5 	bl	8010494 <vTaskDelay>
 800150a:	e022      	b.n	8001552 <AutoFocus+0x106>
			} else {
				for (i = 0; i<= num_steps; i++){
 800150c:	4b1c      	ldr	r3, [pc, #112]	; (8001580 <AutoFocus+0x134>)
 800150e:	2200      	movs	r2, #0
 8001510:	701a      	strb	r2, [r3, #0]
 8001512:	e012      	b.n	800153a <AutoFocus+0xee>
					if (xSemaphoreTake(AutoFocusPulseSem, 1) == pdTRUE){
 8001514:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <AutoFocus+0x138>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2101      	movs	r1, #1
 800151a:	4618      	mov	r0, r3
 800151c:	f00e fbf2 	bl	800fd04 <xQueueSemaphoreTake>
 8001520:	4603      	mov	r3, r0
 8001522:	2b01      	cmp	r3, #1
 8001524:	d103      	bne.n	800152e <AutoFocus+0xe2>
						HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8001526:	2140      	movs	r1, #64	; 0x40
 8001528:	4817      	ldr	r0, [pc, #92]	; (8001588 <AutoFocus+0x13c>)
 800152a:	f005 ffda 	bl	80074e2 <HAL_GPIO_TogglePin>
				for (i = 0; i<= num_steps; i++){
 800152e:	4b14      	ldr	r3, [pc, #80]	; (8001580 <AutoFocus+0x134>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	3301      	adds	r3, #1
 8001534:	b2da      	uxtb	r2, r3
 8001536:	4b12      	ldr	r3, [pc, #72]	; (8001580 <AutoFocus+0x134>)
 8001538:	701a      	strb	r2, [r3, #0]
 800153a:	4b11      	ldr	r3, [pc, #68]	; (8001580 <AutoFocus+0x134>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	461a      	mov	r2, r3
 8001540:	4b12      	ldr	r3, [pc, #72]	; (800158c <AutoFocus+0x140>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	429a      	cmp	r2, r3
 8001546:	dde5      	ble.n	8001514 <AutoFocus+0xc8>
					}
				}
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001548:	2200      	movs	r2, #0
 800154a:	2140      	movs	r1, #64	; 0x40
 800154c:	480e      	ldr	r0, [pc, #56]	; (8001588 <AutoFocus+0x13c>)
 800154e:	f005 ffaf 	bl	80074b0 <HAL_GPIO_WritePin>

			}
			HAL_ADC_Stop_IT(&hadc1);
 8001552:	4806      	ldr	r0, [pc, #24]	; (800156c <AutoFocus+0x120>)
 8001554:	f001 fcca 	bl	8002eec <HAL_ADC_Stop_IT>
 8001558:	e77f      	b.n	800145a <AutoFocus+0xe>

		} else { vTaskDelay(pdMS_TO_TICKS(500)); } // end if(AutoFocusEn)
 800155a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800155e:	f00e ff99 	bl	8010494 <vTaskDelay>
		if (AutoFocusEn){
 8001562:	e77a      	b.n	800145a <AutoFocus+0xe>
 8001564:	40000400 	.word	0x40000400
 8001568:	24000650 	.word	0x24000650
 800156c:	240002ec 	.word	0x240002ec
 8001570:	24000680 	.word	0x24000680
 8001574:	2400064e 	.word	0x2400064e
 8001578:	24000000 	.word	0x24000000
 800157c:	58020400 	.word	0x58020400
 8001580:	240006b2 	.word	0x240006b2
 8001584:	24000688 	.word	0x24000688
 8001588:	58020800 	.word	0x58020800
 800158c:	08011c7c 	.word	0x08011c7c

08001590 <MotorCtrlX>:
	} // end while
}

void MotorCtrlX (void *argument){
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]



	while(1){

		if (xQueueReceive(MtrCtrlXrxQueue, &MtrCtrlXrxQueueBuffer, 100) == pdTRUE){
 8001598:	4b83      	ldr	r3, [pc, #524]	; (80017a8 <MotorCtrlX+0x218>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2264      	movs	r2, #100	; 0x64
 800159e:	4983      	ldr	r1, [pc, #524]	; (80017ac <MotorCtrlX+0x21c>)
 80015a0:	4618      	mov	r0, r3
 80015a2:	f00e facf 	bl	800fb44 <xQueueReceive>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	f040 80f8 	bne.w	800179e <MotorCtrlX+0x20e>


			switch(MtrCtrlXrxQueueBuffer[0]) {
 80015ae:	4b7f      	ldr	r3, [pc, #508]	; (80017ac <MotorCtrlX+0x21c>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	3b31      	subs	r3, #49	; 0x31
 80015b4:	2b03      	cmp	r3, #3
 80015b6:	f200 80ed 	bhi.w	8001794 <MotorCtrlX+0x204>
 80015ba:	a201      	add	r2, pc, #4	; (adr r2, 80015c0 <MotorCtrlX+0x30>)
 80015bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c0:	080015d1 	.word	0x080015d1
 80015c4:	0800166b 	.word	0x0800166b
 80015c8:	0800173b 	.word	0x0800173b
 80015cc:	08001771 	.word	0x08001771
				 * When the switch is triggered, change direction and move 200 steps off the switch.
				 * Register position
				 */

				case '1': // INIT
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); 			// The direction pin set to backwards
 80015d0:	2200      	movs	r2, #0
 80015d2:	2110      	movs	r1, #16
 80015d4:	4876      	ldr	r0, [pc, #472]	; (80017b0 <MotorCtrlX+0x220>)
 80015d6:	f005 ff6b 	bl	80074b0 <HAL_GPIO_WritePin>

					while(HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_9) == 1 && !MtrStop){	// Keep moving while the switch has not been pushed and a stop flag has not been issued
 80015da:	e009      	b.n	80015f0 <MotorCtrlX+0x60>
						xSemaphoreTake(MotorPulseSem, 100);
 80015dc:	4b75      	ldr	r3, [pc, #468]	; (80017b4 <MotorCtrlX+0x224>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2164      	movs	r1, #100	; 0x64
 80015e2:	4618      	mov	r0, r3
 80015e4:	f00e fb8e 	bl	800fd04 <xQueueSemaphoreTake>
						HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 80015e8:	2110      	movs	r1, #16
 80015ea:	4873      	ldr	r0, [pc, #460]	; (80017b8 <MotorCtrlX+0x228>)
 80015ec:	f005 ff79 	bl	80074e2 <HAL_GPIO_TogglePin>
					while(HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_9) == 1 && !MtrStop){	// Keep moving while the switch has not been pushed and a stop flag has not been issued
 80015f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015f4:	4871      	ldr	r0, [pc, #452]	; (80017bc <MotorCtrlX+0x22c>)
 80015f6:	f005 ff43 	bl	8007480 <HAL_GPIO_ReadPin>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d106      	bne.n	800160e <MotorCtrlX+0x7e>
 8001600:	4b6f      	ldr	r3, [pc, #444]	; (80017c0 <MotorCtrlX+0x230>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	f083 0301 	eor.w	r3, r3, #1
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1e6      	bne.n	80015dc <MotorCtrlX+0x4c>
					}

					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);			// Once hit, set the pin low and wait 100 ms
 800160e:	2200      	movs	r2, #0
 8001610:	2110      	movs	r1, #16
 8001612:	4869      	ldr	r0, [pc, #420]	; (80017b8 <MotorCtrlX+0x228>)
 8001614:	f005 ff4c 	bl	80074b0 <HAL_GPIO_WritePin>
					vTaskDelay(pdMS_TO_TICKS(500));
 8001618:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800161c:	f00e ff3a 	bl	8010494 <vTaskDelay>

					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);				// Change to forwards motion and move 200 steps
 8001620:	2201      	movs	r2, #1
 8001622:	2110      	movs	r1, #16
 8001624:	4862      	ldr	r0, [pc, #392]	; (80017b0 <MotorCtrlX+0x220>)
 8001626:	f005 ff43 	bl	80074b0 <HAL_GPIO_WritePin>
					for (i=0; i < 200; i++){
 800162a:	4b66      	ldr	r3, [pc, #408]	; (80017c4 <MotorCtrlX+0x234>)
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	e00e      	b.n	8001650 <MotorCtrlX+0xc0>
						xSemaphoreTake(MotorPulseSem, 100);
 8001632:	4b60      	ldr	r3, [pc, #384]	; (80017b4 <MotorCtrlX+0x224>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2164      	movs	r1, #100	; 0x64
 8001638:	4618      	mov	r0, r3
 800163a:	f00e fb63 	bl	800fd04 <xQueueSemaphoreTake>
						HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 800163e:	2110      	movs	r1, #16
 8001640:	485d      	ldr	r0, [pc, #372]	; (80017b8 <MotorCtrlX+0x228>)
 8001642:	f005 ff4e 	bl	80074e2 <HAL_GPIO_TogglePin>
					for (i=0; i < 200; i++){
 8001646:	4b5f      	ldr	r3, [pc, #380]	; (80017c4 <MotorCtrlX+0x234>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	3301      	adds	r3, #1
 800164c:	4a5d      	ldr	r2, [pc, #372]	; (80017c4 <MotorCtrlX+0x234>)
 800164e:	6013      	str	r3, [r2, #0]
 8001650:	4b5c      	ldr	r3, [pc, #368]	; (80017c4 <MotorCtrlX+0x234>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2bc7      	cmp	r3, #199	; 0xc7
 8001656:	ddec      	ble.n	8001632 <MotorCtrlX+0xa2>
					}
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001658:	2200      	movs	r2, #0
 800165a:	2110      	movs	r1, #16
 800165c:	4856      	ldr	r0, [pc, #344]	; (80017b8 <MotorCtrlX+0x228>)
 800165e:	f005 ff27 	bl	80074b0 <HAL_GPIO_WritePin>

					posX = 200;														// Set the X position to 200
 8001662:	4b59      	ldr	r3, [pc, #356]	; (80017c8 <MotorCtrlX+0x238>)
 8001664:	22c8      	movs	r2, #200	; 0xc8
 8001666:	801a      	strh	r2, [r3, #0]
					break;
 8001668:	e094      	b.n	8001794 <MotorCtrlX+0x204>
				 * 	Take 'steps' number of steps, only do so if the switch is untouched, the max position is not reached,
				 * 	or a stop command has not been received
				 */

				case '2': // MOVE
					memcpy(steps, MtrCtrlXrxQueueBuffer + 1, 7);			// Copy the useful information out of the queue buffer
 800166a:	4a58      	ldr	r2, [pc, #352]	; (80017cc <MotorCtrlX+0x23c>)
 800166c:	4b58      	ldr	r3, [pc, #352]	; (80017d0 <MotorCtrlX+0x240>)
 800166e:	6810      	ldr	r0, [r2, #0]
 8001670:	6018      	str	r0, [r3, #0]
 8001672:	8891      	ldrh	r1, [r2, #4]
 8001674:	7992      	ldrb	r2, [r2, #6]
 8001676:	8099      	strh	r1, [r3, #4]
 8001678:	719a      	strb	r2, [r3, #6]

					for (i=0; i < atoi(steps); i++){						// Move 'steps' number of steps
 800167a:	4b52      	ldr	r3, [pc, #328]	; (80017c4 <MotorCtrlX+0x234>)
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	e048      	b.n	8001714 <MotorCtrlX+0x184>

						if (!MtrStop){										// Every time, check that a stop command has not been received
 8001682:	4b4f      	ldr	r3, [pc, #316]	; (80017c0 <MotorCtrlX+0x230>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	f083 0301 	eor.w	r3, r3, #1
 800168a:	b2db      	uxtb	r3, r3
 800168c:	2b00      	cmp	r3, #0
 800168e:	d033      	beq.n	80016f8 <MotorCtrlX+0x168>

							xSemaphoreTake(MotorPulseSem, 100);				// Wait for the motor pulse
 8001690:	4b48      	ldr	r3, [pc, #288]	; (80017b4 <MotorCtrlX+0x224>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2164      	movs	r1, #100	; 0x64
 8001696:	4618      	mov	r0, r3
 8001698:	f00e fb34 	bl	800fd04 <xQueueSemaphoreTake>
							HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);			// Pulse the step pin
 800169c:	2110      	movs	r1, #16
 800169e:	4846      	ldr	r0, [pc, #280]	; (80017b8 <MotorCtrlX+0x228>)
 80016a0:	f005 ff1f 	bl	80074e2 <HAL_GPIO_TogglePin>
							posX += dir;									// Increment/decrement the x position
 80016a4:	4b4b      	ldr	r3, [pc, #300]	; (80017d4 <MotorCtrlX+0x244>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	b29a      	uxth	r2, r3
 80016aa:	4b47      	ldr	r3, [pc, #284]	; (80017c8 <MotorCtrlX+0x238>)
 80016ac:	881b      	ldrh	r3, [r3, #0]
 80016ae:	4413      	add	r3, r2
 80016b0:	b29a      	uxth	r2, r3
 80016b2:	4b45      	ldr	r3, [pc, #276]	; (80017c8 <MotorCtrlX+0x238>)
 80016b4:	801a      	strh	r2, [r3, #0]

							if (i%10 == 0){ // Add this modulo operation to lessen the load on the processor
 80016b6:	4b43      	ldr	r3, [pc, #268]	; (80017c4 <MotorCtrlX+0x234>)
 80016b8:	6819      	ldr	r1, [r3, #0]
 80016ba:	4b47      	ldr	r3, [pc, #284]	; (80017d8 <MotorCtrlX+0x248>)
 80016bc:	fb83 2301 	smull	r2, r3, r3, r1
 80016c0:	109a      	asrs	r2, r3, #2
 80016c2:	17cb      	asrs	r3, r1, #31
 80016c4:	1ad2      	subs	r2, r2, r3
 80016c6:	4613      	mov	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	1aca      	subs	r2, r1, r3
 80016d0:	2a00      	cmp	r2, #0
 80016d2:	d11a      	bne.n	800170a <MotorCtrlX+0x17a>
								if (HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_9) == 0 || (posX >= max_pos)){MtrStop = true;}	// Check that the max position has not been reached and the switch has not been pressed
 80016d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016d8:	4838      	ldr	r0, [pc, #224]	; (80017bc <MotorCtrlX+0x22c>)
 80016da:	f005 fed1 	bl	8007480 <HAL_GPIO_ReadPin>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d005      	beq.n	80016f0 <MotorCtrlX+0x160>
 80016e4:	4b38      	ldr	r3, [pc, #224]	; (80017c8 <MotorCtrlX+0x238>)
 80016e6:	881a      	ldrh	r2, [r3, #0]
 80016e8:	4b3c      	ldr	r3, [pc, #240]	; (80017dc <MotorCtrlX+0x24c>)
 80016ea:	881b      	ldrh	r3, [r3, #0]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d30c      	bcc.n	800170a <MotorCtrlX+0x17a>
 80016f0:	4b33      	ldr	r3, [pc, #204]	; (80017c0 <MotorCtrlX+0x230>)
 80016f2:	2201      	movs	r2, #1
 80016f4:	701a      	strb	r2, [r3, #0]
 80016f6:	e008      	b.n	800170a <MotorCtrlX+0x17a>
							}

						} else {													// If the stop flag is triggered, set it to false and break out of the loop
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80016f8:	2200      	movs	r2, #0
 80016fa:	2110      	movs	r1, #16
 80016fc:	482e      	ldr	r0, [pc, #184]	; (80017b8 <MotorCtrlX+0x228>)
 80016fe:	f005 fed7 	bl	80074b0 <HAL_GPIO_WritePin>
							MtrStop = false;
 8001702:	4b2f      	ldr	r3, [pc, #188]	; (80017c0 <MotorCtrlX+0x230>)
 8001704:	2200      	movs	r2, #0
 8001706:	701a      	strb	r2, [r3, #0]
							break;
 8001708:	e00c      	b.n	8001724 <MotorCtrlX+0x194>
					for (i=0; i < atoi(steps); i++){						// Move 'steps' number of steps
 800170a:	4b2e      	ldr	r3, [pc, #184]	; (80017c4 <MotorCtrlX+0x234>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	3301      	adds	r3, #1
 8001710:	4a2c      	ldr	r2, [pc, #176]	; (80017c4 <MotorCtrlX+0x234>)
 8001712:	6013      	str	r3, [r2, #0]
 8001714:	482e      	ldr	r0, [pc, #184]	; (80017d0 <MotorCtrlX+0x240>)
 8001716:	f010 f949 	bl	80119ac <atoi>
 800171a:	4602      	mov	r2, r0
 800171c:	4b29      	ldr	r3, [pc, #164]	; (80017c4 <MotorCtrlX+0x234>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	429a      	cmp	r2, r3
 8001722:	dcae      	bgt.n	8001682 <MotorCtrlX+0xf2>
							//xQueueSend(MtrCtrlXrxQueue, , 100); SEND THE POSITION OR SOMETHING
						}
					}
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001724:	2200      	movs	r2, #0
 8001726:	2110      	movs	r1, #16
 8001728:	4823      	ldr	r0, [pc, #140]	; (80017b8 <MotorCtrlX+0x228>)
 800172a:	f005 fec1 	bl	80074b0 <HAL_GPIO_WritePin>
					memset(&steps[0], 0, sizeof(steps));
 800172e:	2207      	movs	r2, #7
 8001730:	2100      	movs	r1, #0
 8001732:	4827      	ldr	r0, [pc, #156]	; (80017d0 <MotorCtrlX+0x240>)
 8001734:	f010 f976 	bl	8011a24 <memset>
					break;
 8001738:	e02c      	b.n	8001794 <MotorCtrlX+0x204>
				 * This one is pretty simple. The direction is selected by applying the appropriate state to the direction pin
				 * and the sign to the 'dir' variable
				 */

				case '3': // SELECT DIRECTION
					if (MtrCtrlXrxQueueBuffer[1] == '0'){
 800173a:	4b1c      	ldr	r3, [pc, #112]	; (80017ac <MotorCtrlX+0x21c>)
 800173c:	785b      	ldrb	r3, [r3, #1]
 800173e:	2b30      	cmp	r3, #48	; 0x30
 8001740:	d109      	bne.n	8001756 <MotorCtrlX+0x1c6>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001742:	2200      	movs	r2, #0
 8001744:	2110      	movs	r1, #16
 8001746:	481a      	ldr	r0, [pc, #104]	; (80017b0 <MotorCtrlX+0x220>)
 8001748:	f005 feb2 	bl	80074b0 <HAL_GPIO_WritePin>
						dir = -1;
 800174c:	4b21      	ldr	r3, [pc, #132]	; (80017d4 <MotorCtrlX+0x244>)
 800174e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001752:	601a      	str	r2, [r3, #0]
					} else if (MtrCtrlXrxQueueBuffer[1] == '1') {
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
						dir = 1;
					}
					break;
 8001754:	e01d      	b.n	8001792 <MotorCtrlX+0x202>
					} else if (MtrCtrlXrxQueueBuffer[1] == '1') {
 8001756:	4b15      	ldr	r3, [pc, #84]	; (80017ac <MotorCtrlX+0x21c>)
 8001758:	785b      	ldrb	r3, [r3, #1]
 800175a:	2b31      	cmp	r3, #49	; 0x31
 800175c:	d119      	bne.n	8001792 <MotorCtrlX+0x202>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800175e:	2201      	movs	r2, #1
 8001760:	2110      	movs	r1, #16
 8001762:	4813      	ldr	r0, [pc, #76]	; (80017b0 <MotorCtrlX+0x220>)
 8001764:	f005 fea4 	bl	80074b0 <HAL_GPIO_WritePin>
						dir = 1;
 8001768:	4b1a      	ldr	r3, [pc, #104]	; (80017d4 <MotorCtrlX+0x244>)
 800176a:	2201      	movs	r2, #1
 800176c:	601a      	str	r2, [r3, #0]
					break;
 800176e:	e010      	b.n	8001792 <MotorCtrlX+0x202>
				 * Again, nice and simple. Copy the useful information from the queue buffer and
				 * assign it to the ARR register which governs the speed of the timer
				 */

				case '4': // CHANGE SPEED
					memcpy(speed, MtrCtrlXrxQueueBuffer + 1, 4);
 8001770:	4b16      	ldr	r3, [pc, #88]	; (80017cc <MotorCtrlX+0x23c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	461a      	mov	r2, r3
 8001776:	4b1a      	ldr	r3, [pc, #104]	; (80017e0 <MotorCtrlX+0x250>)
 8001778:	601a      	str	r2, [r3, #0]
					TIM5 -> ARR = atoi(speed);
 800177a:	4819      	ldr	r0, [pc, #100]	; (80017e0 <MotorCtrlX+0x250>)
 800177c:	f010 f916 	bl	80119ac <atoi>
 8001780:	4602      	mov	r2, r0
 8001782:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <MotorCtrlX+0x254>)
 8001784:	62da      	str	r2, [r3, #44]	; 0x2c
					memset(&speed, 0, sizeof(speed));
 8001786:	2204      	movs	r2, #4
 8001788:	2100      	movs	r1, #0
 800178a:	4815      	ldr	r0, [pc, #84]	; (80017e0 <MotorCtrlX+0x250>)
 800178c:	f010 f94a 	bl	8011a24 <memset>
					break;
 8001790:	e000      	b.n	8001794 <MotorCtrlX+0x204>
					break;
 8001792:	bf00      	nop


			}

			memset(&MtrCtrlXrxQueueBuffer[0], 0, sizeof(MtrCtrlXrxQueueBuffer)); // Clear the queue buffer
 8001794:	2208      	movs	r2, #8
 8001796:	2100      	movs	r1, #0
 8001798:	4804      	ldr	r0, [pc, #16]	; (80017ac <MotorCtrlX+0x21c>)
 800179a:	f010 f943 	bl	8011a24 <memset>
		}
		vTaskDelay(pdMS_TO_TICKS(500)); // Wait half a second between commands
 800179e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017a2:	f00e fe77 	bl	8010494 <vTaskDelay>
		if (xQueueReceive(MtrCtrlXrxQueue, &MtrCtrlXrxQueueBuffer, 100) == pdTRUE){
 80017a6:	e6f7      	b.n	8001598 <MotorCtrlX+0x8>
 80017a8:	24000670 	.word	0x24000670
 80017ac:	240006b4 	.word	0x240006b4
 80017b0:	58020000 	.word	0x58020000
 80017b4:	2400067c 	.word	0x2400067c
 80017b8:	58020400 	.word	0x58020400
 80017bc:	58021800 	.word	0x58021800
 80017c0:	24000651 	.word	0x24000651
 80017c4:	240006bc 	.word	0x240006bc
 80017c8:	240006c0 	.word	0x240006c0
 80017cc:	240006b5 	.word	0x240006b5
 80017d0:	240006c4 	.word	0x240006c4
 80017d4:	240006cc 	.word	0x240006cc
 80017d8:	66666667 	.word	0x66666667
 80017dc:	24000002 	.word	0x24000002
 80017e0:	240006d0 	.word	0x240006d0
 80017e4:	40000c00 	.word	0x40000c00

080017e8 <MotorCtrlY>:

	}
}

void MotorCtrlY (void *argument){
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]



	while(1){

		if (xQueueReceive(MtrCtrlYrxQueue, &MtrCtrlYrxQueueBuffer, 100) == pdTRUE){
 80017f0:	4b89      	ldr	r3, [pc, #548]	; (8001a18 <MotorCtrlY+0x230>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2264      	movs	r2, #100	; 0x64
 80017f6:	4989      	ldr	r1, [pc, #548]	; (8001a1c <MotorCtrlY+0x234>)
 80017f8:	4618      	mov	r0, r3
 80017fa:	f00e f9a3 	bl	800fb44 <xQueueReceive>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b01      	cmp	r3, #1
 8001802:	f040 8103 	bne.w	8001a0c <MotorCtrlY+0x224>


			switch(MtrCtrlYrxQueueBuffer[0]) {
 8001806:	4b85      	ldr	r3, [pc, #532]	; (8001a1c <MotorCtrlY+0x234>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	3b31      	subs	r3, #49	; 0x31
 800180c:	2b03      	cmp	r3, #3
 800180e:	f200 80f8 	bhi.w	8001a02 <MotorCtrlY+0x21a>
 8001812:	a201      	add	r2, pc, #4	; (adr r2, 8001818 <MotorCtrlY+0x30>)
 8001814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001818:	08001829 	.word	0x08001829
 800181c:	080018cf 	.word	0x080018cf
 8001820:	080019a5 	.word	0x080019a5
 8001824:	080019df 	.word	0x080019df
				 * When the switch is triggered, change direction and move 200 steps off the switch.
				 * Register position
				 */

				case '1': // INIT
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); 			// The direction pin set to backwards
 8001828:	2200      	movs	r2, #0
 800182a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800182e:	487c      	ldr	r0, [pc, #496]	; (8001a20 <MotorCtrlY+0x238>)
 8001830:	f005 fe3e 	bl	80074b0 <HAL_GPIO_WritePin>

					while(HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_9) == 1 && !MtrStop){	// Keep moving while the switch has not been pushed and a stop flag has not been issued
 8001834:	e00a      	b.n	800184c <MotorCtrlY+0x64>
						xSemaphoreTake(MotorPulseSem, 100);
 8001836:	4b7b      	ldr	r3, [pc, #492]	; (8001a24 <MotorCtrlY+0x23c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2164      	movs	r1, #100	; 0x64
 800183c:	4618      	mov	r0, r3
 800183e:	f00e fa61 	bl	800fd04 <xQueueSemaphoreTake>
						HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 8001842:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001846:	4876      	ldr	r0, [pc, #472]	; (8001a20 <MotorCtrlY+0x238>)
 8001848:	f005 fe4b 	bl	80074e2 <HAL_GPIO_TogglePin>
					while(HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_9) == 1 && !MtrStop){	// Keep moving while the switch has not been pushed and a stop flag has not been issued
 800184c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001850:	4875      	ldr	r0, [pc, #468]	; (8001a28 <MotorCtrlY+0x240>)
 8001852:	f005 fe15 	bl	8007480 <HAL_GPIO_ReadPin>
 8001856:	4603      	mov	r3, r0
 8001858:	2b01      	cmp	r3, #1
 800185a:	d106      	bne.n	800186a <MotorCtrlY+0x82>
 800185c:	4b73      	ldr	r3, [pc, #460]	; (8001a2c <MotorCtrlY+0x244>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	f083 0301 	eor.w	r3, r3, #1
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1e5      	bne.n	8001836 <MotorCtrlY+0x4e>
					}

					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);			// Once hit, set the pin low and wait 100 ms
 800186a:	2200      	movs	r2, #0
 800186c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001870:	486b      	ldr	r0, [pc, #428]	; (8001a20 <MotorCtrlY+0x238>)
 8001872:	f005 fe1d 	bl	80074b0 <HAL_GPIO_WritePin>
					vTaskDelay(pdMS_TO_TICKS(500));
 8001876:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800187a:	f00e fe0b 	bl	8010494 <vTaskDelay>

					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);				// Change to forwards motion and move 200 steps
 800187e:	2201      	movs	r2, #1
 8001880:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001884:	4866      	ldr	r0, [pc, #408]	; (8001a20 <MotorCtrlY+0x238>)
 8001886:	f005 fe13 	bl	80074b0 <HAL_GPIO_WritePin>
					for (i=0; i < 200; i++){
 800188a:	4b69      	ldr	r3, [pc, #420]	; (8001a30 <MotorCtrlY+0x248>)
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	e00f      	b.n	80018b2 <MotorCtrlY+0xca>
						xSemaphoreTake(MotorPulseSem, 100);
 8001892:	4b64      	ldr	r3, [pc, #400]	; (8001a24 <MotorCtrlY+0x23c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2164      	movs	r1, #100	; 0x64
 8001898:	4618      	mov	r0, r3
 800189a:	f00e fa33 	bl	800fd04 <xQueueSemaphoreTake>
						HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 800189e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018a2:	485f      	ldr	r0, [pc, #380]	; (8001a20 <MotorCtrlY+0x238>)
 80018a4:	f005 fe1d 	bl	80074e2 <HAL_GPIO_TogglePin>
					for (i=0; i < 200; i++){
 80018a8:	4b61      	ldr	r3, [pc, #388]	; (8001a30 <MotorCtrlY+0x248>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	3301      	adds	r3, #1
 80018ae:	4a60      	ldr	r2, [pc, #384]	; (8001a30 <MotorCtrlY+0x248>)
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	4b5f      	ldr	r3, [pc, #380]	; (8001a30 <MotorCtrlY+0x248>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2bc7      	cmp	r3, #199	; 0xc7
 80018b8:	ddeb      	ble.n	8001892 <MotorCtrlY+0xaa>
					}
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80018ba:	2200      	movs	r2, #0
 80018bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018c0:	4857      	ldr	r0, [pc, #348]	; (8001a20 <MotorCtrlY+0x238>)
 80018c2:	f005 fdf5 	bl	80074b0 <HAL_GPIO_WritePin>

					posY = 200;														// Set the X position to 200
 80018c6:	4b5b      	ldr	r3, [pc, #364]	; (8001a34 <MotorCtrlY+0x24c>)
 80018c8:	22c8      	movs	r2, #200	; 0xc8
 80018ca:	801a      	strh	r2, [r3, #0]
					break;
 80018cc:	e099      	b.n	8001a02 <MotorCtrlY+0x21a>
				 * 	Take 'steps' number of steps, only do so if the switch is untouched, the max position is not reached,
				 * 	or a stop command has not been received
				 */

				case '2': // MOVE
					memcpy(steps, MtrCtrlYrxQueueBuffer + 1, 7);			// Copy the useful information out of the queue buffer
 80018ce:	4a5a      	ldr	r2, [pc, #360]	; (8001a38 <MotorCtrlY+0x250>)
 80018d0:	4b5a      	ldr	r3, [pc, #360]	; (8001a3c <MotorCtrlY+0x254>)
 80018d2:	6810      	ldr	r0, [r2, #0]
 80018d4:	6018      	str	r0, [r3, #0]
 80018d6:	8891      	ldrh	r1, [r2, #4]
 80018d8:	7992      	ldrb	r2, [r2, #6]
 80018da:	8099      	strh	r1, [r3, #4]
 80018dc:	719a      	strb	r2, [r3, #6]

					for (i=0; i < atoi(steps); i++){						// Move 'steps' number of steps
 80018de:	4b54      	ldr	r3, [pc, #336]	; (8001a30 <MotorCtrlY+0x248>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	e04a      	b.n	800197c <MotorCtrlY+0x194>

						if (!MtrStop){										// Every time, check that a stop command has not been received
 80018e6:	4b51      	ldr	r3, [pc, #324]	; (8001a2c <MotorCtrlY+0x244>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	f083 0301 	eor.w	r3, r3, #1
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d034      	beq.n	800195e <MotorCtrlY+0x176>

							xSemaphoreTake(MotorPulseSem, 100);				// Wait for the motor pulse
 80018f4:	4b4b      	ldr	r3, [pc, #300]	; (8001a24 <MotorCtrlY+0x23c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2164      	movs	r1, #100	; 0x64
 80018fa:	4618      	mov	r0, r3
 80018fc:	f00e fa02 	bl	800fd04 <xQueueSemaphoreTake>
							HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);			// Pulse the step pin
 8001900:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001904:	4846      	ldr	r0, [pc, #280]	; (8001a20 <MotorCtrlY+0x238>)
 8001906:	f005 fdec 	bl	80074e2 <HAL_GPIO_TogglePin>
							posY += dir;									// Increment/decrement the x position
 800190a:	4b4d      	ldr	r3, [pc, #308]	; (8001a40 <MotorCtrlY+0x258>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	b29a      	uxth	r2, r3
 8001910:	4b48      	ldr	r3, [pc, #288]	; (8001a34 <MotorCtrlY+0x24c>)
 8001912:	881b      	ldrh	r3, [r3, #0]
 8001914:	4413      	add	r3, r2
 8001916:	b29a      	uxth	r2, r3
 8001918:	4b46      	ldr	r3, [pc, #280]	; (8001a34 <MotorCtrlY+0x24c>)
 800191a:	801a      	strh	r2, [r3, #0]

							if (i%10 == 0){ // Add this modulo operation to lessen the load on the processor
 800191c:	4b44      	ldr	r3, [pc, #272]	; (8001a30 <MotorCtrlY+0x248>)
 800191e:	6819      	ldr	r1, [r3, #0]
 8001920:	4b48      	ldr	r3, [pc, #288]	; (8001a44 <MotorCtrlY+0x25c>)
 8001922:	fb83 2301 	smull	r2, r3, r3, r1
 8001926:	109a      	asrs	r2, r3, #2
 8001928:	17cb      	asrs	r3, r1, #31
 800192a:	1ad2      	subs	r2, r2, r3
 800192c:	4613      	mov	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4413      	add	r3, r2
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	1aca      	subs	r2, r1, r3
 8001936:	2a00      	cmp	r2, #0
 8001938:	d11b      	bne.n	8001972 <MotorCtrlY+0x18a>
								if (HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_9) == 0 || (posY >= max_pos)){MtrStop = true;}	// Check that the max position has not been reached and the switch has not been pressed
 800193a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800193e:	483a      	ldr	r0, [pc, #232]	; (8001a28 <MotorCtrlY+0x240>)
 8001940:	f005 fd9e 	bl	8007480 <HAL_GPIO_ReadPin>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d005      	beq.n	8001956 <MotorCtrlY+0x16e>
 800194a:	4b3a      	ldr	r3, [pc, #232]	; (8001a34 <MotorCtrlY+0x24c>)
 800194c:	881a      	ldrh	r2, [r3, #0]
 800194e:	4b3e      	ldr	r3, [pc, #248]	; (8001a48 <MotorCtrlY+0x260>)
 8001950:	881b      	ldrh	r3, [r3, #0]
 8001952:	429a      	cmp	r2, r3
 8001954:	d30d      	bcc.n	8001972 <MotorCtrlY+0x18a>
 8001956:	4b35      	ldr	r3, [pc, #212]	; (8001a2c <MotorCtrlY+0x244>)
 8001958:	2201      	movs	r2, #1
 800195a:	701a      	strb	r2, [r3, #0]
 800195c:	e009      	b.n	8001972 <MotorCtrlY+0x18a>
							}

						} else {													// If the stop flag is triggered, set it to false and break out of the loop
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800195e:	2200      	movs	r2, #0
 8001960:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001964:	482e      	ldr	r0, [pc, #184]	; (8001a20 <MotorCtrlY+0x238>)
 8001966:	f005 fda3 	bl	80074b0 <HAL_GPIO_WritePin>
							MtrStop = false;
 800196a:	4b30      	ldr	r3, [pc, #192]	; (8001a2c <MotorCtrlY+0x244>)
 800196c:	2200      	movs	r2, #0
 800196e:	701a      	strb	r2, [r3, #0]
							break;
 8001970:	e00c      	b.n	800198c <MotorCtrlY+0x1a4>
					for (i=0; i < atoi(steps); i++){						// Move 'steps' number of steps
 8001972:	4b2f      	ldr	r3, [pc, #188]	; (8001a30 <MotorCtrlY+0x248>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	3301      	adds	r3, #1
 8001978:	4a2d      	ldr	r2, [pc, #180]	; (8001a30 <MotorCtrlY+0x248>)
 800197a:	6013      	str	r3, [r2, #0]
 800197c:	482f      	ldr	r0, [pc, #188]	; (8001a3c <MotorCtrlY+0x254>)
 800197e:	f010 f815 	bl	80119ac <atoi>
 8001982:	4602      	mov	r2, r0
 8001984:	4b2a      	ldr	r3, [pc, #168]	; (8001a30 <MotorCtrlY+0x248>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	429a      	cmp	r2, r3
 800198a:	dcac      	bgt.n	80018e6 <MotorCtrlY+0xfe>
							//xQueueSend(MtrCtrlXrxQueue, , 100); SEND THE POSITION OR SOMETHING
						}
					}
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800198c:	2200      	movs	r2, #0
 800198e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001992:	4823      	ldr	r0, [pc, #140]	; (8001a20 <MotorCtrlY+0x238>)
 8001994:	f005 fd8c 	bl	80074b0 <HAL_GPIO_WritePin>
					memset(&steps[0], 0, sizeof(steps));
 8001998:	2207      	movs	r2, #7
 800199a:	2100      	movs	r1, #0
 800199c:	4827      	ldr	r0, [pc, #156]	; (8001a3c <MotorCtrlY+0x254>)
 800199e:	f010 f841 	bl	8011a24 <memset>
					break;
 80019a2:	e02e      	b.n	8001a02 <MotorCtrlY+0x21a>
				 * This one is pretty simple. The direction is selected by applying the appropriate state to the direction pin
				 * and the sign to the 'dir' variable
				 */

				case '3': // SELECT DIRECTION
					if (MtrCtrlYrxQueueBuffer[1] == '0'){
 80019a4:	4b1d      	ldr	r3, [pc, #116]	; (8001a1c <MotorCtrlY+0x234>)
 80019a6:	785b      	ldrb	r3, [r3, #1]
 80019a8:	2b30      	cmp	r3, #48	; 0x30
 80019aa:	d10a      	bne.n	80019c2 <MotorCtrlY+0x1da>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80019ac:	2200      	movs	r2, #0
 80019ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019b2:	481b      	ldr	r0, [pc, #108]	; (8001a20 <MotorCtrlY+0x238>)
 80019b4:	f005 fd7c 	bl	80074b0 <HAL_GPIO_WritePin>
						dir = -1;
 80019b8:	4b21      	ldr	r3, [pc, #132]	; (8001a40 <MotorCtrlY+0x258>)
 80019ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019be:	601a      	str	r2, [r3, #0]
					} else if (MtrCtrlYrxQueueBuffer[1] == '1') {
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
						dir = 1;
					}
					break;
 80019c0:	e01e      	b.n	8001a00 <MotorCtrlY+0x218>
					} else if (MtrCtrlYrxQueueBuffer[1] == '1') {
 80019c2:	4b16      	ldr	r3, [pc, #88]	; (8001a1c <MotorCtrlY+0x234>)
 80019c4:	785b      	ldrb	r3, [r3, #1]
 80019c6:	2b31      	cmp	r3, #49	; 0x31
 80019c8:	d11a      	bne.n	8001a00 <MotorCtrlY+0x218>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80019ca:	2201      	movs	r2, #1
 80019cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019d0:	4813      	ldr	r0, [pc, #76]	; (8001a20 <MotorCtrlY+0x238>)
 80019d2:	f005 fd6d 	bl	80074b0 <HAL_GPIO_WritePin>
						dir = 1;
 80019d6:	4b1a      	ldr	r3, [pc, #104]	; (8001a40 <MotorCtrlY+0x258>)
 80019d8:	2201      	movs	r2, #1
 80019da:	601a      	str	r2, [r3, #0]
					break;
 80019dc:	e010      	b.n	8001a00 <MotorCtrlY+0x218>
				 * Again, nice and simple. Copy the useful information from the queue buffer and
				 * assign it to the ARR register which governs the speed of the timer
				 */

				case '4': // CHANGE SPEED
					memcpy(speed, MtrCtrlYrxQueueBuffer + 1, 4);
 80019de:	4b16      	ldr	r3, [pc, #88]	; (8001a38 <MotorCtrlY+0x250>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	461a      	mov	r2, r3
 80019e4:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <MotorCtrlY+0x264>)
 80019e6:	601a      	str	r2, [r3, #0]
					TIM5 -> ARR = atoi(speed);
 80019e8:	4818      	ldr	r0, [pc, #96]	; (8001a4c <MotorCtrlY+0x264>)
 80019ea:	f00f ffdf 	bl	80119ac <atoi>
 80019ee:	4602      	mov	r2, r0
 80019f0:	4b17      	ldr	r3, [pc, #92]	; (8001a50 <MotorCtrlY+0x268>)
 80019f2:	62da      	str	r2, [r3, #44]	; 0x2c
					memset(&speed, 0, sizeof(speed));
 80019f4:	2204      	movs	r2, #4
 80019f6:	2100      	movs	r1, #0
 80019f8:	4814      	ldr	r0, [pc, #80]	; (8001a4c <MotorCtrlY+0x264>)
 80019fa:	f010 f813 	bl	8011a24 <memset>
					break;
 80019fe:	e000      	b.n	8001a02 <MotorCtrlY+0x21a>
					break;
 8001a00:	bf00      	nop


			}

			memset(&MtrCtrlYrxQueueBuffer[0], 0, sizeof(MtrCtrlYrxQueueBuffer)); // Clear the queue buffer
 8001a02:	2208      	movs	r2, #8
 8001a04:	2100      	movs	r1, #0
 8001a06:	4805      	ldr	r0, [pc, #20]	; (8001a1c <MotorCtrlY+0x234>)
 8001a08:	f010 f80c 	bl	8011a24 <memset>
		}
		vTaskDelay(pdMS_TO_TICKS(500)); // Wait half a second between commands
 8001a0c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a10:	f00e fd40 	bl	8010494 <vTaskDelay>
		if (xQueueReceive(MtrCtrlYrxQueue, &MtrCtrlYrxQueueBuffer, 100) == pdTRUE){
 8001a14:	e6ec      	b.n	80017f0 <MotorCtrlY+0x8>
 8001a16:	bf00      	nop
 8001a18:	24000674 	.word	0x24000674
 8001a1c:	240006d4 	.word	0x240006d4
 8001a20:	58020400 	.word	0x58020400
 8001a24:	2400067c 	.word	0x2400067c
 8001a28:	58021800 	.word	0x58021800
 8001a2c:	24000651 	.word	0x24000651
 8001a30:	240006dc 	.word	0x240006dc
 8001a34:	240006e0 	.word	0x240006e0
 8001a38:	240006d5 	.word	0x240006d5
 8001a3c:	240006e4 	.word	0x240006e4
 8001a40:	240006ec 	.word	0x240006ec
 8001a44:	66666667 	.word	0x66666667
 8001a48:	24000002 	.word	0x24000002
 8001a4c:	240006f0 	.word	0x240006f0
 8001a50:	40000c00 	.word	0x40000c00
 8001a54:	00000000 	.word	0x00000000

08001a58 <HeliumCtrl>:

	}

}

void HeliumCtrl(void *argument){
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	ed2d 8b02 	vpush	{d8}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]

	static char CCRrxBuffer[2] = {0};
	TIM2 -> CCR1 = 0;
 8001a64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a68:	2200      	movs	r2, #0
 8001a6a:	635a      	str	r2, [r3, #52]	; 0x34

	while(1){

		if (xQueueReceive(HelCtrlrxQueue, &CCRrxBuffer, 100) == pdTRUE){
 8001a6c:	4b1a      	ldr	r3, [pc, #104]	; (8001ad8 <HeliumCtrl+0x80>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2264      	movs	r2, #100	; 0x64
 8001a72:	491a      	ldr	r1, [pc, #104]	; (8001adc <HeliumCtrl+0x84>)
 8001a74:	4618      	mov	r0, r3
 8001a76:	f00e f865 	bl	800fb44 <xQueueReceive>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d120      	bne.n	8001ac2 <HeliumCtrl+0x6a>
			TIM2 -> CCR1 = round( (TIM2 -> ARR) * (atoi(CCRrxBuffer)/100.0) );
 8001a80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a86:	ee07 3a90 	vmov	s15, r3
 8001a8a:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8001a8e:	4813      	ldr	r0, [pc, #76]	; (8001adc <HeliumCtrl+0x84>)
 8001a90:	f00f ff8c 	bl	80119ac <atoi>
 8001a94:	ee07 0a90 	vmov	s15, r0
 8001a98:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001a9c:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 8001ad0 <HeliumCtrl+0x78>
 8001aa0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001aa4:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001aa8:	eeb0 0b47 	vmov.f64	d0, d7
 8001aac:	f010 f84e 	bl	8011b4c <round>
 8001ab0:	eeb0 7b40 	vmov.f64	d7, d0
 8001ab4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ab8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001abc:	ee17 2a90 	vmov	r2, s15
 8001ac0:	635a      	str	r2, [r3, #52]	; 0x34
		}


		vTaskDelay(pdMS_TO_TICKS(1000));
 8001ac2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ac6:	f00e fce5 	bl	8010494 <vTaskDelay>
		if (xQueueReceive(HelCtrlrxQueue, &CCRrxBuffer, 100) == pdTRUE){
 8001aca:	e7cf      	b.n	8001a6c <HeliumCtrl+0x14>
 8001acc:	f3af 8000 	nop.w
 8001ad0:	00000000 	.word	0x00000000
 8001ad4:	40590000 	.word	0x40590000
 8001ad8:	24000678 	.word	0x24000678
 8001adc:	240006f4 	.word	0x240006f4

08001ae0 <HAL_UART_RxCpltCallback>:


// Interrupt Service Routines

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60fb      	str	r3, [r7, #12]
	if (huart->Instance == USART3){
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a0e      	ldr	r2, [pc, #56]	; (8001b2c <HAL_UART_RxCpltCallback+0x4c>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d107      	bne.n	8001b06 <HAL_UART_RxCpltCallback+0x26>
		xSemaphoreGiveFromISR( UARTComSem, &xHigherPriorityTaskWoken);
 8001af6:	4b0e      	ldr	r3, [pc, #56]	; (8001b30 <HAL_UART_RxCpltCallback+0x50>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f107 020c 	add.w	r2, r7, #12
 8001afe:	4611      	mov	r1, r2
 8001b00:	4618      	mov	r0, r3
 8001b02:	f00d ff92 	bl	800fa2a <xQueueGiveFromISR>
	}
	//HAL_UART_Receive_IT(&huart3, (uint8_t *)UARTrxBuffer, 9);

	if(xHigherPriorityTaskWoken){
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d00a      	beq.n	8001b22 <HAL_UART_RxCpltCallback+0x42>
	    	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d007      	beq.n	8001b22 <HAL_UART_RxCpltCallback+0x42>
 8001b12:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <HAL_UART_RxCpltCallback+0x54>)
 8001b14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	f3bf 8f4f 	dsb	sy
 8001b1e:	f3bf 8f6f 	isb	sy
	}
}
 8001b22:	bf00      	nop
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40004800 	.word	0x40004800
 8001b30:	24000684 	.word	0x24000684
 8001b34:	e000ed04 	.word	0xe000ed04

08001b38 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001b40:	2300      	movs	r3, #0
 8001b42:	60fb      	str	r3, [r7, #12]

	HAL_SPI_Receive_DMA(&hspi2, DPPrxBuffer, sizeof(DPPrxBuffer));
 8001b44:	2202      	movs	r2, #2
 8001b46:	490f      	ldr	r1, [pc, #60]	; (8001b84 <HAL_SPI_RxCpltCallback+0x4c>)
 8001b48:	480f      	ldr	r0, [pc, #60]	; (8001b88 <HAL_SPI_RxCpltCallback+0x50>)
 8001b4a:	f009 f8b7 	bl	800acbc <HAL_SPI_Receive_DMA>
    xQueueSendToBackFromISR(UARTtxQueue, &DPPrxBuffer, &xHigherPriorityTaskWoken);
 8001b4e:	4b0f      	ldr	r3, [pc, #60]	; (8001b8c <HAL_SPI_RxCpltCallback+0x54>)
 8001b50:	6818      	ldr	r0, [r3, #0]
 8001b52:	f107 020c 	add.w	r2, r7, #12
 8001b56:	2300      	movs	r3, #0
 8001b58:	490a      	ldr	r1, [pc, #40]	; (8001b84 <HAL_SPI_RxCpltCallback+0x4c>)
 8001b5a:	f00d fecb 	bl	800f8f4 <xQueueGenericSendFromISR>

    if(xHigherPriorityTaskWoken){
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d00a      	beq.n	8001b7a <HAL_SPI_RxCpltCallback+0x42>
    	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d007      	beq.n	8001b7a <HAL_SPI_RxCpltCallback+0x42>
 8001b6a:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <HAL_SPI_RxCpltCallback+0x58>)
 8001b6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	f3bf 8f4f 	dsb	sy
 8001b76:	f3bf 8f6f 	isb	sy
    }
}
 8001b7a:	bf00      	nop
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	2400064c 	.word	0x2400064c
 8001b88:	240003d8 	.word	0x240003d8
 8001b8c:	24000668 	.word	0x24000668
 8001b90:	e000ed04 	.word	0xe000ed04

08001b94 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	60fb      	str	r3, [r7, #12]

	ADCBuffer = HAL_ADC_GetValue(&hadc1);
 8001ba0:	4810      	ldr	r0, [pc, #64]	; (8001be4 <HAL_ADC_ConvCpltCallback+0x50>)
 8001ba2:	f001 f9df 	bl	8002f64 <HAL_ADC_GetValue>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	4b0f      	ldr	r3, [pc, #60]	; (8001be8 <HAL_ADC_ConvCpltCallback+0x54>)
 8001bac:	801a      	strh	r2, [r3, #0]

	xSemaphoreGiveFromISR( AutoFocusSem, &xHigherPriorityTaskWoken);
 8001bae:	4b0f      	ldr	r3, [pc, #60]	; (8001bec <HAL_ADC_ConvCpltCallback+0x58>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f107 020c 	add.w	r2, r7, #12
 8001bb6:	4611      	mov	r1, r2
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f00d ff36 	bl	800fa2a <xQueueGiveFromISR>

	if(xHigherPriorityTaskWoken){
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d00a      	beq.n	8001bda <HAL_ADC_ConvCpltCallback+0x46>
	    	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d007      	beq.n	8001bda <HAL_ADC_ConvCpltCallback+0x46>
 8001bca:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001bcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	f3bf 8f4f 	dsb	sy
 8001bd6:	f3bf 8f6f 	isb	sy
	}
}
 8001bda:	bf00      	nop
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	240002ec 	.word	0x240002ec
 8001be8:	2400064e 	.word	0x2400064e
 8001bec:	24000680 	.word	0x24000680
 8001bf0:	e000ed04 	.word	0xe000ed04

08001bf4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60fb      	str	r3, [r7, #12]
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a17      	ldr	r2, [pc, #92]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d101      	bne.n	8001c0e <HAL_TIM_PeriodElapsedCallback+0x1a>
    HAL_IncTick();
 8001c0a:	f000 fc7d 	bl	8002508 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */


  if(htim == &htim3){ // tim7 is our autofocus motor pulse timer, triggers an interrupt on rollover
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a15      	ldr	r2, [pc, #84]	; (8001c68 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d107      	bne.n	8001c26 <HAL_TIM_PeriodElapsedCallback+0x32>
		xSemaphoreGiveFromISR( AutoFocusPulseSem, &xHigherPriorityTaskWoken);
 8001c16:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f107 020c 	add.w	r2, r7, #12
 8001c1e:	4611      	mov	r1, r2
 8001c20:	4618      	mov	r0, r3
 8001c22:	f00d ff02 	bl	800fa2a <xQueueGiveFromISR>
	}


  if(htim == &htim5){ // tim5 is our motor pulse timer, triggers an interrupt on rollover
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a11      	ldr	r2, [pc, #68]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d107      	bne.n	8001c3e <HAL_TIM_PeriodElapsedCallback+0x4a>
    	xSemaphoreGiveFromISR( MotorPulseSem, &xHigherPriorityTaskWoken);
 8001c2e:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f107 020c 	add.w	r2, r7, #12
 8001c36:	4611      	mov	r1, r2
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f00d fef6 	bl	800fa2a <xQueueGiveFromISR>
    }

    if(xHigherPriorityTaskWoken){
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d00a      	beq.n	8001c5a <HAL_TIM_PeriodElapsedCallback+0x66>
    	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d007      	beq.n	8001c5a <HAL_TIM_PeriodElapsedCallback+0x66>
 8001c4a:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001c4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	f3bf 8f4f 	dsb	sy
 8001c56:	f3bf 8f6f 	isb	sy
    }



  /* USER CODE END Callback 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40001000 	.word	0x40001000
 8001c68:	24000524 	.word	0x24000524
 8001c6c:	24000688 	.word	0x24000688
 8001c70:	24000570 	.word	0x24000570
 8001c74:	2400067c 	.word	0x2400067c
 8001c78:	e000ed04 	.word	0xe000ed04

08001c7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c80:	b672      	cpsid	i
}
 8001c82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c84:	e7fe      	b.n	8001c84 <Error_Handler+0x8>
	...

08001c88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c8e:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <HAL_MspInit+0x38>)
 8001c90:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001c94:	4a0a      	ldr	r2, [pc, #40]	; (8001cc0 <HAL_MspInit+0x38>)
 8001c96:	f043 0302 	orr.w	r3, r3, #2
 8001c9a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001c9e:	4b08      	ldr	r3, [pc, #32]	; (8001cc0 <HAL_MspInit+0x38>)
 8001ca0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	607b      	str	r3, [r7, #4]
 8001caa:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001cac:	2200      	movs	r2, #0
 8001cae:	210f      	movs	r1, #15
 8001cb0:	f06f 0001 	mvn.w	r0, #1
 8001cb4:	f002 fb20 	bl	80042f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cb8:	bf00      	nop
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	58024400 	.word	0x58024400

08001cc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b0b8      	sub	sp, #224	; 0xe0
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ccc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cdc:	f107 0314 	add.w	r3, r7, #20
 8001ce0:	22b8      	movs	r2, #184	; 0xb8
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f00f fe9d 	bl	8011a24 <memset>
  if(hadc->Instance==ADC1)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a2e      	ldr	r2, [pc, #184]	; (8001da8 <HAL_ADC_MspInit+0xe4>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d155      	bne.n	8001da0 <HAL_ADC_MspInit+0xdc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001cf4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001cf8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 70;
 8001cfe:	2346      	movs	r3, #70	; 0x46
 8001d00:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001d02:	2302      	movs	r3, #2
 8001d04:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001d06:	2302      	movs	r3, #2
 8001d08:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001d0e:	23c0      	movs	r3, #192	; 0xc0
 8001d10:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001d12:	2300      	movs	r3, #0
 8001d14:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001d16:	2300      	movs	r3, #0
 8001d18:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d20:	f107 0314 	add.w	r3, r7, #20
 8001d24:	4618      	mov	r0, r3
 8001d26:	f006 fc23 	bl	8008570 <HAL_RCCEx_PeriphCLKConfig>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001d30:	f7ff ffa4 	bl	8001c7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001d34:	4b1d      	ldr	r3, [pc, #116]	; (8001dac <HAL_ADC_MspInit+0xe8>)
 8001d36:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001d3a:	4a1c      	ldr	r2, [pc, #112]	; (8001dac <HAL_ADC_MspInit+0xe8>)
 8001d3c:	f043 0320 	orr.w	r3, r3, #32
 8001d40:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8001d44:	4b19      	ldr	r3, [pc, #100]	; (8001dac <HAL_ADC_MspInit+0xe8>)
 8001d46:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001d4a:	f003 0320 	and.w	r3, r3, #32
 8001d4e:	613b      	str	r3, [r7, #16]
 8001d50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d52:	4b16      	ldr	r3, [pc, #88]	; (8001dac <HAL_ADC_MspInit+0xe8>)
 8001d54:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001d58:	4a14      	ldr	r2, [pc, #80]	; (8001dac <HAL_ADC_MspInit+0xe8>)
 8001d5a:	f043 0320 	orr.w	r3, r3, #32
 8001d5e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001d62:	4b12      	ldr	r3, [pc, #72]	; (8001dac <HAL_ADC_MspInit+0xe8>)
 8001d64:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001d68:	f003 0320 	and.w	r3, r3, #32
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001d70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d84:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4809      	ldr	r0, [pc, #36]	; (8001db0 <HAL_ADC_MspInit+0xec>)
 8001d8c:	f005 f9c8 	bl	8007120 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001d90:	2200      	movs	r2, #0
 8001d92:	2105      	movs	r1, #5
 8001d94:	2012      	movs	r0, #18
 8001d96:	f002 faaf 	bl	80042f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001d9a:	2012      	movs	r0, #18
 8001d9c:	f002 fac6 	bl	800432c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001da0:	bf00      	nop
 8001da2:	37e0      	adds	r7, #224	; 0xe0
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40022000 	.word	0x40022000
 8001dac:	58024400 	.word	0x58024400
 8001db0:	58021400 	.word	0x58021400

08001db4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b0ba      	sub	sp, #232	; 0xe8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dbc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	60da      	str	r2, [r3, #12]
 8001dca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dcc:	f107 031c 	add.w	r3, r7, #28
 8001dd0:	22b8      	movs	r2, #184	; 0xb8
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f00f fe25 	bl	8011a24 <memset>
  if(hspi->Instance==SPI1)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a73      	ldr	r2, [pc, #460]	; (8001fac <HAL_SPI_MspInit+0x1f8>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d142      	bne.n	8001e6a <HAL_SPI_MspInit+0xb6>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001de4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001de8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dee:	f107 031c 	add.w	r3, r7, #28
 8001df2:	4618      	mov	r0, r3
 8001df4:	f006 fbbc 	bl	8008570 <HAL_RCCEx_PeriphCLKConfig>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001dfe:	f7ff ff3d 	bl	8001c7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e02:	4b6b      	ldr	r3, [pc, #428]	; (8001fb0 <HAL_SPI_MspInit+0x1fc>)
 8001e04:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001e08:	4a69      	ldr	r2, [pc, #420]	; (8001fb0 <HAL_SPI_MspInit+0x1fc>)
 8001e0a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e0e:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8001e12:	4b67      	ldr	r3, [pc, #412]	; (8001fb0 <HAL_SPI_MspInit+0x1fc>)
 8001e14:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001e18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e1c:	61bb      	str	r3, [r7, #24]
 8001e1e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e20:	4b63      	ldr	r3, [pc, #396]	; (8001fb0 <HAL_SPI_MspInit+0x1fc>)
 8001e22:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001e26:	4a62      	ldr	r2, [pc, #392]	; (8001fb0 <HAL_SPI_MspInit+0x1fc>)
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001e30:	4b5f      	ldr	r3, [pc, #380]	; (8001fb0 <HAL_SPI_MspInit+0x1fc>)
 8001e32:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	617b      	str	r3, [r7, #20]
 8001e3c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001e3e:	23e0      	movs	r3, #224	; 0xe0
 8001e40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e44:	2302      	movs	r3, #2
 8001e46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e50:	2300      	movs	r3, #0
 8001e52:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e56:	2305      	movs	r3, #5
 8001e58:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e5c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001e60:	4619      	mov	r1, r3
 8001e62:	4854      	ldr	r0, [pc, #336]	; (8001fb4 <HAL_SPI_MspInit+0x200>)
 8001e64:	f005 f95c 	bl	8007120 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001e68:	e09b      	b.n	8001fa2 <HAL_SPI_MspInit+0x1ee>
  else if(hspi->Instance==SPI2)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a52      	ldr	r2, [pc, #328]	; (8001fb8 <HAL_SPI_MspInit+0x204>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	f040 8096 	bne.w	8001fa2 <HAL_SPI_MspInit+0x1ee>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001e76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e7a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e80:	f107 031c 	add.w	r3, r7, #28
 8001e84:	4618      	mov	r0, r3
 8001e86:	f006 fb73 	bl	8008570 <HAL_RCCEx_PeriphCLKConfig>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <HAL_SPI_MspInit+0xe0>
      Error_Handler();
 8001e90:	f7ff fef4 	bl	8001c7c <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e94:	4b46      	ldr	r3, [pc, #280]	; (8001fb0 <HAL_SPI_MspInit+0x1fc>)
 8001e96:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001e9a:	4a45      	ldr	r2, [pc, #276]	; (8001fb0 <HAL_SPI_MspInit+0x1fc>)
 8001e9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ea0:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001ea4:	4b42      	ldr	r3, [pc, #264]	; (8001fb0 <HAL_SPI_MspInit+0x1fc>)
 8001ea6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eae:	613b      	str	r3, [r7, #16]
 8001eb0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eb2:	4b3f      	ldr	r3, [pc, #252]	; (8001fb0 <HAL_SPI_MspInit+0x1fc>)
 8001eb4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001eb8:	4a3d      	ldr	r2, [pc, #244]	; (8001fb0 <HAL_SPI_MspInit+0x1fc>)
 8001eba:	f043 0304 	orr.w	r3, r3, #4
 8001ebe:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001ec2:	4b3b      	ldr	r3, [pc, #236]	; (8001fb0 <HAL_SPI_MspInit+0x1fc>)
 8001ec4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed0:	4b37      	ldr	r3, [pc, #220]	; (8001fb0 <HAL_SPI_MspInit+0x1fc>)
 8001ed2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001ed6:	4a36      	ldr	r2, [pc, #216]	; (8001fb0 <HAL_SPI_MspInit+0x1fc>)
 8001ed8:	f043 0302 	orr.w	r3, r3, #2
 8001edc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001ee0:	4b33      	ldr	r3, [pc, #204]	; (8001fb0 <HAL_SPI_MspInit+0x1fc>)
 8001ee2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	60bb      	str	r3, [r7, #8]
 8001eec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001eee:	2306      	movs	r3, #6
 8001ef0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efa:	2300      	movs	r3, #0
 8001efc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f00:	2300      	movs	r3, #0
 8001f02:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f06:	2305      	movs	r3, #5
 8001f08:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f0c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f10:	4619      	mov	r1, r3
 8001f12:	482a      	ldr	r0, [pc, #168]	; (8001fbc <HAL_SPI_MspInit+0x208>)
 8001f14:	f005 f904 	bl	8007120 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f1c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f20:	2302      	movs	r3, #2
 8001f22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f32:	2305      	movs	r3, #5
 8001f34:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f38:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4820      	ldr	r0, [pc, #128]	; (8001fc0 <HAL_SPI_MspInit+0x20c>)
 8001f40:	f005 f8ee 	bl	8007120 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream0;
 8001f44:	4b1f      	ldr	r3, [pc, #124]	; (8001fc4 <HAL_SPI_MspInit+0x210>)
 8001f46:	4a20      	ldr	r2, [pc, #128]	; (8001fc8 <HAL_SPI_MspInit+0x214>)
 8001f48:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8001f4a:	4b1e      	ldr	r3, [pc, #120]	; (8001fc4 <HAL_SPI_MspInit+0x210>)
 8001f4c:	2227      	movs	r2, #39	; 0x27
 8001f4e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f50:	4b1c      	ldr	r3, [pc, #112]	; (8001fc4 <HAL_SPI_MspInit+0x210>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f56:	4b1b      	ldr	r3, [pc, #108]	; (8001fc4 <HAL_SPI_MspInit+0x210>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f5c:	4b19      	ldr	r3, [pc, #100]	; (8001fc4 <HAL_SPI_MspInit+0x210>)
 8001f5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f62:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f64:	4b17      	ldr	r3, [pc, #92]	; (8001fc4 <HAL_SPI_MspInit+0x210>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f6a:	4b16      	ldr	r3, [pc, #88]	; (8001fc4 <HAL_SPI_MspInit+0x210>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001f70:	4b14      	ldr	r3, [pc, #80]	; (8001fc4 <HAL_SPI_MspInit+0x210>)
 8001f72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f76:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001f78:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <HAL_SPI_MspInit+0x210>)
 8001f7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f7e:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f80:	4b10      	ldr	r3, [pc, #64]	; (8001fc4 <HAL_SPI_MspInit+0x210>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001f86:	480f      	ldr	r0, [pc, #60]	; (8001fc4 <HAL_SPI_MspInit+0x210>)
 8001f88:	f002 f9de 	bl	8004348 <HAL_DMA_Init>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <HAL_SPI_MspInit+0x1e2>
      Error_Handler();
 8001f92:	f7ff fe73 	bl	8001c7c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a0a      	ldr	r2, [pc, #40]	; (8001fc4 <HAL_SPI_MspInit+0x210>)
 8001f9a:	67da      	str	r2, [r3, #124]	; 0x7c
 8001f9c:	4a09      	ldr	r2, [pc, #36]	; (8001fc4 <HAL_SPI_MspInit+0x210>)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001fa2:	bf00      	nop
 8001fa4:	37e8      	adds	r7, #232	; 0xe8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40013000 	.word	0x40013000
 8001fb0:	58024400 	.word	0x58024400
 8001fb4:	58020000 	.word	0x58020000
 8001fb8:	40003800 	.word	0x40003800
 8001fbc:	58020800 	.word	0x58020800
 8001fc0:	58020400 	.word	0x58020400
 8001fc4:	24000460 	.word	0x24000460
 8001fc8:	40020010 	.word	0x40020010

08001fcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fdc:	d10f      	bne.n	8001ffe <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fde:	4b26      	ldr	r3, [pc, #152]	; (8002078 <HAL_TIM_Base_MspInit+0xac>)
 8001fe0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001fe4:	4a24      	ldr	r2, [pc, #144]	; (8002078 <HAL_TIM_Base_MspInit+0xac>)
 8001fe6:	f043 0301 	orr.w	r3, r3, #1
 8001fea:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001fee:	4b22      	ldr	r3, [pc, #136]	; (8002078 <HAL_TIM_Base_MspInit+0xac>)
 8001ff0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	617b      	str	r3, [r7, #20]
 8001ffa:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001ffc:	e038      	b.n	8002070 <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM3)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a1e      	ldr	r2, [pc, #120]	; (800207c <HAL_TIM_Base_MspInit+0xb0>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d117      	bne.n	8002038 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002008:	4b1b      	ldr	r3, [pc, #108]	; (8002078 <HAL_TIM_Base_MspInit+0xac>)
 800200a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800200e:	4a1a      	ldr	r2, [pc, #104]	; (8002078 <HAL_TIM_Base_MspInit+0xac>)
 8002010:	f043 0302 	orr.w	r3, r3, #2
 8002014:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8002018:	4b17      	ldr	r3, [pc, #92]	; (8002078 <HAL_TIM_Base_MspInit+0xac>)
 800201a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	613b      	str	r3, [r7, #16]
 8002024:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002026:	2200      	movs	r2, #0
 8002028:	2105      	movs	r1, #5
 800202a:	201d      	movs	r0, #29
 800202c:	f002 f964 	bl	80042f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002030:	201d      	movs	r0, #29
 8002032:	f002 f97b 	bl	800432c <HAL_NVIC_EnableIRQ>
}
 8002036:	e01b      	b.n	8002070 <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM5)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a10      	ldr	r2, [pc, #64]	; (8002080 <HAL_TIM_Base_MspInit+0xb4>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d116      	bne.n	8002070 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002042:	4b0d      	ldr	r3, [pc, #52]	; (8002078 <HAL_TIM_Base_MspInit+0xac>)
 8002044:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002048:	4a0b      	ldr	r2, [pc, #44]	; (8002078 <HAL_TIM_Base_MspInit+0xac>)
 800204a:	f043 0308 	orr.w	r3, r3, #8
 800204e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8002052:	4b09      	ldr	r3, [pc, #36]	; (8002078 <HAL_TIM_Base_MspInit+0xac>)
 8002054:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002058:	f003 0308 	and.w	r3, r3, #8
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8002060:	2200      	movs	r2, #0
 8002062:	2105      	movs	r1, #5
 8002064:	2032      	movs	r0, #50	; 0x32
 8002066:	f002 f947 	bl	80042f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800206a:	2032      	movs	r0, #50	; 0x32
 800206c:	f002 f95e 	bl	800432c <HAL_NVIC_EnableIRQ>
}
 8002070:	bf00      	nop
 8002072:	3718      	adds	r7, #24
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	58024400 	.word	0x58024400
 800207c:	40000400 	.word	0x40000400
 8002080:	40000c00 	.word	0x40000c00

08002084 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b088      	sub	sp, #32
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208c:	f107 030c 	add.w	r3, r7, #12
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	60da      	str	r2, [r3, #12]
 800209a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020a4:	d11e      	bne.n	80020e4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a6:	4b11      	ldr	r3, [pc, #68]	; (80020ec <HAL_TIM_MspPostInit+0x68>)
 80020a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80020ac:	4a0f      	ldr	r2, [pc, #60]	; (80020ec <HAL_TIM_MspPostInit+0x68>)
 80020ae:	f043 0301 	orr.w	r3, r3, #1
 80020b2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80020b6:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <HAL_TIM_MspPostInit+0x68>)
 80020b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	60bb      	str	r3, [r7, #8]
 80020c2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80020c4:	2301      	movs	r3, #1
 80020c6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c8:	2302      	movs	r3, #2
 80020ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d0:	2300      	movs	r3, #0
 80020d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020d4:	2301      	movs	r3, #1
 80020d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d8:	f107 030c 	add.w	r3, r7, #12
 80020dc:	4619      	mov	r1, r3
 80020de:	4804      	ldr	r0, [pc, #16]	; (80020f0 <HAL_TIM_MspPostInit+0x6c>)
 80020e0:	f005 f81e 	bl	8007120 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80020e4:	bf00      	nop
 80020e6:	3720      	adds	r7, #32
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	58024400 	.word	0x58024400
 80020f0:	58020000 	.word	0x58020000

080020f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b0b8      	sub	sp, #224	; 0xe0
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020fc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	605a      	str	r2, [r3, #4]
 8002106:	609a      	str	r2, [r3, #8]
 8002108:	60da      	str	r2, [r3, #12]
 800210a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800210c:	f107 0314 	add.w	r3, r7, #20
 8002110:	22b8      	movs	r2, #184	; 0xb8
 8002112:	2100      	movs	r1, #0
 8002114:	4618      	mov	r0, r3
 8002116:	f00f fc85 	bl	8011a24 <memset>
  if(huart->Instance==USART3)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a29      	ldr	r2, [pc, #164]	; (80021c4 <HAL_UART_MspInit+0xd0>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d14a      	bne.n	80021ba <HAL_UART_MspInit+0xc6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002124:	2302      	movs	r3, #2
 8002126:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002128:	2300      	movs	r3, #0
 800212a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800212e:	f107 0314 	add.w	r3, r7, #20
 8002132:	4618      	mov	r0, r3
 8002134:	f006 fa1c 	bl	8008570 <HAL_RCCEx_PeriphCLKConfig>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800213e:	f7ff fd9d 	bl	8001c7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002142:	4b21      	ldr	r3, [pc, #132]	; (80021c8 <HAL_UART_MspInit+0xd4>)
 8002144:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002148:	4a1f      	ldr	r2, [pc, #124]	; (80021c8 <HAL_UART_MspInit+0xd4>)
 800214a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800214e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8002152:	4b1d      	ldr	r3, [pc, #116]	; (80021c8 <HAL_UART_MspInit+0xd4>)
 8002154:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002158:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800215c:	613b      	str	r3, [r7, #16]
 800215e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002160:	4b19      	ldr	r3, [pc, #100]	; (80021c8 <HAL_UART_MspInit+0xd4>)
 8002162:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002166:	4a18      	ldr	r2, [pc, #96]	; (80021c8 <HAL_UART_MspInit+0xd4>)
 8002168:	f043 0308 	orr.w	r3, r3, #8
 800216c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002170:	4b15      	ldr	r3, [pc, #84]	; (80021c8 <HAL_UART_MspInit+0xd4>)
 8002172:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002176:	f003 0308 	and.w	r3, r3, #8
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800217e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002182:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002186:	2302      	movs	r3, #2
 8002188:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218c:	2300      	movs	r3, #0
 800218e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002192:	2300      	movs	r3, #0
 8002194:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002198:	2307      	movs	r3, #7
 800219a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800219e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80021a2:	4619      	mov	r1, r3
 80021a4:	4809      	ldr	r0, [pc, #36]	; (80021cc <HAL_UART_MspInit+0xd8>)
 80021a6:	f004 ffbb 	bl	8007120 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80021aa:	2200      	movs	r2, #0
 80021ac:	2105      	movs	r1, #5
 80021ae:	2027      	movs	r0, #39	; 0x27
 80021b0:	f002 f8a2 	bl	80042f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80021b4:	2027      	movs	r0, #39	; 0x27
 80021b6:	f002 f8b9 	bl	800432c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80021ba:	bf00      	nop
 80021bc:	37e0      	adds	r7, #224	; 0xe0
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40004800 	.word	0x40004800
 80021c8:	58024400 	.word	0x58024400
 80021cc:	58020c00 	.word	0x58020c00

080021d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b090      	sub	sp, #64	; 0x40
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2b0f      	cmp	r3, #15
 80021dc:	d827      	bhi.n	800222e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80021de:	2200      	movs	r2, #0
 80021e0:	6879      	ldr	r1, [r7, #4]
 80021e2:	2036      	movs	r0, #54	; 0x36
 80021e4:	f002 f888 	bl	80042f8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80021e8:	2036      	movs	r0, #54	; 0x36
 80021ea:	f002 f89f 	bl	800432c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80021ee:	4a29      	ldr	r2, [pc, #164]	; (8002294 <HAL_InitTick+0xc4>)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80021f4:	4b28      	ldr	r3, [pc, #160]	; (8002298 <HAL_InitTick+0xc8>)
 80021f6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80021fa:	4a27      	ldr	r2, [pc, #156]	; (8002298 <HAL_InitTick+0xc8>)
 80021fc:	f043 0310 	orr.w	r3, r3, #16
 8002200:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8002204:	4b24      	ldr	r3, [pc, #144]	; (8002298 <HAL_InitTick+0xc8>)
 8002206:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800220a:	f003 0310 	and.w	r3, r3, #16
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002212:	f107 0210 	add.w	r2, r7, #16
 8002216:	f107 0314 	add.w	r3, r7, #20
 800221a:	4611      	mov	r1, r2
 800221c:	4618      	mov	r0, r3
 800221e:	f006 f965 	bl	80084ec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002224:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002228:	2b00      	cmp	r3, #0
 800222a:	d106      	bne.n	800223a <HAL_InitTick+0x6a>
 800222c:	e001      	b.n	8002232 <HAL_InitTick+0x62>
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e02b      	b.n	800228a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002232:	f006 f92f 	bl	8008494 <HAL_RCC_GetPCLK1Freq>
 8002236:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002238:	e004      	b.n	8002244 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800223a:	f006 f92b 	bl	8008494 <HAL_RCC_GetPCLK1Freq>
 800223e:	4603      	mov	r3, r0
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002246:	4a15      	ldr	r2, [pc, #84]	; (800229c <HAL_InitTick+0xcc>)
 8002248:	fba2 2303 	umull	r2, r3, r2, r3
 800224c:	0c9b      	lsrs	r3, r3, #18
 800224e:	3b01      	subs	r3, #1
 8002250:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002252:	4b13      	ldr	r3, [pc, #76]	; (80022a0 <HAL_InitTick+0xd0>)
 8002254:	4a13      	ldr	r2, [pc, #76]	; (80022a4 <HAL_InitTick+0xd4>)
 8002256:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002258:	4b11      	ldr	r3, [pc, #68]	; (80022a0 <HAL_InitTick+0xd0>)
 800225a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800225e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002260:	4a0f      	ldr	r2, [pc, #60]	; (80022a0 <HAL_InitTick+0xd0>)
 8002262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002264:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002266:	4b0e      	ldr	r3, [pc, #56]	; (80022a0 <HAL_InitTick+0xd0>)
 8002268:	2200      	movs	r2, #0
 800226a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800226c:	4b0c      	ldr	r3, [pc, #48]	; (80022a0 <HAL_InitTick+0xd0>)
 800226e:	2200      	movs	r2, #0
 8002270:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002272:	480b      	ldr	r0, [pc, #44]	; (80022a0 <HAL_InitTick+0xd0>)
 8002274:	f009 f9eb 	bl	800b64e <HAL_TIM_Base_Init>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d104      	bne.n	8002288 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800227e:	4808      	ldr	r0, [pc, #32]	; (80022a0 <HAL_InitTick+0xd0>)
 8002280:	f009 fa3c 	bl	800b6fc <HAL_TIM_Base_Start_IT>
 8002284:	4603      	mov	r3, r0
 8002286:	e000      	b.n	800228a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
}
 800228a:	4618      	mov	r0, r3
 800228c:	3740      	adds	r7, #64	; 0x40
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	2400000c 	.word	0x2400000c
 8002298:	58024400 	.word	0x58024400
 800229c:	431bde83 	.word	0x431bde83
 80022a0:	240006f8 	.word	0x240006f8
 80022a4:	40001000 	.word	0x40001000

080022a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022ac:	e7fe      	b.n	80022ac <NMI_Handler+0x4>

080022ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022ae:	b480      	push	{r7}
 80022b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022b2:	e7fe      	b.n	80022b2 <HardFault_Handler+0x4>

080022b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022b8:	e7fe      	b.n	80022b8 <MemManage_Handler+0x4>

080022ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022ba:	b480      	push	{r7}
 80022bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022be:	e7fe      	b.n	80022be <BusFault_Handler+0x4>

080022c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022c4:	e7fe      	b.n	80022c4 <UsageFault_Handler+0x4>

080022c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022c6:	b480      	push	{r7}
 80022c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022ca:	bf00      	nop
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80022d8:	4802      	ldr	r0, [pc, #8]	; (80022e4 <DMA1_Stream0_IRQHandler+0x10>)
 80022da:	f003 fb93 	bl	8005a04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	24000460 	.word	0x24000460

080022e8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80022ec:	4802      	ldr	r0, [pc, #8]	; (80022f8 <ADC_IRQHandler+0x10>)
 80022ee:	f000 fe47 	bl	8002f80 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	240002ec 	.word	0x240002ec

080022fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002300:	4802      	ldr	r0, [pc, #8]	; (800230c <TIM3_IRQHandler+0x10>)
 8002302:	f009 fbe3 	bl	800bacc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	24000524 	.word	0x24000524

08002310 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002314:	4802      	ldr	r0, [pc, #8]	; (8002320 <USART3_IRQHandler+0x10>)
 8002316:	f00a fd49 	bl	800cdac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800231a:	bf00      	nop
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	240005bc 	.word	0x240005bc

08002324 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002328:	4802      	ldr	r0, [pc, #8]	; (8002334 <TIM5_IRQHandler+0x10>)
 800232a:	f009 fbcf 	bl	800bacc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	24000570 	.word	0x24000570

08002338 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800233c:	4802      	ldr	r0, [pc, #8]	; (8002348 <TIM6_DAC_IRQHandler+0x10>)
 800233e:	f009 fbc5 	bl	800bacc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	240006f8 	.word	0x240006f8

0800234c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002350:	4b32      	ldr	r3, [pc, #200]	; (800241c <SystemInit+0xd0>)
 8002352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002356:	4a31      	ldr	r2, [pc, #196]	; (800241c <SystemInit+0xd0>)
 8002358:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800235c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002360:	4b2f      	ldr	r3, [pc, #188]	; (8002420 <SystemInit+0xd4>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 030f 	and.w	r3, r3, #15
 8002368:	2b02      	cmp	r3, #2
 800236a:	d807      	bhi.n	800237c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800236c:	4b2c      	ldr	r3, [pc, #176]	; (8002420 <SystemInit+0xd4>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f023 030f 	bic.w	r3, r3, #15
 8002374:	4a2a      	ldr	r2, [pc, #168]	; (8002420 <SystemInit+0xd4>)
 8002376:	f043 0303 	orr.w	r3, r3, #3
 800237a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800237c:	4b29      	ldr	r3, [pc, #164]	; (8002424 <SystemInit+0xd8>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a28      	ldr	r2, [pc, #160]	; (8002424 <SystemInit+0xd8>)
 8002382:	f043 0301 	orr.w	r3, r3, #1
 8002386:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002388:	4b26      	ldr	r3, [pc, #152]	; (8002424 <SystemInit+0xd8>)
 800238a:	2200      	movs	r2, #0
 800238c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800238e:	4b25      	ldr	r3, [pc, #148]	; (8002424 <SystemInit+0xd8>)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	4924      	ldr	r1, [pc, #144]	; (8002424 <SystemInit+0xd8>)
 8002394:	4b24      	ldr	r3, [pc, #144]	; (8002428 <SystemInit+0xdc>)
 8002396:	4013      	ands	r3, r2
 8002398:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800239a:	4b21      	ldr	r3, [pc, #132]	; (8002420 <SystemInit+0xd4>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 030c 	and.w	r3, r3, #12
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d007      	beq.n	80023b6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80023a6:	4b1e      	ldr	r3, [pc, #120]	; (8002420 <SystemInit+0xd4>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f023 030f 	bic.w	r3, r3, #15
 80023ae:	4a1c      	ldr	r2, [pc, #112]	; (8002420 <SystemInit+0xd4>)
 80023b0:	f043 0303 	orr.w	r3, r3, #3
 80023b4:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80023b6:	4b1b      	ldr	r3, [pc, #108]	; (8002424 <SystemInit+0xd8>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80023bc:	4b19      	ldr	r3, [pc, #100]	; (8002424 <SystemInit+0xd8>)
 80023be:	2200      	movs	r2, #0
 80023c0:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80023c2:	4b18      	ldr	r3, [pc, #96]	; (8002424 <SystemInit+0xd8>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80023c8:	4b16      	ldr	r3, [pc, #88]	; (8002424 <SystemInit+0xd8>)
 80023ca:	4a18      	ldr	r2, [pc, #96]	; (800242c <SystemInit+0xe0>)
 80023cc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80023ce:	4b15      	ldr	r3, [pc, #84]	; (8002424 <SystemInit+0xd8>)
 80023d0:	4a17      	ldr	r2, [pc, #92]	; (8002430 <SystemInit+0xe4>)
 80023d2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80023d4:	4b13      	ldr	r3, [pc, #76]	; (8002424 <SystemInit+0xd8>)
 80023d6:	4a17      	ldr	r2, [pc, #92]	; (8002434 <SystemInit+0xe8>)
 80023d8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80023da:	4b12      	ldr	r3, [pc, #72]	; (8002424 <SystemInit+0xd8>)
 80023dc:	2200      	movs	r2, #0
 80023de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80023e0:	4b10      	ldr	r3, [pc, #64]	; (8002424 <SystemInit+0xd8>)
 80023e2:	4a14      	ldr	r2, [pc, #80]	; (8002434 <SystemInit+0xe8>)
 80023e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80023e6:	4b0f      	ldr	r3, [pc, #60]	; (8002424 <SystemInit+0xd8>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80023ec:	4b0d      	ldr	r3, [pc, #52]	; (8002424 <SystemInit+0xd8>)
 80023ee:	4a11      	ldr	r2, [pc, #68]	; (8002434 <SystemInit+0xe8>)
 80023f0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80023f2:	4b0c      	ldr	r3, [pc, #48]	; (8002424 <SystemInit+0xd8>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80023f8:	4b0a      	ldr	r3, [pc, #40]	; (8002424 <SystemInit+0xd8>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a09      	ldr	r2, [pc, #36]	; (8002424 <SystemInit+0xd8>)
 80023fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002402:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002404:	4b07      	ldr	r3, [pc, #28]	; (8002424 <SystemInit+0xd8>)
 8002406:	2200      	movs	r2, #0
 8002408:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800240a:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <SystemInit+0xec>)
 800240c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002410:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002412:	bf00      	nop
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	e000ed00 	.word	0xe000ed00
 8002420:	52002000 	.word	0x52002000
 8002424:	58024400 	.word	0x58024400
 8002428:	eaf6ed7f 	.word	0xeaf6ed7f
 800242c:	02020200 	.word	0x02020200
 8002430:	01ff0000 	.word	0x01ff0000
 8002434:	01010280 	.word	0x01010280
 8002438:	52004000 	.word	0x52004000

0800243c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800243c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002474 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002440:	f7ff ff84 	bl	800234c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002444:	480c      	ldr	r0, [pc, #48]	; (8002478 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002446:	490d      	ldr	r1, [pc, #52]	; (800247c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002448:	4a0d      	ldr	r2, [pc, #52]	; (8002480 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800244a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800244c:	e002      	b.n	8002454 <LoopCopyDataInit>

0800244e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800244e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002450:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002452:	3304      	adds	r3, #4

08002454 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8002454:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002456:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002458:	d3f9      	bcc.n	800244e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800245a:	4a0a      	ldr	r2, [pc, #40]	; (8002484 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800245c:	4c0a      	ldr	r4, [pc, #40]	; (8002488 <LoopFillZerobss+0x22>)
  movs r3, #0
 800245e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002460:	e001      	b.n	8002466 <LoopFillZerobss>

08002462 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002462:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002464:	3204      	adds	r2, #4

08002466 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002466:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002468:	d3fb      	bcc.n	8002462 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800246a:	f00f faa9 	bl	80119c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800246e:	f7fe f8db 	bl	8000628 <main>
  bx  lr
 8002472:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002474:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8002478:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800247c:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 8002480:	08011dd4 	.word	0x08011dd4
  ldr r2, =_sbss
 8002484:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 8002488:	2400449c 	.word	0x2400449c

0800248c <BDMA1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800248c:	e7fe      	b.n	800248c <BDMA1_IRQHandler>
	...

08002490 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002496:	2003      	movs	r0, #3
 8002498:	f001 ff23 	bl	80042e2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800249c:	f005 fe50 	bl	8008140 <HAL_RCC_GetSysClockFreq>
 80024a0:	4602      	mov	r2, r0
 80024a2:	4b15      	ldr	r3, [pc, #84]	; (80024f8 <HAL_Init+0x68>)
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	0a1b      	lsrs	r3, r3, #8
 80024a8:	f003 030f 	and.w	r3, r3, #15
 80024ac:	4913      	ldr	r1, [pc, #76]	; (80024fc <HAL_Init+0x6c>)
 80024ae:	5ccb      	ldrb	r3, [r1, r3]
 80024b0:	f003 031f 	and.w	r3, r3, #31
 80024b4:	fa22 f303 	lsr.w	r3, r2, r3
 80024b8:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80024ba:	4b0f      	ldr	r3, [pc, #60]	; (80024f8 <HAL_Init+0x68>)
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	4a0e      	ldr	r2, [pc, #56]	; (80024fc <HAL_Init+0x6c>)
 80024c4:	5cd3      	ldrb	r3, [r2, r3]
 80024c6:	f003 031f 	and.w	r3, r3, #31
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	fa22 f303 	lsr.w	r3, r2, r3
 80024d0:	4a0b      	ldr	r2, [pc, #44]	; (8002500 <HAL_Init+0x70>)
 80024d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80024d4:	4a0b      	ldr	r2, [pc, #44]	; (8002504 <HAL_Init+0x74>)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024da:	200f      	movs	r0, #15
 80024dc:	f7ff fe78 	bl	80021d0 <HAL_InitTick>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e002      	b.n	80024f0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80024ea:	f7ff fbcd 	bl	8001c88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	58024400 	.word	0x58024400
 80024fc:	08011c80 	.word	0x08011c80
 8002500:	24000008 	.word	0x24000008
 8002504:	24000004 	.word	0x24000004

08002508 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800250c:	4b06      	ldr	r3, [pc, #24]	; (8002528 <HAL_IncTick+0x20>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	461a      	mov	r2, r3
 8002512:	4b06      	ldr	r3, [pc, #24]	; (800252c <HAL_IncTick+0x24>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4413      	add	r3, r2
 8002518:	4a04      	ldr	r2, [pc, #16]	; (800252c <HAL_IncTick+0x24>)
 800251a:	6013      	str	r3, [r2, #0]
}
 800251c:	bf00      	nop
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	24000010 	.word	0x24000010
 800252c:	24000744 	.word	0x24000744

08002530 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  return uwTick;
 8002534:	4b03      	ldr	r3, [pc, #12]	; (8002544 <HAL_GetTick+0x14>)
 8002536:	681b      	ldr	r3, [r3, #0]
}
 8002538:	4618      	mov	r0, r3
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	24000744 	.word	0x24000744

08002548 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	431a      	orrs	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	609a      	str	r2, [r3, #8]
}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800256e:	b480      	push	{r7}
 8002570:	b083      	sub	sp, #12
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
 8002576:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	431a      	orrs	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	609a      	str	r2, [r3, #8]
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b087      	sub	sp, #28
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
 80025bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	3360      	adds	r3, #96	; 0x60
 80025c2:	461a      	mov	r2, r3
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4413      	add	r3, r2
 80025ca:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	430b      	orrs	r3, r1
 80025de:	431a      	orrs	r2, r3
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80025e4:	bf00      	nop
 80025e6:	371c      	adds	r7, #28
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	f003 031f 	and.w	r3, r3, #31
 800260a:	6879      	ldr	r1, [r7, #4]
 800260c:	fa01 f303 	lsl.w	r3, r1, r3
 8002610:	431a      	orrs	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	611a      	str	r2, [r3, #16]
}
 8002616:	bf00      	nop
 8002618:	3714      	adds	r7, #20
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002622:	b480      	push	{r7}
 8002624:	b087      	sub	sp, #28
 8002626:	af00      	add	r7, sp, #0
 8002628:	60f8      	str	r0, [r7, #12]
 800262a:	60b9      	str	r1, [r7, #8]
 800262c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	3360      	adds	r3, #96	; 0x60
 8002632:	461a      	mov	r2, r3
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	4413      	add	r3, r2
 800263a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	431a      	orrs	r2, r3
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	601a      	str	r2, [r3, #0]
  }
}
 800264c:	bf00      	nop
 800264e:	371c      	adds	r7, #28
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800266c:	2301      	movs	r3, #1
 800266e:	e000      	b.n	8002672 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800267e:	b480      	push	{r7}
 8002680:	b087      	sub	sp, #28
 8002682:	af00      	add	r7, sp, #0
 8002684:	60f8      	str	r0, [r7, #12]
 8002686:	60b9      	str	r1, [r7, #8]
 8002688:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	3330      	adds	r3, #48	; 0x30
 800268e:	461a      	mov	r2, r3
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	0a1b      	lsrs	r3, r3, #8
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	f003 030c 	and.w	r3, r3, #12
 800269a:	4413      	add	r3, r2
 800269c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	f003 031f 	and.w	r3, r3, #31
 80026a8:	211f      	movs	r1, #31
 80026aa:	fa01 f303 	lsl.w	r3, r1, r3
 80026ae:	43db      	mvns	r3, r3
 80026b0:	401a      	ands	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	0e9b      	lsrs	r3, r3, #26
 80026b6:	f003 011f 	and.w	r1, r3, #31
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	f003 031f 	and.w	r3, r3, #31
 80026c0:	fa01 f303 	lsl.w	r3, r1, r3
 80026c4:	431a      	orrs	r2, r3
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80026ca:	bf00      	nop
 80026cc:	371c      	adds	r7, #28
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr

080026d6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80026d6:	b480      	push	{r7}
 80026d8:	b083      	sub	sp, #12
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80026ea:	2301      	movs	r3, #1
 80026ec:	e000      	b.n	80026f0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b087      	sub	sp, #28
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	3314      	adds	r3, #20
 800270c:	461a      	mov	r2, r3
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	0e5b      	lsrs	r3, r3, #25
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	4413      	add	r3, r2
 800271a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	0d1b      	lsrs	r3, r3, #20
 8002724:	f003 031f 	and.w	r3, r3, #31
 8002728:	2107      	movs	r1, #7
 800272a:	fa01 f303 	lsl.w	r3, r1, r3
 800272e:	43db      	mvns	r3, r3
 8002730:	401a      	ands	r2, r3
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	0d1b      	lsrs	r3, r3, #20
 8002736:	f003 031f 	and.w	r3, r3, #31
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	fa01 f303 	lsl.w	r3, r1, r3
 8002740:	431a      	orrs	r2, r3
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002746:	bf00      	nop
 8002748:	371c      	adds	r7, #28
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
	...

08002754 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800276c:	43db      	mvns	r3, r3
 800276e:	401a      	ands	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f003 0318 	and.w	r3, r3, #24
 8002776:	4908      	ldr	r1, [pc, #32]	; (8002798 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002778:	40d9      	lsrs	r1, r3
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	400b      	ands	r3, r1
 800277e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002782:	431a      	orrs	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800278a:	bf00      	nop
 800278c:	3714      	adds	r7, #20
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	000fffff 	.word	0x000fffff

0800279c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f003 031f 	and.w	r3, r3, #31
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689a      	ldr	r2, [r3, #8]
 80027e0:	4b04      	ldr	r3, [pc, #16]	; (80027f4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80027e2:	4013      	ands	r3, r2
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	6093      	str	r3, [r2, #8]
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr
 80027f4:	5fffffc0 	.word	0x5fffffc0

080027f8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002808:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800280c:	d101      	bne.n	8002812 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800280e:	2301      	movs	r3, #1
 8002810:	e000      	b.n	8002814 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	4b05      	ldr	r3, [pc, #20]	; (8002844 <LL_ADC_EnableInternalRegulator+0x24>)
 800282e:	4013      	ands	r3, r2
 8002830:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	6fffffc0 	.word	0x6fffffc0

08002848 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002858:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800285c:	d101      	bne.n	8002862 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800285e:	2301      	movs	r3, #1
 8002860:	e000      	b.n	8002864 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	4b05      	ldr	r3, [pc, #20]	; (8002894 <LL_ADC_Enable+0x24>)
 800287e:	4013      	ands	r3, r2
 8002880:	f043 0201 	orr.w	r2, r3, #1
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	7fffffc0 	.word	0x7fffffc0

08002898 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	4b05      	ldr	r3, [pc, #20]	; (80028bc <LL_ADC_Disable+0x24>)
 80028a6:	4013      	ands	r3, r2
 80028a8:	f043 0202 	orr.w	r2, r3, #2
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	7fffffc0 	.word	0x7fffffc0

080028c0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d101      	bne.n	80028d8 <LL_ADC_IsEnabled+0x18>
 80028d4:	2301      	movs	r3, #1
 80028d6:	e000      	b.n	80028da <LL_ADC_IsEnabled+0x1a>
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80028e6:	b480      	push	{r7}
 80028e8:	b083      	sub	sp, #12
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d101      	bne.n	80028fe <LL_ADC_IsDisableOngoing+0x18>
 80028fa:	2301      	movs	r3, #1
 80028fc:	e000      	b.n	8002900 <LL_ADC_IsDisableOngoing+0x1a>
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	4b05      	ldr	r3, [pc, #20]	; (8002930 <LL_ADC_REG_StartConversion+0x24>)
 800291a:	4013      	ands	r3, r2
 800291c:	f043 0204 	orr.w	r2, r3, #4
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	7fffffc0 	.word	0x7fffffc0

08002934 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	4b05      	ldr	r3, [pc, #20]	; (8002958 <LL_ADC_REG_StopConversion+0x24>)
 8002942:	4013      	ands	r3, r2
 8002944:	f043 0210 	orr.w	r2, r3, #16
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	7fffffc0 	.word	0x7fffffc0

0800295c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	2b04      	cmp	r3, #4
 800296e:	d101      	bne.n	8002974 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002970:	2301      	movs	r3, #1
 8002972:	e000      	b.n	8002976 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
	...

08002984 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	4b05      	ldr	r3, [pc, #20]	; (80029a8 <LL_ADC_INJ_StopConversion+0x24>)
 8002992:	4013      	ands	r3, r2
 8002994:	f043 0220 	orr.w	r2, r3, #32
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	7fffffc0 	.word	0x7fffffc0

080029ac <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f003 0308 	and.w	r3, r3, #8
 80029bc:	2b08      	cmp	r3, #8
 80029be:	d101      	bne.n	80029c4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80029c0:	2301      	movs	r3, #1
 80029c2:	e000      	b.n	80029c6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
	...

080029d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029d4:	b590      	push	{r4, r7, lr}
 80029d6:	b089      	sub	sp, #36	; 0x24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029dc:	2300      	movs	r3, #0
 80029de:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80029e0:	2300      	movs	r3, #0
 80029e2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e138      	b.n	8002c60 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d109      	bne.n	8002a10 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f7ff f961 	bl	8001cc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff feef 	bl	80027f8 <LL_ADC_IsDeepPowerDownEnabled>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d004      	beq.n	8002a2a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff fed5 	bl	80027d4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff ff0a 	bl	8002848 <LL_ADC_IsInternalRegulatorEnabled>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d114      	bne.n	8002a64 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7ff feee 	bl	8002820 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a44:	4b88      	ldr	r3, [pc, #544]	; (8002c68 <HAL_ADC_Init+0x294>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	099b      	lsrs	r3, r3, #6
 8002a4a:	4a88      	ldr	r2, [pc, #544]	; (8002c6c <HAL_ADC_Init+0x298>)
 8002a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a50:	099b      	lsrs	r3, r3, #6
 8002a52:	3301      	adds	r3, #1
 8002a54:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002a56:	e002      	b.n	8002a5e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1f9      	bne.n	8002a58 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff feed 	bl	8002848 <LL_ADC_IsInternalRegulatorEnabled>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10d      	bne.n	8002a90 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a78:	f043 0210 	orr.w	r2, r3, #16
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a84:	f043 0201 	orr.w	r2, r3, #1
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff ff61 	bl	800295c <LL_ADC_REG_IsConversionOngoing>
 8002a9a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa0:	f003 0310 	and.w	r3, r3, #16
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f040 80d2 	bne.w	8002c4e <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f040 80ce 	bne.w	8002c4e <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002aba:	f043 0202 	orr.w	r2, r3, #2
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff fefa 	bl	80028c0 <LL_ADC_IsEnabled>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d110      	bne.n	8002af4 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ad2:	4867      	ldr	r0, [pc, #412]	; (8002c70 <HAL_ADC_Init+0x29c>)
 8002ad4:	f7ff fef4 	bl	80028c0 <LL_ADC_IsEnabled>
 8002ad8:	4604      	mov	r4, r0
 8002ada:	4866      	ldr	r0, [pc, #408]	; (8002c74 <HAL_ADC_Init+0x2a0>)
 8002adc:	f7ff fef0 	bl	80028c0 <LL_ADC_IsEnabled>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	4323      	orrs	r3, r4
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d105      	bne.n	8002af4 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	4619      	mov	r1, r3
 8002aee:	4862      	ldr	r0, [pc, #392]	; (8002c78 <HAL_ADC_Init+0x2a4>)
 8002af0:	f7ff fd2a 	bl	8002548 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	7d5b      	ldrb	r3, [r3, #21]
 8002af8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002afe:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8002b04:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	7f1b      	ldrb	r3, [r3, #28]
 8002b0a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	7f1b      	ldrb	r3, [r3, #28]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d106      	bne.n	8002b26 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	045b      	lsls	r3, r3, #17
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d009      	beq.n	8002b42 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68da      	ldr	r2, [r3, #12]
 8002b48:	4b4c      	ldr	r3, [pc, #304]	; (8002c7c <HAL_ADC_Init+0x2a8>)
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	6812      	ldr	r2, [r2, #0]
 8002b50:	69b9      	ldr	r1, [r7, #24]
 8002b52:	430b      	orrs	r3, r1
 8002b54:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff fefe 	bl	800295c <LL_ADC_REG_IsConversionOngoing>
 8002b60:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff ff20 	bl	80029ac <LL_ADC_INJ_IsConversionOngoing>
 8002b6c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d14a      	bne.n	8002c0a <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d147      	bne.n	8002c0a <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	7d1b      	ldrb	r3, [r3, #20]
 8002b7e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002b84:	4313      	orrs	r3, r2
 8002b86:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68da      	ldr	r2, [r3, #12]
 8002b8e:	4b3c      	ldr	r3, [pc, #240]	; (8002c80 <HAL_ADC_Init+0x2ac>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6812      	ldr	r2, [r2, #0]
 8002b96:	69b9      	ldr	r1, [r7, #24]
 8002b98:	430b      	orrs	r3, r1
 8002b9a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d11b      	bne.n	8002bde <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002baa:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	691a      	ldr	r2, [r3, #16]
 8002bb2:	4b34      	ldr	r3, [pc, #208]	; (8002c84 <HAL_ADC_Init+0x2b0>)
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002bba:	3a01      	subs	r2, #1
 8002bbc:	0411      	lsls	r1, r2, #16
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002bc2:	4311      	orrs	r1, r2
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002bc8:	4311      	orrs	r1, r2
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	431a      	orrs	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f042 0201 	orr.w	r2, r2, #1
 8002bda:	611a      	str	r2, [r3, #16]
 8002bdc:	e007      	b.n	8002bee <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	691a      	ldr	r2, [r3, #16]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f022 0201 	bic.w	r2, r2, #1
 8002bec:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	430a      	orrs	r2, r1
 8002c02:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f001 f867 	bl	8003cd8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d10c      	bne.n	8002c2c <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c18:	f023 010f 	bic.w	r1, r3, #15
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	1e5a      	subs	r2, r3, #1
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	430a      	orrs	r2, r1
 8002c28:	631a      	str	r2, [r3, #48]	; 0x30
 8002c2a:	e007      	b.n	8002c3c <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 020f 	bic.w	r2, r2, #15
 8002c3a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c40:	f023 0303 	bic.w	r3, r3, #3
 8002c44:	f043 0201 	orr.w	r2, r3, #1
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	655a      	str	r2, [r3, #84]	; 0x54
 8002c4c:	e007      	b.n	8002c5e <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c52:	f043 0210 	orr.w	r2, r3, #16
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c5e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3724      	adds	r7, #36	; 0x24
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd90      	pop	{r4, r7, pc}
 8002c68:	24000004 	.word	0x24000004
 8002c6c:	053e2d63 	.word	0x053e2d63
 8002c70:	40022000 	.word	0x40022000
 8002c74:	40022100 	.word	0x40022100
 8002c78:	40022300 	.word	0x40022300
 8002c7c:	fff0c003 	.word	0xfff0c003
 8002c80:	ffffbffc 	.word	0xffffbffc
 8002c84:	fc00f81e 	.word	0xfc00f81e

08002c88 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c90:	4892      	ldr	r0, [pc, #584]	; (8002edc <HAL_ADC_Start_IT+0x254>)
 8002c92:	f7ff fd83 	bl	800279c <LL_ADC_GetMultimode>
 8002c96:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff fe5d 	bl	800295c <LL_ADC_REG_IsConversionOngoing>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f040 810f 	bne.w	8002ec8 <HAL_ADC_Start_IT+0x240>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d101      	bne.n	8002cb8 <HAL_ADC_Start_IT+0x30>
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	e10c      	b.n	8002ed2 <HAL_ADC_Start_IT+0x24a>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 ff2d 	bl	8003b20 <ADC_Enable>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002cca:	7dfb      	ldrb	r3, [r7, #23]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f040 80f6 	bne.w	8002ebe <HAL_ADC_Start_IT+0x236>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002cd6:	4b82      	ldr	r3, [pc, #520]	; (8002ee0 <HAL_ADC_Start_IT+0x258>)
 8002cd8:	4013      	ands	r3, r2
 8002cda:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a7f      	ldr	r2, [pc, #508]	; (8002ee4 <HAL_ADC_Start_IT+0x25c>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d002      	beq.n	8002cf2 <HAL_ADC_Start_IT+0x6a>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	e000      	b.n	8002cf4 <HAL_ADC_Start_IT+0x6c>
 8002cf2:	4b7d      	ldr	r3, [pc, #500]	; (8002ee8 <HAL_ADC_Start_IT+0x260>)
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	6812      	ldr	r2, [r2, #0]
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d002      	beq.n	8002d02 <HAL_ADC_Start_IT+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d105      	bne.n	8002d0e <HAL_ADC_Start_IT+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d06:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d006      	beq.n	8002d28 <HAL_ADC_Start_IT+0xa0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d1e:	f023 0206 	bic.w	r2, r3, #6
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	659a      	str	r2, [r3, #88]	; 0x58
 8002d26:	e002      	b.n	8002d2e <HAL_ADC_Start_IT+0xa6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	221c      	movs	r2, #28
 8002d34:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 021c 	bic.w	r2, r2, #28
 8002d4c:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	2b08      	cmp	r3, #8
 8002d54:	d108      	bne.n	8002d68 <HAL_ADC_Start_IT+0xe0>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f042 0208 	orr.w	r2, r2, #8
 8002d64:	605a      	str	r2, [r3, #4]
          break;
 8002d66:	e008      	b.n	8002d7a <HAL_ADC_Start_IT+0xf2>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f042 0204 	orr.w	r2, r2, #4
 8002d76:	605a      	str	r2, [r3, #4]
          break;
 8002d78:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d107      	bne.n	8002d92 <HAL_ADC_Start_IT+0x10a>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	685a      	ldr	r2, [r3, #4]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f042 0210 	orr.w	r2, r2, #16
 8002d90:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a53      	ldr	r2, [pc, #332]	; (8002ee4 <HAL_ADC_Start_IT+0x25c>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d002      	beq.n	8002da2 <HAL_ADC_Start_IT+0x11a>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	e000      	b.n	8002da4 <HAL_ADC_Start_IT+0x11c>
 8002da2:	4b51      	ldr	r3, [pc, #324]	; (8002ee8 <HAL_ADC_Start_IT+0x260>)
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6812      	ldr	r2, [r2, #0]
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d008      	beq.n	8002dbe <HAL_ADC_Start_IT+0x136>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d005      	beq.n	8002dbe <HAL_ADC_Start_IT+0x136>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	2b05      	cmp	r3, #5
 8002db6:	d002      	beq.n	8002dbe <HAL_ADC_Start_IT+0x136>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	2b09      	cmp	r3, #9
 8002dbc:	d13b      	bne.n	8002e36 <HAL_ADC_Start_IT+0x1ae>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d02d      	beq.n	8002e28 <HAL_ADC_Start_IT+0x1a0>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002dd4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	2b08      	cmp	r3, #8
 8002de2:	d110      	bne.n	8002e06 <HAL_ADC_Start_IT+0x17e>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 0220 	bic.w	r2, r2, #32
 8002df2:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e02:	605a      	str	r2, [r3, #4]
              break;
 8002e04:	e011      	b.n	8002e2a <HAL_ADC_Start_IT+0x1a2>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e14:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	685a      	ldr	r2, [r3, #4]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f042 0220 	orr.w	r2, r2, #32
 8002e24:	605a      	str	r2, [r3, #4]
              break;
 8002e26:	e000      	b.n	8002e2a <HAL_ADC_Start_IT+0x1a2>
          }
        }
 8002e28:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff fd6c 	bl	800290c <LL_ADC_REG_StartConversion>
 8002e34:	e04c      	b.n	8002ed0 <HAL_ADC_Start_IT+0x248>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e3a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a27      	ldr	r2, [pc, #156]	; (8002ee4 <HAL_ADC_Start_IT+0x25c>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d002      	beq.n	8002e52 <HAL_ADC_Start_IT+0x1ca>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	e000      	b.n	8002e54 <HAL_ADC_Start_IT+0x1cc>
 8002e52:	4b25      	ldr	r3, [pc, #148]	; (8002ee8 <HAL_ADC_Start_IT+0x260>)
 8002e54:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d035      	beq.n	8002ece <HAL_ADC_Start_IT+0x246>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e66:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e6a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	2b08      	cmp	r3, #8
 8002e78:	d110      	bne.n	8002e9c <HAL_ADC_Start_IT+0x214>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 0220 	bic.w	r2, r2, #32
 8002e88:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	685a      	ldr	r2, [r3, #4]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e98:	605a      	str	r2, [r3, #4]
              break;
 8002e9a:	e019      	b.n	8002ed0 <HAL_ADC_Start_IT+0x248>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	685a      	ldr	r2, [r3, #4]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eaa:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	685a      	ldr	r2, [r3, #4]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 0220 	orr.w	r2, r2, #32
 8002eba:	605a      	str	r2, [r3, #4]
              break;
 8002ebc:	e008      	b.n	8002ed0 <HAL_ADC_Start_IT+0x248>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002ec6:	e003      	b.n	8002ed0 <HAL_ADC_Start_IT+0x248>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002ec8:	2302      	movs	r3, #2
 8002eca:	75fb      	strb	r3, [r7, #23]
 8002ecc:	e000      	b.n	8002ed0 <HAL_ADC_Start_IT+0x248>
        }
 8002ece:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8002ed0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3718      	adds	r7, #24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	40022300 	.word	0x40022300
 8002ee0:	fffff0fe 	.word	0xfffff0fe
 8002ee4:	40022100 	.word	0x40022100
 8002ee8:	40022000 	.word	0x40022000

08002eec <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d101      	bne.n	8002f02 <HAL_ADC_Stop_IT+0x16>
 8002efe:	2302      	movs	r3, #2
 8002f00:	e029      	b.n	8002f56 <HAL_ADC_Stop_IT+0x6a>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002f0a:	2103      	movs	r1, #3
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 fd4b 	bl	80039a8 <ADC_ConversionStop>
 8002f12:	4603      	mov	r3, r0
 8002f14:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002f16:	7bfb      	ldrb	r3, [r7, #15]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d117      	bne.n	8002f4c <HAL_ADC_Stop_IT+0x60>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 021c 	bic.w	r2, r2, #28
 8002f2a:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 fe73 	bl	8003c18 <ADC_Disable>
 8002f32:	4603      	mov	r3, r0
 8002f34:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002f36:	7bfb      	ldrb	r3, [r7, #15]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d107      	bne.n	8002f4c <HAL_ADC_Stop_IT+0x60>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f40:	4b07      	ldr	r3, [pc, #28]	; (8002f60 <HAL_ADC_Stop_IT+0x74>)
 8002f42:	4013      	ands	r3, r2
 8002f44:	f043 0201 	orr.w	r2, r3, #1
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	ffffeefe 	.word	0xffffeefe

08002f64 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
	...

08002f80 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b08a      	sub	sp, #40	; 0x28
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002f88:	2300      	movs	r3, #0
 8002f8a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f9c:	4882      	ldr	r0, [pc, #520]	; (80031a8 <HAL_ADC_IRQHandler+0x228>)
 8002f9e:	f7ff fbfd 	bl	800279c <LL_ADC_GetMultimode>
 8002fa2:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d017      	beq.n	8002fde <HAL_ADC_IRQHandler+0x5e>
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d012      	beq.n	8002fde <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fbc:	f003 0310 	and.w	r3, r3, #16
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d105      	bne.n	8002fd0 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc8:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f001 f833 	bl	800403c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2202      	movs	r2, #2
 8002fdc:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	f003 0304 	and.w	r3, r3, #4
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d004      	beq.n	8002ff2 <HAL_ADC_IRQHandler+0x72>
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	f003 0304 	and.w	r3, r3, #4
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d10a      	bne.n	8003008 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f000 8083 	beq.w	8003104 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	f003 0308 	and.w	r3, r3, #8
 8003004:	2b00      	cmp	r3, #0
 8003006:	d07d      	beq.n	8003104 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800300c:	f003 0310 	and.w	r3, r3, #16
 8003010:	2b00      	cmp	r3, #0
 8003012:	d105      	bne.n	8003020 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003018:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4618      	mov	r0, r3
 8003026:	f7ff fb17 	bl	8002658 <LL_ADC_REG_IsTriggerSourceSWStart>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d062      	beq.n	80030f6 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a5d      	ldr	r2, [pc, #372]	; (80031ac <HAL_ADC_IRQHandler+0x22c>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d002      	beq.n	8003040 <HAL_ADC_IRQHandler+0xc0>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	e000      	b.n	8003042 <HAL_ADC_IRQHandler+0xc2>
 8003040:	4b5b      	ldr	r3, [pc, #364]	; (80031b0 <HAL_ADC_IRQHandler+0x230>)
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	6812      	ldr	r2, [r2, #0]
 8003046:	4293      	cmp	r3, r2
 8003048:	d008      	beq.n	800305c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d005      	beq.n	800305c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	2b05      	cmp	r3, #5
 8003054:	d002      	beq.n	800305c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	2b09      	cmp	r3, #9
 800305a:	d104      	bne.n	8003066 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	623b      	str	r3, [r7, #32]
 8003064:	e00c      	b.n	8003080 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a50      	ldr	r2, [pc, #320]	; (80031ac <HAL_ADC_IRQHandler+0x22c>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d002      	beq.n	8003076 <HAL_ADC_IRQHandler+0xf6>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	e000      	b.n	8003078 <HAL_ADC_IRQHandler+0xf8>
 8003076:	4b4e      	ldr	r3, [pc, #312]	; (80031b0 <HAL_ADC_IRQHandler+0x230>)
 8003078:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003080:	6a3b      	ldr	r3, [r7, #32]
 8003082:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d135      	bne.n	80030f6 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0308 	and.w	r3, r3, #8
 8003094:	2b08      	cmp	r3, #8
 8003096:	d12e      	bne.n	80030f6 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff fc5d 	bl	800295c <LL_ADC_REG_IsConversionOngoing>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d11a      	bne.n	80030de <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 020c 	bic.w	r2, r2, #12
 80030b6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d112      	bne.n	80030f6 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d4:	f043 0201 	orr.w	r2, r3, #1
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	655a      	str	r2, [r3, #84]	; 0x54
 80030dc:	e00b      	b.n	80030f6 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e2:	f043 0210 	orr.w	r2, r3, #16
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ee:	f043 0201 	orr.w	r2, r3, #1
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7fe fd4c 	bl	8001b94 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	220c      	movs	r2, #12
 8003102:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	f003 0320 	and.w	r3, r3, #32
 800310a:	2b00      	cmp	r3, #0
 800310c:	d004      	beq.n	8003118 <HAL_ADC_IRQHandler+0x198>
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	f003 0320 	and.w	r3, r3, #32
 8003114:	2b00      	cmp	r3, #0
 8003116:	d10b      	bne.n	8003130 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 809f 	beq.w	8003262 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800312a:	2b00      	cmp	r3, #0
 800312c:	f000 8099 	beq.w	8003262 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003134:	f003 0310 	and.w	r3, r3, #16
 8003138:	2b00      	cmp	r3, #0
 800313a:	d105      	bne.n	8003148 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003140:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff fac2 	bl	80026d6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003152:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff fa7d 	bl	8002658 <LL_ADC_REG_IsTriggerSourceSWStart>
 800315e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a11      	ldr	r2, [pc, #68]	; (80031ac <HAL_ADC_IRQHandler+0x22c>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d002      	beq.n	8003170 <HAL_ADC_IRQHandler+0x1f0>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	e000      	b.n	8003172 <HAL_ADC_IRQHandler+0x1f2>
 8003170:	4b0f      	ldr	r3, [pc, #60]	; (80031b0 <HAL_ADC_IRQHandler+0x230>)
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	6812      	ldr	r2, [r2, #0]
 8003176:	4293      	cmp	r3, r2
 8003178:	d008      	beq.n	800318c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d005      	beq.n	800318c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	2b06      	cmp	r3, #6
 8003184:	d002      	beq.n	800318c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	2b07      	cmp	r3, #7
 800318a:	d104      	bne.n	8003196 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	623b      	str	r3, [r7, #32]
 8003194:	e013      	b.n	80031be <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a04      	ldr	r2, [pc, #16]	; (80031ac <HAL_ADC_IRQHandler+0x22c>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d009      	beq.n	80031b4 <HAL_ADC_IRQHandler+0x234>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	e007      	b.n	80031b6 <HAL_ADC_IRQHandler+0x236>
 80031a6:	bf00      	nop
 80031a8:	40022300 	.word	0x40022300
 80031ac:	40022100 	.word	0x40022100
 80031b0:	40022000 	.word	0x40022000
 80031b4:	4b7d      	ldr	r3, [pc, #500]	; (80033ac <HAL_ADC_IRQHandler+0x42c>)
 80031b6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d047      	beq.n	8003254 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80031c4:	6a3b      	ldr	r3, [r7, #32]
 80031c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d007      	beq.n	80031de <HAL_ADC_IRQHandler+0x25e>
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d03f      	beq.n	8003254 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80031d4:	6a3b      	ldr	r3, [r7, #32]
 80031d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d13a      	bne.n	8003254 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e8:	2b40      	cmp	r3, #64	; 0x40
 80031ea:	d133      	bne.n	8003254 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80031ec:	6a3b      	ldr	r3, [r7, #32]
 80031ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d12e      	bne.n	8003254 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff fbd6 	bl	80029ac <LL_ADC_INJ_IsConversionOngoing>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d11a      	bne.n	800323c <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003214:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800321a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800322a:	2b00      	cmp	r3, #0
 800322c:	d112      	bne.n	8003254 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003232:	f043 0201 	orr.w	r2, r3, #1
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	655a      	str	r2, [r3, #84]	; 0x54
 800323a:	e00b      	b.n	8003254 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003240:	f043 0210 	orr.w	r2, r3, #16
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800324c:	f043 0201 	orr.w	r2, r3, #1
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 fec9 	bl	8003fec <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2260      	movs	r2, #96	; 0x60
 8003260:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003268:	2b00      	cmp	r3, #0
 800326a:	d011      	beq.n	8003290 <HAL_ADC_IRQHandler+0x310>
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00c      	beq.n	8003290 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 f896 	bl	80033b4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2280      	movs	r2, #128	; 0x80
 800328e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003296:	2b00      	cmp	r3, #0
 8003298:	d012      	beq.n	80032c0 <HAL_ADC_IRQHandler+0x340>
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00d      	beq.n	80032c0 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 feaf 	bl	8004014 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032be:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d012      	beq.n	80032f0 <HAL_ADC_IRQHandler+0x370>
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00d      	beq.n	80032f0 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 fea1 	bl	8004028 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032ee:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	f003 0310 	and.w	r3, r3, #16
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d036      	beq.n	8003368 <HAL_ADC_IRQHandler+0x3e8>
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	f003 0310 	and.w	r3, r3, #16
 8003300:	2b00      	cmp	r3, #0
 8003302:	d031      	beq.n	8003368 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003308:	2b00      	cmp	r3, #0
 800330a:	d102      	bne.n	8003312 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 800330c:	2301      	movs	r3, #1
 800330e:	627b      	str	r3, [r7, #36]	; 0x24
 8003310:	e014      	b.n	800333c <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d008      	beq.n	800332a <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003318:	4825      	ldr	r0, [pc, #148]	; (80033b0 <HAL_ADC_IRQHandler+0x430>)
 800331a:	f7ff fa4d 	bl	80027b8 <LL_ADC_GetMultiDMATransfer>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00b      	beq.n	800333c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003324:	2301      	movs	r3, #1
 8003326:	627b      	str	r3, [r7, #36]	; 0x24
 8003328:	e008      	b.n	800333c <HAL_ADC_IRQHandler+0x3bc>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	f003 0303 	and.w	r3, r3, #3
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003338:	2301      	movs	r3, #1
 800333a:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800333c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333e:	2b01      	cmp	r3, #1
 8003340:	d10e      	bne.n	8003360 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003346:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003352:	f043 0202 	orr.w	r2, r3, #2
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 f834 	bl	80033c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2210      	movs	r2, #16
 8003366:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800336e:	2b00      	cmp	r3, #0
 8003370:	d018      	beq.n	80033a4 <HAL_ADC_IRQHandler+0x424>
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003378:	2b00      	cmp	r3, #0
 800337a:	d013      	beq.n	80033a4 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003380:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338c:	f043 0208 	orr.w	r2, r3, #8
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800339c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 fe2e 	bl	8004000 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80033a4:	bf00      	nop
 80033a6:	3728      	adds	r7, #40	; 0x28
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	40022000 	.word	0x40022000
 80033b0:	40022300 	.word	0x40022300

080033b4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80033dc:	b590      	push	{r4, r7, lr}
 80033de:	b0a1      	sub	sp, #132	; 0x84
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033e6:	2300      	movs	r3, #0
 80033e8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80033ec:	2300      	movs	r3, #0
 80033ee:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	4a9a      	ldr	r2, [pc, #616]	; (8003660 <HAL_ADC_ConfigChannel+0x284>)
 80033f6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d101      	bne.n	8003406 <HAL_ADC_ConfigChannel+0x2a>
 8003402:	2302      	movs	r3, #2
 8003404:	e2bc      	b.n	8003980 <HAL_ADC_ConfigChannel+0x5a4>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4618      	mov	r0, r3
 8003414:	f7ff faa2 	bl	800295c <LL_ADC_REG_IsConversionOngoing>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	f040 82a1 	bne.w	8003962 <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003428:	2b00      	cmp	r3, #0
 800342a:	d108      	bne.n	800343e <HAL_ADC_ConfigChannel+0x62>
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	0e9b      	lsrs	r3, r3, #26
 8003432:	f003 031f 	and.w	r3, r3, #31
 8003436:	2201      	movs	r2, #1
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	e016      	b.n	800346c <HAL_ADC_ConfigChannel+0x90>
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003444:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003446:	fa93 f3a3 	rbit	r3, r3
 800344a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800344c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800344e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003450:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003456:	2320      	movs	r3, #32
 8003458:	e003      	b.n	8003462 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800345a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800345c:	fab3 f383 	clz	r3, r3
 8003460:	b2db      	uxtb	r3, r3
 8003462:	f003 031f 	and.w	r3, r3, #31
 8003466:	2201      	movs	r2, #1
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	6812      	ldr	r2, [r2, #0]
 8003470:	69d1      	ldr	r1, [r2, #28]
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	6812      	ldr	r2, [r2, #0]
 8003476:	430b      	orrs	r3, r1
 8003478:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6818      	ldr	r0, [r3, #0]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	6859      	ldr	r1, [r3, #4]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	461a      	mov	r2, r3
 8003488:	f7ff f8f9 	bl	800267e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff fa63 	bl	800295c <LL_ADC_REG_IsConversionOngoing>
 8003496:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4618      	mov	r0, r3
 800349e:	f7ff fa85 	bl	80029ac <LL_ADC_INJ_IsConversionOngoing>
 80034a2:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80034a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f040 80a0 	bne.w	80035ec <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80034ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f040 809c 	bne.w	80035ec <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6818      	ldr	r0, [r3, #0]
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	6819      	ldr	r1, [r3, #0]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	461a      	mov	r2, r3
 80034c2:	f7ff f91b 	bl	80026fc <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	f003 0310 	and.w	r3, r3, #16
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d10b      	bne.n	80034ec <HAL_ADC_ConfigChannel+0x110>
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	695a      	ldr	r2, [r3, #20]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	089b      	lsrs	r3, r3, #2
 80034e0:	f003 0307 	and.w	r3, r3, #7
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ea:	e00a      	b.n	8003502 <HAL_ADC_ConfigChannel+0x126>
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	695a      	ldr	r2, [r3, #20]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	089b      	lsrs	r3, r3, #2
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	2b04      	cmp	r3, #4
 800350a:	d027      	beq.n	800355c <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6818      	ldr	r0, [r3, #0]
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	6919      	ldr	r1, [r3, #16]
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800351a:	f7ff f849 	bl	80025b0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6818      	ldr	r0, [r3, #0]
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	6919      	ldr	r1, [r3, #16]
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	7e5b      	ldrb	r3, [r3, #25]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d102      	bne.n	8003534 <HAL_ADC_ConfigChannel+0x158>
 800352e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003532:	e000      	b.n	8003536 <HAL_ADC_ConfigChannel+0x15a>
 8003534:	2300      	movs	r3, #0
 8003536:	461a      	mov	r2, r3
 8003538:	f7ff f873 	bl	8002622 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6818      	ldr	r0, [r3, #0]
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	6919      	ldr	r1, [r3, #16]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	7e1b      	ldrb	r3, [r3, #24]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d102      	bne.n	8003552 <HAL_ADC_ConfigChannel+0x176>
 800354c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003550:	e000      	b.n	8003554 <HAL_ADC_ConfigChannel+0x178>
 8003552:	2300      	movs	r3, #0
 8003554:	461a      	mov	r2, r3
 8003556:	f7ff f84b 	bl	80025f0 <LL_ADC_SetDataRightShift>
 800355a:	e047      	b.n	80035ec <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003562:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	069b      	lsls	r3, r3, #26
 800356c:	429a      	cmp	r2, r3
 800356e:	d107      	bne.n	8003580 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800357e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003586:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	069b      	lsls	r3, r3, #26
 8003590:	429a      	cmp	r2, r3
 8003592:	d107      	bne.n	80035a4 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80035a2:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	069b      	lsls	r3, r3, #26
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d107      	bne.n	80035c8 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80035c6:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	069b      	lsls	r3, r3, #26
 80035d8:	429a      	cmp	r2, r3
 80035da:	d107      	bne.n	80035ec <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80035ea:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff f965 	bl	80028c0 <LL_ADC_IsEnabled>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f040 81bb 	bne.w	8003974 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6818      	ldr	r0, [r3, #0]
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	6819      	ldr	r1, [r3, #0]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	461a      	mov	r2, r3
 800360c:	f7ff f8a2 	bl	8002754 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	4a12      	ldr	r2, [pc, #72]	; (8003660 <HAL_ADC_ConfigChannel+0x284>)
 8003616:	4293      	cmp	r3, r2
 8003618:	f040 8130 	bne.w	800387c <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003628:	2b00      	cmp	r3, #0
 800362a:	d10b      	bne.n	8003644 <HAL_ADC_ConfigChannel+0x268>
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	0e9b      	lsrs	r3, r3, #26
 8003632:	3301      	adds	r3, #1
 8003634:	f003 031f 	and.w	r3, r3, #31
 8003638:	2b09      	cmp	r3, #9
 800363a:	bf94      	ite	ls
 800363c:	2301      	movls	r3, #1
 800363e:	2300      	movhi	r3, #0
 8003640:	b2db      	uxtb	r3, r3
 8003642:	e01b      	b.n	800367c <HAL_ADC_ConfigChannel+0x2a0>
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800364a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800364c:	fa93 f3a3 	rbit	r3, r3
 8003650:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003654:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003656:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003658:	2b00      	cmp	r3, #0
 800365a:	d103      	bne.n	8003664 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 800365c:	2320      	movs	r3, #32
 800365e:	e005      	b.n	800366c <HAL_ADC_ConfigChannel+0x290>
 8003660:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 8003664:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003666:	fab3 f383 	clz	r3, r3
 800366a:	b2db      	uxtb	r3, r3
 800366c:	3301      	adds	r3, #1
 800366e:	f003 031f 	and.w	r3, r3, #31
 8003672:	2b09      	cmp	r3, #9
 8003674:	bf94      	ite	ls
 8003676:	2301      	movls	r3, #1
 8003678:	2300      	movhi	r3, #0
 800367a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800367c:	2b00      	cmp	r3, #0
 800367e:	d079      	beq.n	8003774 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003688:	2b00      	cmp	r3, #0
 800368a:	d107      	bne.n	800369c <HAL_ADC_ConfigChannel+0x2c0>
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	0e9b      	lsrs	r3, r3, #26
 8003692:	3301      	adds	r3, #1
 8003694:	069b      	lsls	r3, r3, #26
 8003696:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800369a:	e015      	b.n	80036c8 <HAL_ADC_ConfigChannel+0x2ec>
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036a4:	fa93 f3a3 	rbit	r3, r3
 80036a8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80036aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036ac:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80036ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 80036b4:	2320      	movs	r3, #32
 80036b6:	e003      	b.n	80036c0 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 80036b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036ba:	fab3 f383 	clz	r3, r3
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	3301      	adds	r3, #1
 80036c2:	069b      	lsls	r3, r3, #26
 80036c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d109      	bne.n	80036e8 <HAL_ADC_ConfigChannel+0x30c>
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	0e9b      	lsrs	r3, r3, #26
 80036da:	3301      	adds	r3, #1
 80036dc:	f003 031f 	and.w	r3, r3, #31
 80036e0:	2101      	movs	r1, #1
 80036e2:	fa01 f303 	lsl.w	r3, r1, r3
 80036e6:	e017      	b.n	8003718 <HAL_ADC_ConfigChannel+0x33c>
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036f0:	fa93 f3a3 	rbit	r3, r3
 80036f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80036f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036f8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80036fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d101      	bne.n	8003704 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8003700:	2320      	movs	r3, #32
 8003702:	e003      	b.n	800370c <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 8003704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003706:	fab3 f383 	clz	r3, r3
 800370a:	b2db      	uxtb	r3, r3
 800370c:	3301      	adds	r3, #1
 800370e:	f003 031f 	and.w	r3, r3, #31
 8003712:	2101      	movs	r1, #1
 8003714:	fa01 f303 	lsl.w	r3, r1, r3
 8003718:	ea42 0103 	orr.w	r1, r2, r3
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10a      	bne.n	800373e <HAL_ADC_ConfigChannel+0x362>
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	0e9b      	lsrs	r3, r3, #26
 800372e:	3301      	adds	r3, #1
 8003730:	f003 021f 	and.w	r2, r3, #31
 8003734:	4613      	mov	r3, r2
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	4413      	add	r3, r2
 800373a:	051b      	lsls	r3, r3, #20
 800373c:	e018      	b.n	8003770 <HAL_ADC_ConfigChannel+0x394>
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003746:	fa93 f3a3 	rbit	r3, r3
 800374a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800374c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8003756:	2320      	movs	r3, #32
 8003758:	e003      	b.n	8003762 <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 800375a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800375c:	fab3 f383 	clz	r3, r3
 8003760:	b2db      	uxtb	r3, r3
 8003762:	3301      	adds	r3, #1
 8003764:	f003 021f 	and.w	r2, r3, #31
 8003768:	4613      	mov	r3, r2
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	4413      	add	r3, r2
 800376e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003770:	430b      	orrs	r3, r1
 8003772:	e07e      	b.n	8003872 <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800377c:	2b00      	cmp	r3, #0
 800377e:	d107      	bne.n	8003790 <HAL_ADC_ConfigChannel+0x3b4>
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	0e9b      	lsrs	r3, r3, #26
 8003786:	3301      	adds	r3, #1
 8003788:	069b      	lsls	r3, r3, #26
 800378a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800378e:	e015      	b.n	80037bc <HAL_ADC_ConfigChannel+0x3e0>
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003798:	fa93 f3a3 	rbit	r3, r3
 800379c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80037a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80037a8:	2320      	movs	r3, #32
 80037aa:	e003      	b.n	80037b4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80037ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ae:	fab3 f383 	clz	r3, r3
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	3301      	adds	r3, #1
 80037b6:	069b      	lsls	r3, r3, #26
 80037b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d109      	bne.n	80037dc <HAL_ADC_ConfigChannel+0x400>
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	0e9b      	lsrs	r3, r3, #26
 80037ce:	3301      	adds	r3, #1
 80037d0:	f003 031f 	and.w	r3, r3, #31
 80037d4:	2101      	movs	r1, #1
 80037d6:	fa01 f303 	lsl.w	r3, r1, r3
 80037da:	e017      	b.n	800380c <HAL_ADC_ConfigChannel+0x430>
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	fa93 f3a3 	rbit	r3, r3
 80037e8:	61bb      	str	r3, [r7, #24]
  return result;
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80037ee:	6a3b      	ldr	r3, [r7, #32]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d101      	bne.n	80037f8 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 80037f4:	2320      	movs	r3, #32
 80037f6:	e003      	b.n	8003800 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 80037f8:	6a3b      	ldr	r3, [r7, #32]
 80037fa:	fab3 f383 	clz	r3, r3
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	3301      	adds	r3, #1
 8003802:	f003 031f 	and.w	r3, r3, #31
 8003806:	2101      	movs	r1, #1
 8003808:	fa01 f303 	lsl.w	r3, r1, r3
 800380c:	ea42 0103 	orr.w	r1, r2, r3
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003818:	2b00      	cmp	r3, #0
 800381a:	d10d      	bne.n	8003838 <HAL_ADC_ConfigChannel+0x45c>
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	0e9b      	lsrs	r3, r3, #26
 8003822:	3301      	adds	r3, #1
 8003824:	f003 021f 	and.w	r2, r3, #31
 8003828:	4613      	mov	r3, r2
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	4413      	add	r3, r2
 800382e:	3b1e      	subs	r3, #30
 8003830:	051b      	lsls	r3, r3, #20
 8003832:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003836:	e01b      	b.n	8003870 <HAL_ADC_ConfigChannel+0x494>
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	fa93 f3a3 	rbit	r3, r3
 8003844:	60fb      	str	r3, [r7, #12]
  return result;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d101      	bne.n	8003854 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 8003850:	2320      	movs	r3, #32
 8003852:	e003      	b.n	800385c <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	fab3 f383 	clz	r3, r3
 800385a:	b2db      	uxtb	r3, r3
 800385c:	3301      	adds	r3, #1
 800385e:	f003 021f 	and.w	r2, r3, #31
 8003862:	4613      	mov	r3, r2
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	4413      	add	r3, r2
 8003868:	3b1e      	subs	r3, #30
 800386a:	051b      	lsls	r3, r3, #20
 800386c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003870:	430b      	orrs	r3, r1
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	6892      	ldr	r2, [r2, #8]
 8003876:	4619      	mov	r1, r3
 8003878:	f7fe ff40 	bl	80026fc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	da77      	bge.n	8003974 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003884:	4840      	ldr	r0, [pc, #256]	; (8003988 <HAL_ADC_ConfigChannel+0x5ac>)
 8003886:	f7fe fe85 	bl	8002594 <LL_ADC_GetCommonPathInternalCh>
 800388a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800388c:	483f      	ldr	r0, [pc, #252]	; (800398c <HAL_ADC_ConfigChannel+0x5b0>)
 800388e:	f7ff f817 	bl	80028c0 <LL_ADC_IsEnabled>
 8003892:	4604      	mov	r4, r0
 8003894:	483e      	ldr	r0, [pc, #248]	; (8003990 <HAL_ADC_ConfigChannel+0x5b4>)
 8003896:	f7ff f813 	bl	80028c0 <LL_ADC_IsEnabled>
 800389a:	4603      	mov	r3, r0
 800389c:	4323      	orrs	r3, r4
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d155      	bne.n	800394e <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a3b      	ldr	r2, [pc, #236]	; (8003994 <HAL_ADC_ConfigChannel+0x5b8>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d122      	bne.n	80038f2 <HAL_ADC_ConfigChannel+0x516>
 80038ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d11d      	bne.n	80038f2 <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a35      	ldr	r2, [pc, #212]	; (8003990 <HAL_ADC_ConfigChannel+0x5b4>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d159      	bne.n	8003974 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80038c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038c6:	4619      	mov	r1, r3
 80038c8:	482f      	ldr	r0, [pc, #188]	; (8003988 <HAL_ADC_ConfigChannel+0x5ac>)
 80038ca:	f7fe fe50 	bl	800256e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038ce:	4b32      	ldr	r3, [pc, #200]	; (8003998 <HAL_ADC_ConfigChannel+0x5bc>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	099b      	lsrs	r3, r3, #6
 80038d4:	4a31      	ldr	r2, [pc, #196]	; (800399c <HAL_ADC_ConfigChannel+0x5c0>)
 80038d6:	fba2 2303 	umull	r2, r3, r2, r3
 80038da:	099b      	lsrs	r3, r3, #6
 80038dc:	3301      	adds	r3, #1
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80038e2:	e002      	b.n	80038ea <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	3b01      	subs	r3, #1
 80038e8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1f9      	bne.n	80038e4 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038f0:	e040      	b.n	8003974 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a2a      	ldr	r2, [pc, #168]	; (80039a0 <HAL_ADC_ConfigChannel+0x5c4>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d111      	bne.n	8003920 <HAL_ADC_ConfigChannel+0x544>
 80038fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d10c      	bne.n	8003920 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a21      	ldr	r2, [pc, #132]	; (8003990 <HAL_ADC_ConfigChannel+0x5b4>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d131      	bne.n	8003974 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003912:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003916:	4619      	mov	r1, r3
 8003918:	481b      	ldr	r0, [pc, #108]	; (8003988 <HAL_ADC_ConfigChannel+0x5ac>)
 800391a:	f7fe fe28 	bl	800256e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800391e:	e029      	b.n	8003974 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a1f      	ldr	r2, [pc, #124]	; (80039a4 <HAL_ADC_ConfigChannel+0x5c8>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d124      	bne.n	8003974 <HAL_ADC_ConfigChannel+0x598>
 800392a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800392c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d11f      	bne.n	8003974 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a15      	ldr	r2, [pc, #84]	; (8003990 <HAL_ADC_ConfigChannel+0x5b4>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d11a      	bne.n	8003974 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800393e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003940:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003944:	4619      	mov	r1, r3
 8003946:	4810      	ldr	r0, [pc, #64]	; (8003988 <HAL_ADC_ConfigChannel+0x5ac>)
 8003948:	f7fe fe11 	bl	800256e <LL_ADC_SetCommonPathInternalCh>
 800394c:	e012      	b.n	8003974 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003952:	f043 0220 	orr.w	r2, r3, #32
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003960:	e008      	b.n	8003974 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003966:	f043 0220 	orr.w	r2, r3, #32
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800397c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003980:	4618      	mov	r0, r3
 8003982:	3784      	adds	r7, #132	; 0x84
 8003984:	46bd      	mov	sp, r7
 8003986:	bd90      	pop	{r4, r7, pc}
 8003988:	40022300 	.word	0x40022300
 800398c:	40022000 	.word	0x40022000
 8003990:	40022100 	.word	0x40022100
 8003994:	cb840000 	.word	0xcb840000
 8003998:	24000004 	.word	0x24000004
 800399c:	053e2d63 	.word	0x053e2d63
 80039a0:	bac04000 	.word	0xbac04000
 80039a4:	cfb80000 	.word	0xcfb80000

080039a8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b088      	sub	sp, #32
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80039b2:	2300      	movs	r3, #0
 80039b4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4618      	mov	r0, r3
 80039c0:	f7fe ffcc 	bl	800295c <LL_ADC_REG_IsConversionOngoing>
 80039c4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7fe ffee 	bl	80029ac <LL_ADC_INJ_IsConversionOngoing>
 80039d0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d103      	bne.n	80039e0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f000 8098 	beq.w	8003b10 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d02a      	beq.n	8003a44 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	7d5b      	ldrb	r3, [r3, #21]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d126      	bne.n	8003a44 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	7d1b      	ldrb	r3, [r3, #20]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d122      	bne.n	8003a44 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80039fe:	2301      	movs	r3, #1
 8003a00:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003a02:	e014      	b.n	8003a2e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	4a45      	ldr	r2, [pc, #276]	; (8003b1c <ADC_ConversionStop+0x174>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d90d      	bls.n	8003a28 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a10:	f043 0210 	orr.w	r2, r3, #16
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1c:	f043 0201 	orr.w	r2, r3, #1
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e074      	b.n	8003b12 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a38:	2b40      	cmp	r3, #64	; 0x40
 8003a3a:	d1e3      	bne.n	8003a04 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2240      	movs	r2, #64	; 0x40
 8003a42:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d014      	beq.n	8003a74 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7fe ff84 	bl	800295c <LL_ADC_REG_IsConversionOngoing>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00c      	beq.n	8003a74 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7fe ff41 	bl	80028e6 <LL_ADC_IsDisableOngoing>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d104      	bne.n	8003a74 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7fe ff60 	bl	8002934 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d014      	beq.n	8003aa4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7fe ff94 	bl	80029ac <LL_ADC_INJ_IsConversionOngoing>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00c      	beq.n	8003aa4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7fe ff29 	bl	80028e6 <LL_ADC_IsDisableOngoing>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d104      	bne.n	8003aa4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7fe ff70 	bl	8002984 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d005      	beq.n	8003ab6 <ADC_ConversionStop+0x10e>
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	2b03      	cmp	r3, #3
 8003aae:	d105      	bne.n	8003abc <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003ab0:	230c      	movs	r3, #12
 8003ab2:	617b      	str	r3, [r7, #20]
        break;
 8003ab4:	e005      	b.n	8003ac2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003ab6:	2308      	movs	r3, #8
 8003ab8:	617b      	str	r3, [r7, #20]
        break;
 8003aba:	e002      	b.n	8003ac2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003abc:	2304      	movs	r3, #4
 8003abe:	617b      	str	r3, [r7, #20]
        break;
 8003ac0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003ac2:	f7fe fd35 	bl	8002530 <HAL_GetTick>
 8003ac6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003ac8:	e01b      	b.n	8003b02 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003aca:	f7fe fd31 	bl	8002530 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	2b05      	cmp	r3, #5
 8003ad6:	d914      	bls.n	8003b02 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689a      	ldr	r2, [r3, #8]
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00d      	beq.n	8003b02 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aea:	f043 0210 	orr.w	r2, r3, #16
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af6:	f043 0201 	orr.w	r2, r3, #1
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e007      	b.n	8003b12 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1dc      	bne.n	8003aca <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3720      	adds	r7, #32
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	000cdbff 	.word	0x000cdbff

08003b20 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7fe fec7 	bl	80028c0 <LL_ADC_IsEnabled>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d161      	bne.n	8003bfc <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689a      	ldr	r2, [r3, #8]
 8003b3e:	4b32      	ldr	r3, [pc, #200]	; (8003c08 <ADC_Enable+0xe8>)
 8003b40:	4013      	ands	r3, r2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00d      	beq.n	8003b62 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b4a:	f043 0210 	orr.w	r2, r3, #16
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b56:	f043 0201 	orr.w	r2, r3, #1
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e04d      	b.n	8003bfe <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7fe fe82 	bl	8002870 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003b6c:	f7fe fce0 	bl	8002530 <HAL_GetTick>
 8003b70:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b72:	4826      	ldr	r0, [pc, #152]	; (8003c0c <ADC_Enable+0xec>)
 8003b74:	f7fe fe12 	bl	800279c <LL_ADC_GetMultimode>
 8003b78:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a24      	ldr	r2, [pc, #144]	; (8003c10 <ADC_Enable+0xf0>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d002      	beq.n	8003b8a <ADC_Enable+0x6a>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	e000      	b.n	8003b8c <ADC_Enable+0x6c>
 8003b8a:	4b22      	ldr	r3, [pc, #136]	; (8003c14 <ADC_Enable+0xf4>)
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	6812      	ldr	r2, [r2, #0]
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d02c      	beq.n	8003bee <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d130      	bne.n	8003bfc <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b9a:	e028      	b.n	8003bee <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7fe fe8d 	bl	80028c0 <LL_ADC_IsEnabled>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d104      	bne.n	8003bb6 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7fe fe5d 	bl	8002870 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003bb6:	f7fe fcbb 	bl	8002530 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d914      	bls.n	8003bee <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d00d      	beq.n	8003bee <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd6:	f043 0210 	orr.w	r2, r3, #16
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be2:	f043 0201 	orr.w	r2, r3, #1
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e007      	b.n	8003bfe <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0301 	and.w	r3, r3, #1
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d1cf      	bne.n	8003b9c <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	8000003f 	.word	0x8000003f
 8003c0c:	40022300 	.word	0x40022300
 8003c10:	40022100 	.word	0x40022100
 8003c14:	40022000 	.word	0x40022000

08003c18 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7fe fe5e 	bl	80028e6 <LL_ADC_IsDisableOngoing>
 8003c2a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7fe fe45 	bl	80028c0 <LL_ADC_IsEnabled>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d047      	beq.n	8003ccc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d144      	bne.n	8003ccc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f003 030d 	and.w	r3, r3, #13
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d10c      	bne.n	8003c6a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7fe fe1f 	bl	8002898 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2203      	movs	r2, #3
 8003c60:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c62:	f7fe fc65 	bl	8002530 <HAL_GetTick>
 8003c66:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c68:	e029      	b.n	8003cbe <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c6e:	f043 0210 	orr.w	r2, r3, #16
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c7a:	f043 0201 	orr.w	r2, r3, #1
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e023      	b.n	8003cce <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003c86:	f7fe fc53 	bl	8002530 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d914      	bls.n	8003cbe <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00d      	beq.n	8003cbe <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca6:	f043 0210 	orr.w	r2, r3, #16
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb2:	f043 0201 	orr.w	r2, r3, #1
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e007      	b.n	8003cce <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1dc      	bne.n	8003c86 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
	...

08003cd8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003ce0:	4b5f      	ldr	r3, [pc, #380]	; (8003e60 <ADC_ConfigureBoostMode+0x188>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d01c      	beq.n	8003d26 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003cec:	f004 fba2 	bl	8008434 <HAL_RCC_GetHCLKFreq>
 8003cf0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003cfa:	d010      	beq.n	8003d1e <ADC_ConfigureBoostMode+0x46>
 8003cfc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d00:	d871      	bhi.n	8003de6 <ADC_ConfigureBoostMode+0x10e>
 8003d02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d06:	d002      	beq.n	8003d0e <ADC_ConfigureBoostMode+0x36>
 8003d08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d0c:	d16b      	bne.n	8003de6 <ADC_ConfigureBoostMode+0x10e>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	0c1b      	lsrs	r3, r3, #16
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d1a:	60fb      	str	r3, [r7, #12]
        break;
 8003d1c:	e066      	b.n	8003dec <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	089b      	lsrs	r3, r3, #2
 8003d22:	60fb      	str	r3, [r7, #12]
        break;
 8003d24:	e062      	b.n	8003dec <ADC_ConfigureBoostMode+0x114>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003d26:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003d2a:	f005 fb2d 	bl	8009388 <HAL_RCCEx_GetPeriphCLKFreq>
 8003d2e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003d38:	d051      	beq.n	8003dde <ADC_ConfigureBoostMode+0x106>
 8003d3a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003d3e:	d854      	bhi.n	8003dea <ADC_ConfigureBoostMode+0x112>
 8003d40:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003d44:	d047      	beq.n	8003dd6 <ADC_ConfigureBoostMode+0xfe>
 8003d46:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003d4a:	d84e      	bhi.n	8003dea <ADC_ConfigureBoostMode+0x112>
 8003d4c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003d50:	d03d      	beq.n	8003dce <ADC_ConfigureBoostMode+0xf6>
 8003d52:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003d56:	d848      	bhi.n	8003dea <ADC_ConfigureBoostMode+0x112>
 8003d58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d5c:	d033      	beq.n	8003dc6 <ADC_ConfigureBoostMode+0xee>
 8003d5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d62:	d842      	bhi.n	8003dea <ADC_ConfigureBoostMode+0x112>
 8003d64:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003d68:	d029      	beq.n	8003dbe <ADC_ConfigureBoostMode+0xe6>
 8003d6a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003d6e:	d83c      	bhi.n	8003dea <ADC_ConfigureBoostMode+0x112>
 8003d70:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003d74:	d01a      	beq.n	8003dac <ADC_ConfigureBoostMode+0xd4>
 8003d76:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003d7a:	d836      	bhi.n	8003dea <ADC_ConfigureBoostMode+0x112>
 8003d7c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003d80:	d014      	beq.n	8003dac <ADC_ConfigureBoostMode+0xd4>
 8003d82:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003d86:	d830      	bhi.n	8003dea <ADC_ConfigureBoostMode+0x112>
 8003d88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d8c:	d00e      	beq.n	8003dac <ADC_ConfigureBoostMode+0xd4>
 8003d8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d92:	d82a      	bhi.n	8003dea <ADC_ConfigureBoostMode+0x112>
 8003d94:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003d98:	d008      	beq.n	8003dac <ADC_ConfigureBoostMode+0xd4>
 8003d9a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003d9e:	d824      	bhi.n	8003dea <ADC_ConfigureBoostMode+0x112>
 8003da0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003da4:	d002      	beq.n	8003dac <ADC_ConfigureBoostMode+0xd4>
 8003da6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003daa:	d11e      	bne.n	8003dea <ADC_ConfigureBoostMode+0x112>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	0c9b      	lsrs	r3, r3, #18
 8003db2:	005b      	lsls	r3, r3, #1
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dba:	60fb      	str	r3, [r7, #12]
        break;
 8003dbc:	e016      	b.n	8003dec <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	091b      	lsrs	r3, r3, #4
 8003dc2:	60fb      	str	r3, [r7, #12]
        break;
 8003dc4:	e012      	b.n	8003dec <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	095b      	lsrs	r3, r3, #5
 8003dca:	60fb      	str	r3, [r7, #12]
        break;
 8003dcc:	e00e      	b.n	8003dec <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	099b      	lsrs	r3, r3, #6
 8003dd2:	60fb      	str	r3, [r7, #12]
        break;
 8003dd4:	e00a      	b.n	8003dec <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	09db      	lsrs	r3, r3, #7
 8003dda:	60fb      	str	r3, [r7, #12]
        break;
 8003ddc:	e006      	b.n	8003dec <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	0a1b      	lsrs	r3, r3, #8
 8003de2:	60fb      	str	r3, [r7, #12]
        break;
 8003de4:	e002      	b.n	8003dec <ADC_ConfigureBoostMode+0x114>
        break;
 8003de6:	bf00      	nop
 8003de8:	e000      	b.n	8003dec <ADC_ConfigureBoostMode+0x114>
      default:
        break;
 8003dea:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	085b      	lsrs	r3, r3, #1
 8003df0:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	4a1b      	ldr	r2, [pc, #108]	; (8003e64 <ADC_ConfigureBoostMode+0x18c>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d808      	bhi.n	8003e0c <ADC_ConfigureBoostMode+0x134>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	689a      	ldr	r2, [r3, #8]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003e08:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003e0a:	e025      	b.n	8003e58 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 12500000UL)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	4a16      	ldr	r2, [pc, #88]	; (8003e68 <ADC_ConfigureBoostMode+0x190>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d80a      	bhi.n	8003e2a <ADC_ConfigureBoostMode+0x152>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e26:	609a      	str	r2, [r3, #8]
}
 8003e28:	e016      	b.n	8003e58 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 25000000UL)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	4a0f      	ldr	r2, [pc, #60]	; (8003e6c <ADC_ConfigureBoostMode+0x194>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d80a      	bhi.n	8003e48 <ADC_ConfigureBoostMode+0x170>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e44:	609a      	str	r2, [r3, #8]
}
 8003e46:	e007      	b.n	8003e58 <ADC_ConfigureBoostMode+0x180>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689a      	ldr	r2, [r3, #8]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003e56:	609a      	str	r2, [r3, #8]
}
 8003e58:	bf00      	nop
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	40022300 	.word	0x40022300
 8003e64:	005f5e10 	.word	0x005f5e10
 8003e68:	00bebc20 	.word	0x00bebc20
 8003e6c:	017d7840 	.word	0x017d7840

08003e70 <LL_ADC_IsEnabled>:
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d101      	bne.n	8003e88 <LL_ADC_IsEnabled+0x18>
 8003e84:	2301      	movs	r3, #1
 8003e86:	e000      	b.n	8003e8a <LL_ADC_IsEnabled+0x1a>
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
	...

08003e98 <LL_ADC_StartCalibration>:
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	689a      	ldr	r2, [r3, #8]
 8003ea8:	4b09      	ldr	r3, [pc, #36]	; (8003ed0 <LL_ADC_StartCalibration+0x38>)
 8003eaa:	4013      	ands	r3, r2
 8003eac:	68ba      	ldr	r2, [r7, #8]
 8003eae:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	609a      	str	r2, [r3, #8]
}
 8003ec4:	bf00      	nop
 8003ec6:	3714      	adds	r7, #20
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr
 8003ed0:	3ffeffc0 	.word	0x3ffeffc0

08003ed4 <LL_ADC_IsCalibrationOnGoing>:
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ee4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ee8:	d101      	bne.n	8003eee <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003eea:	2301      	movs	r3, #1
 8003eec:	e000      	b.n	8003ef0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <LL_ADC_REG_IsConversionOngoing>:
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f003 0304 	and.w	r3, r3, #4
 8003f0c:	2b04      	cmp	r3, #4
 8003f0e:	d101      	bne.n	8003f14 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f10:	2301      	movs	r3, #1
 8003f12:	e000      	b.n	8003f16 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
	...

08003f24 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b086      	sub	sp, #24
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003f30:	2300      	movs	r3, #0
 8003f32:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d101      	bne.n	8003f42 <HAL_ADCEx_Calibration_Start+0x1e>
 8003f3e:	2302      	movs	r3, #2
 8003f40:	e04c      	b.n	8003fdc <HAL_ADCEx_Calibration_Start+0xb8>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f7ff fe64 	bl	8003c18 <ADC_Disable>
 8003f50:	4603      	mov	r3, r0
 8003f52:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003f54:	7dfb      	ldrb	r3, [r7, #23]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d135      	bne.n	8003fc6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f5e:	4b21      	ldr	r3, [pc, #132]	; (8003fe4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003f60:	4013      	ands	r3, r2
 8003f62:	f043 0202 	orr.w	r2, r3, #2
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	68b9      	ldr	r1, [r7, #8]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7ff ff90 	bl	8003e98 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003f78:	e014      	b.n	8003fa4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	4a19      	ldr	r2, [pc, #100]	; (8003fe8 <HAL_ADCEx_Calibration_Start+0xc4>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d30d      	bcc.n	8003fa4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f8c:	f023 0312 	bic.w	r3, r3, #18
 8003f90:	f043 0210 	orr.w	r2, r3, #16
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e01b      	b.n	8003fdc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7ff ff93 	bl	8003ed4 <LL_ADC_IsCalibrationOnGoing>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1e2      	bne.n	8003f7a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb8:	f023 0303 	bic.w	r3, r3, #3
 8003fbc:	f043 0201 	orr.w	r2, r3, #1
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	655a      	str	r2, [r3, #84]	; 0x54
 8003fc4:	e005      	b.n	8003fd2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fca:	f043 0210 	orr.w	r2, r3, #16
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003fda:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3718      	adds	r7, #24
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	ffffeefd 	.word	0xffffeefd
 8003fe8:	25c3f800 	.word	0x25c3f800

08003fec <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004050:	b590      	push	{r4, r7, lr}
 8004052:	b09f      	sub	sp, #124	; 0x7c
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800405a:	2300      	movs	r3, #0
 800405c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004066:	2b01      	cmp	r3, #1
 8004068:	d101      	bne.n	800406e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800406a:	2302      	movs	r3, #2
 800406c:	e080      	b.n	8004170 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004076:	2300      	movs	r3, #0
 8004078:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800407a:	2300      	movs	r3, #0
 800407c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a3d      	ldr	r2, [pc, #244]	; (8004178 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d102      	bne.n	800408e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004088:	4b3c      	ldr	r3, [pc, #240]	; (800417c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 800408a:	60bb      	str	r3, [r7, #8]
 800408c:	e001      	b.n	8004092 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800408e:	2300      	movs	r3, #0
 8004090:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d10b      	bne.n	80040b0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409c:	f043 0220 	orr.w	r2, r3, #32
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e05f      	b.n	8004170 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7ff ff22 	bl	8003efc <LL_ADC_REG_IsConversionOngoing>
 80040b8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4618      	mov	r0, r3
 80040c0:	f7ff ff1c 	bl	8003efc <LL_ADC_REG_IsConversionOngoing>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d141      	bne.n	800414e <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80040ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d13e      	bne.n	800414e <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80040d0:	4b2b      	ldr	r3, [pc, #172]	; (8004180 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 80040d2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d020      	beq.n	800411e <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80040dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	431a      	orrs	r2, r3
 80040ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ec:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040ee:	4822      	ldr	r0, [pc, #136]	; (8004178 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80040f0:	f7ff febe 	bl	8003e70 <LL_ADC_IsEnabled>
 80040f4:	4604      	mov	r4, r0
 80040f6:	4821      	ldr	r0, [pc, #132]	; (800417c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80040f8:	f7ff feba 	bl	8003e70 <LL_ADC_IsEnabled>
 80040fc:	4603      	mov	r3, r0
 80040fe:	4323      	orrs	r3, r4
 8004100:	2b00      	cmp	r3, #0
 8004102:	d12e      	bne.n	8004162 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004106:	689a      	ldr	r2, [r3, #8]
 8004108:	4b1e      	ldr	r3, [pc, #120]	; (8004184 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 800410a:	4013      	ands	r3, r2
 800410c:	683a      	ldr	r2, [r7, #0]
 800410e:	6811      	ldr	r1, [r2, #0]
 8004110:	683a      	ldr	r2, [r7, #0]
 8004112:	6892      	ldr	r2, [r2, #8]
 8004114:	430a      	orrs	r2, r1
 8004116:	431a      	orrs	r2, r3
 8004118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800411a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800411c:	e021      	b.n	8004162 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800411e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004128:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800412a:	4813      	ldr	r0, [pc, #76]	; (8004178 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 800412c:	f7ff fea0 	bl	8003e70 <LL_ADC_IsEnabled>
 8004130:	4604      	mov	r4, r0
 8004132:	4812      	ldr	r0, [pc, #72]	; (800417c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8004134:	f7ff fe9c 	bl	8003e70 <LL_ADC_IsEnabled>
 8004138:	4603      	mov	r3, r0
 800413a:	4323      	orrs	r3, r4
 800413c:	2b00      	cmp	r3, #0
 800413e:	d110      	bne.n	8004162 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004142:	689a      	ldr	r2, [r3, #8]
 8004144:	4b0f      	ldr	r3, [pc, #60]	; (8004184 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8004146:	4013      	ands	r3, r2
 8004148:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800414a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800414c:	e009      	b.n	8004162 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004152:	f043 0220 	orr.w	r2, r3, #32
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004160:	e000      	b.n	8004164 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004162:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800416c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004170:	4618      	mov	r0, r3
 8004172:	377c      	adds	r7, #124	; 0x7c
 8004174:	46bd      	mov	sp, r7
 8004176:	bd90      	pop	{r4, r7, pc}
 8004178:	40022000 	.word	0x40022000
 800417c:	40022100 	.word	0x40022100
 8004180:	40022300 	.word	0x40022300
 8004184:	fffff0e0 	.word	0xfffff0e0

08004188 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f003 0307 	and.w	r3, r3, #7
 8004196:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004198:	4b0b      	ldr	r3, [pc, #44]	; (80041c8 <__NVIC_SetPriorityGrouping+0x40>)
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800419e:	68ba      	ldr	r2, [r7, #8]
 80041a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041a4:	4013      	ands	r3, r2
 80041a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80041b0:	4b06      	ldr	r3, [pc, #24]	; (80041cc <__NVIC_SetPriorityGrouping+0x44>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041b6:	4a04      	ldr	r2, [pc, #16]	; (80041c8 <__NVIC_SetPriorityGrouping+0x40>)
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	60d3      	str	r3, [r2, #12]
}
 80041bc:	bf00      	nop
 80041be:	3714      	adds	r7, #20
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr
 80041c8:	e000ed00 	.word	0xe000ed00
 80041cc:	05fa0000 	.word	0x05fa0000

080041d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041d4:	4b04      	ldr	r3, [pc, #16]	; (80041e8 <__NVIC_GetPriorityGrouping+0x18>)
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	0a1b      	lsrs	r3, r3, #8
 80041da:	f003 0307 	and.w	r3, r3, #7
}
 80041de:	4618      	mov	r0, r3
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr
 80041e8:	e000ed00 	.word	0xe000ed00

080041ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	4603      	mov	r3, r0
 80041f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80041f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	db0b      	blt.n	8004216 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041fe:	88fb      	ldrh	r3, [r7, #6]
 8004200:	f003 021f 	and.w	r2, r3, #31
 8004204:	4907      	ldr	r1, [pc, #28]	; (8004224 <__NVIC_EnableIRQ+0x38>)
 8004206:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800420a:	095b      	lsrs	r3, r3, #5
 800420c:	2001      	movs	r0, #1
 800420e:	fa00 f202 	lsl.w	r2, r0, r2
 8004212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004216:	bf00      	nop
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	e000e100 	.word	0xe000e100

08004228 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	4603      	mov	r3, r0
 8004230:	6039      	str	r1, [r7, #0]
 8004232:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004234:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004238:	2b00      	cmp	r3, #0
 800423a:	db0a      	blt.n	8004252 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	b2da      	uxtb	r2, r3
 8004240:	490c      	ldr	r1, [pc, #48]	; (8004274 <__NVIC_SetPriority+0x4c>)
 8004242:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004246:	0112      	lsls	r2, r2, #4
 8004248:	b2d2      	uxtb	r2, r2
 800424a:	440b      	add	r3, r1
 800424c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004250:	e00a      	b.n	8004268 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	b2da      	uxtb	r2, r3
 8004256:	4908      	ldr	r1, [pc, #32]	; (8004278 <__NVIC_SetPriority+0x50>)
 8004258:	88fb      	ldrh	r3, [r7, #6]
 800425a:	f003 030f 	and.w	r3, r3, #15
 800425e:	3b04      	subs	r3, #4
 8004260:	0112      	lsls	r2, r2, #4
 8004262:	b2d2      	uxtb	r2, r2
 8004264:	440b      	add	r3, r1
 8004266:	761a      	strb	r2, [r3, #24]
}
 8004268:	bf00      	nop
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr
 8004274:	e000e100 	.word	0xe000e100
 8004278:	e000ed00 	.word	0xe000ed00

0800427c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800427c:	b480      	push	{r7}
 800427e:	b089      	sub	sp, #36	; 0x24
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f003 0307 	and.w	r3, r3, #7
 800428e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	f1c3 0307 	rsb	r3, r3, #7
 8004296:	2b04      	cmp	r3, #4
 8004298:	bf28      	it	cs
 800429a:	2304      	movcs	r3, #4
 800429c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	3304      	adds	r3, #4
 80042a2:	2b06      	cmp	r3, #6
 80042a4:	d902      	bls.n	80042ac <NVIC_EncodePriority+0x30>
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	3b03      	subs	r3, #3
 80042aa:	e000      	b.n	80042ae <NVIC_EncodePriority+0x32>
 80042ac:	2300      	movs	r3, #0
 80042ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ba:	43da      	mvns	r2, r3
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	401a      	ands	r2, r3
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	fa01 f303 	lsl.w	r3, r1, r3
 80042ce:	43d9      	mvns	r1, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042d4:	4313      	orrs	r3, r2
         );
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3724      	adds	r7, #36	; 0x24
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b082      	sub	sp, #8
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f7ff ff4c 	bl	8004188 <__NVIC_SetPriorityGrouping>
}
 80042f0:	bf00      	nop
 80042f2:	3708      	adds	r7, #8
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b086      	sub	sp, #24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	4603      	mov	r3, r0
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
 8004304:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004306:	f7ff ff63 	bl	80041d0 <__NVIC_GetPriorityGrouping>
 800430a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	68b9      	ldr	r1, [r7, #8]
 8004310:	6978      	ldr	r0, [r7, #20]
 8004312:	f7ff ffb3 	bl	800427c <NVIC_EncodePriority>
 8004316:	4602      	mov	r2, r0
 8004318:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800431c:	4611      	mov	r1, r2
 800431e:	4618      	mov	r0, r3
 8004320:	f7ff ff82 	bl	8004228 <__NVIC_SetPriority>
}
 8004324:	bf00      	nop
 8004326:	3718      	adds	r7, #24
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
 8004332:	4603      	mov	r3, r0
 8004334:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004336:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800433a:	4618      	mov	r0, r3
 800433c:	f7ff ff56 	bl	80041ec <__NVIC_EnableIRQ>
}
 8004340:	bf00      	nop
 8004342:	3708      	adds	r7, #8
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004350:	f7fe f8ee 	bl	8002530 <HAL_GetTick>
 8004354:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d101      	bne.n	8004360 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e37f      	b.n	8004a60 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a66      	ldr	r2, [pc, #408]	; (8004500 <HAL_DMA_Init+0x1b8>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d04a      	beq.n	8004400 <HAL_DMA_Init+0xb8>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a65      	ldr	r2, [pc, #404]	; (8004504 <HAL_DMA_Init+0x1bc>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d045      	beq.n	8004400 <HAL_DMA_Init+0xb8>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a63      	ldr	r2, [pc, #396]	; (8004508 <HAL_DMA_Init+0x1c0>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d040      	beq.n	8004400 <HAL_DMA_Init+0xb8>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a62      	ldr	r2, [pc, #392]	; (800450c <HAL_DMA_Init+0x1c4>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d03b      	beq.n	8004400 <HAL_DMA_Init+0xb8>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a60      	ldr	r2, [pc, #384]	; (8004510 <HAL_DMA_Init+0x1c8>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d036      	beq.n	8004400 <HAL_DMA_Init+0xb8>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a5f      	ldr	r2, [pc, #380]	; (8004514 <HAL_DMA_Init+0x1cc>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d031      	beq.n	8004400 <HAL_DMA_Init+0xb8>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a5d      	ldr	r2, [pc, #372]	; (8004518 <HAL_DMA_Init+0x1d0>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d02c      	beq.n	8004400 <HAL_DMA_Init+0xb8>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a5c      	ldr	r2, [pc, #368]	; (800451c <HAL_DMA_Init+0x1d4>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d027      	beq.n	8004400 <HAL_DMA_Init+0xb8>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a5a      	ldr	r2, [pc, #360]	; (8004520 <HAL_DMA_Init+0x1d8>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d022      	beq.n	8004400 <HAL_DMA_Init+0xb8>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a59      	ldr	r2, [pc, #356]	; (8004524 <HAL_DMA_Init+0x1dc>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d01d      	beq.n	8004400 <HAL_DMA_Init+0xb8>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a57      	ldr	r2, [pc, #348]	; (8004528 <HAL_DMA_Init+0x1e0>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d018      	beq.n	8004400 <HAL_DMA_Init+0xb8>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a56      	ldr	r2, [pc, #344]	; (800452c <HAL_DMA_Init+0x1e4>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d013      	beq.n	8004400 <HAL_DMA_Init+0xb8>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a54      	ldr	r2, [pc, #336]	; (8004530 <HAL_DMA_Init+0x1e8>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d00e      	beq.n	8004400 <HAL_DMA_Init+0xb8>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a53      	ldr	r2, [pc, #332]	; (8004534 <HAL_DMA_Init+0x1ec>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d009      	beq.n	8004400 <HAL_DMA_Init+0xb8>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a51      	ldr	r2, [pc, #324]	; (8004538 <HAL_DMA_Init+0x1f0>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d004      	beq.n	8004400 <HAL_DMA_Init+0xb8>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a50      	ldr	r2, [pc, #320]	; (800453c <HAL_DMA_Init+0x1f4>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d101      	bne.n	8004404 <HAL_DMA_Init+0xbc>
 8004400:	2301      	movs	r3, #1
 8004402:	e000      	b.n	8004406 <HAL_DMA_Init+0xbe>
 8004404:	2300      	movs	r3, #0
 8004406:	2b00      	cmp	r3, #0
 8004408:	f000 813c 	beq.w	8004684 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2202      	movs	r2, #2
 8004410:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a37      	ldr	r2, [pc, #220]	; (8004500 <HAL_DMA_Init+0x1b8>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d04a      	beq.n	80044bc <HAL_DMA_Init+0x174>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a36      	ldr	r2, [pc, #216]	; (8004504 <HAL_DMA_Init+0x1bc>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d045      	beq.n	80044bc <HAL_DMA_Init+0x174>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a34      	ldr	r2, [pc, #208]	; (8004508 <HAL_DMA_Init+0x1c0>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d040      	beq.n	80044bc <HAL_DMA_Init+0x174>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a33      	ldr	r2, [pc, #204]	; (800450c <HAL_DMA_Init+0x1c4>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d03b      	beq.n	80044bc <HAL_DMA_Init+0x174>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a31      	ldr	r2, [pc, #196]	; (8004510 <HAL_DMA_Init+0x1c8>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d036      	beq.n	80044bc <HAL_DMA_Init+0x174>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a30      	ldr	r2, [pc, #192]	; (8004514 <HAL_DMA_Init+0x1cc>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d031      	beq.n	80044bc <HAL_DMA_Init+0x174>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a2e      	ldr	r2, [pc, #184]	; (8004518 <HAL_DMA_Init+0x1d0>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d02c      	beq.n	80044bc <HAL_DMA_Init+0x174>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a2d      	ldr	r2, [pc, #180]	; (800451c <HAL_DMA_Init+0x1d4>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d027      	beq.n	80044bc <HAL_DMA_Init+0x174>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a2b      	ldr	r2, [pc, #172]	; (8004520 <HAL_DMA_Init+0x1d8>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d022      	beq.n	80044bc <HAL_DMA_Init+0x174>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a2a      	ldr	r2, [pc, #168]	; (8004524 <HAL_DMA_Init+0x1dc>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d01d      	beq.n	80044bc <HAL_DMA_Init+0x174>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a28      	ldr	r2, [pc, #160]	; (8004528 <HAL_DMA_Init+0x1e0>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d018      	beq.n	80044bc <HAL_DMA_Init+0x174>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a27      	ldr	r2, [pc, #156]	; (800452c <HAL_DMA_Init+0x1e4>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d013      	beq.n	80044bc <HAL_DMA_Init+0x174>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a25      	ldr	r2, [pc, #148]	; (8004530 <HAL_DMA_Init+0x1e8>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d00e      	beq.n	80044bc <HAL_DMA_Init+0x174>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a24      	ldr	r2, [pc, #144]	; (8004534 <HAL_DMA_Init+0x1ec>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d009      	beq.n	80044bc <HAL_DMA_Init+0x174>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a22      	ldr	r2, [pc, #136]	; (8004538 <HAL_DMA_Init+0x1f0>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d004      	beq.n	80044bc <HAL_DMA_Init+0x174>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a21      	ldr	r2, [pc, #132]	; (800453c <HAL_DMA_Init+0x1f4>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d108      	bne.n	80044ce <HAL_DMA_Init+0x186>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f022 0201 	bic.w	r2, r2, #1
 80044ca:	601a      	str	r2, [r3, #0]
 80044cc:	e007      	b.n	80044de <HAL_DMA_Init+0x196>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 0201 	bic.w	r2, r2, #1
 80044dc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80044de:	e02f      	b.n	8004540 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80044e0:	f7fe f826 	bl	8002530 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b05      	cmp	r3, #5
 80044ec:	d928      	bls.n	8004540 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2220      	movs	r2, #32
 80044f2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2203      	movs	r2, #3
 80044f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e2af      	b.n	8004a60 <HAL_DMA_Init+0x718>
 8004500:	40020010 	.word	0x40020010
 8004504:	40020028 	.word	0x40020028
 8004508:	40020040 	.word	0x40020040
 800450c:	40020058 	.word	0x40020058
 8004510:	40020070 	.word	0x40020070
 8004514:	40020088 	.word	0x40020088
 8004518:	400200a0 	.word	0x400200a0
 800451c:	400200b8 	.word	0x400200b8
 8004520:	40020410 	.word	0x40020410
 8004524:	40020428 	.word	0x40020428
 8004528:	40020440 	.word	0x40020440
 800452c:	40020458 	.word	0x40020458
 8004530:	40020470 	.word	0x40020470
 8004534:	40020488 	.word	0x40020488
 8004538:	400204a0 	.word	0x400204a0
 800453c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1c8      	bne.n	80044e0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004556:	697a      	ldr	r2, [r7, #20]
 8004558:	4b73      	ldr	r3, [pc, #460]	; (8004728 <HAL_DMA_Init+0x3e0>)
 800455a:	4013      	ands	r3, r2
 800455c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004566:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004572:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800457e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a1b      	ldr	r3, [r3, #32]
 8004584:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	4313      	orrs	r3, r2
 800458a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004590:	2b04      	cmp	r3, #4
 8004592:	d107      	bne.n	80045a4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459c:	4313      	orrs	r3, r2
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	2b28      	cmp	r3, #40	; 0x28
 80045aa:	d903      	bls.n	80045b4 <HAL_DMA_Init+0x26c>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	2b2e      	cmp	r3, #46	; 0x2e
 80045b2:	d91f      	bls.n	80045f4 <HAL_DMA_Init+0x2ac>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	2b3e      	cmp	r3, #62	; 0x3e
 80045ba:	d903      	bls.n	80045c4 <HAL_DMA_Init+0x27c>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	2b42      	cmp	r3, #66	; 0x42
 80045c2:	d917      	bls.n	80045f4 <HAL_DMA_Init+0x2ac>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	2b46      	cmp	r3, #70	; 0x46
 80045ca:	d903      	bls.n	80045d4 <HAL_DMA_Init+0x28c>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	2b48      	cmp	r3, #72	; 0x48
 80045d2:	d90f      	bls.n	80045f4 <HAL_DMA_Init+0x2ac>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	2b4e      	cmp	r3, #78	; 0x4e
 80045da:	d903      	bls.n	80045e4 <HAL_DMA_Init+0x29c>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	2b52      	cmp	r3, #82	; 0x52
 80045e2:	d907      	bls.n	80045f4 <HAL_DMA_Init+0x2ac>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	2b73      	cmp	r3, #115	; 0x73
 80045ea:	d905      	bls.n	80045f8 <HAL_DMA_Init+0x2b0>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	2b77      	cmp	r3, #119	; 0x77
 80045f2:	d801      	bhi.n	80045f8 <HAL_DMA_Init+0x2b0>
 80045f4:	2301      	movs	r3, #1
 80045f6:	e000      	b.n	80045fa <HAL_DMA_Init+0x2b2>
 80045f8:	2300      	movs	r3, #0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d003      	beq.n	8004606 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004604:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	695b      	ldr	r3, [r3, #20]
 8004614:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	f023 0307 	bic.w	r3, r3, #7
 800461c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	4313      	orrs	r3, r2
 8004626:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462c:	2b04      	cmp	r3, #4
 800462e:	d117      	bne.n	8004660 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004634:	697a      	ldr	r2, [r7, #20]
 8004636:	4313      	orrs	r3, r2
 8004638:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00e      	beq.n	8004660 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f002 fbe2 	bl	8006e0c <DMA_CheckFifoParam>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d008      	beq.n	8004660 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2240      	movs	r2, #64	; 0x40
 8004652:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e1ff      	b.n	8004a60 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f002 fb1d 	bl	8006ca8 <DMA_CalcBaseAndBitshift>
 800466e:	4603      	mov	r3, r0
 8004670:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004676:	f003 031f 	and.w	r3, r3, #31
 800467a:	223f      	movs	r2, #63	; 0x3f
 800467c:	409a      	lsls	r2, r3
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	609a      	str	r2, [r3, #8]
 8004682:	e0fe      	b.n	8004882 <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a28      	ldr	r2, [pc, #160]	; (800472c <HAL_DMA_Init+0x3e4>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d04a      	beq.n	8004724 <HAL_DMA_Init+0x3dc>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a27      	ldr	r2, [pc, #156]	; (8004730 <HAL_DMA_Init+0x3e8>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d045      	beq.n	8004724 <HAL_DMA_Init+0x3dc>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a25      	ldr	r2, [pc, #148]	; (8004734 <HAL_DMA_Init+0x3ec>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d040      	beq.n	8004724 <HAL_DMA_Init+0x3dc>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a24      	ldr	r2, [pc, #144]	; (8004738 <HAL_DMA_Init+0x3f0>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d03b      	beq.n	8004724 <HAL_DMA_Init+0x3dc>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a22      	ldr	r2, [pc, #136]	; (800473c <HAL_DMA_Init+0x3f4>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d036      	beq.n	8004724 <HAL_DMA_Init+0x3dc>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a21      	ldr	r2, [pc, #132]	; (8004740 <HAL_DMA_Init+0x3f8>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d031      	beq.n	8004724 <HAL_DMA_Init+0x3dc>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a1f      	ldr	r2, [pc, #124]	; (8004744 <HAL_DMA_Init+0x3fc>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d02c      	beq.n	8004724 <HAL_DMA_Init+0x3dc>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a1e      	ldr	r2, [pc, #120]	; (8004748 <HAL_DMA_Init+0x400>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d027      	beq.n	8004724 <HAL_DMA_Init+0x3dc>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a1c      	ldr	r2, [pc, #112]	; (800474c <HAL_DMA_Init+0x404>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d022      	beq.n	8004724 <HAL_DMA_Init+0x3dc>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a1b      	ldr	r2, [pc, #108]	; (8004750 <HAL_DMA_Init+0x408>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d01d      	beq.n	8004724 <HAL_DMA_Init+0x3dc>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a19      	ldr	r2, [pc, #100]	; (8004754 <HAL_DMA_Init+0x40c>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d018      	beq.n	8004724 <HAL_DMA_Init+0x3dc>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a18      	ldr	r2, [pc, #96]	; (8004758 <HAL_DMA_Init+0x410>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d013      	beq.n	8004724 <HAL_DMA_Init+0x3dc>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a16      	ldr	r2, [pc, #88]	; (800475c <HAL_DMA_Init+0x414>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d00e      	beq.n	8004724 <HAL_DMA_Init+0x3dc>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a15      	ldr	r2, [pc, #84]	; (8004760 <HAL_DMA_Init+0x418>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d009      	beq.n	8004724 <HAL_DMA_Init+0x3dc>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a13      	ldr	r2, [pc, #76]	; (8004764 <HAL_DMA_Init+0x41c>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d004      	beq.n	8004724 <HAL_DMA_Init+0x3dc>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a12      	ldr	r2, [pc, #72]	; (8004768 <HAL_DMA_Init+0x420>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d123      	bne.n	800476c <HAL_DMA_Init+0x424>
 8004724:	2301      	movs	r3, #1
 8004726:	e022      	b.n	800476e <HAL_DMA_Init+0x426>
 8004728:	fe10803f 	.word	0xfe10803f
 800472c:	48022c08 	.word	0x48022c08
 8004730:	48022c1c 	.word	0x48022c1c
 8004734:	48022c30 	.word	0x48022c30
 8004738:	48022c44 	.word	0x48022c44
 800473c:	48022c58 	.word	0x48022c58
 8004740:	48022c6c 	.word	0x48022c6c
 8004744:	48022c80 	.word	0x48022c80
 8004748:	48022c94 	.word	0x48022c94
 800474c:	58025408 	.word	0x58025408
 8004750:	5802541c 	.word	0x5802541c
 8004754:	58025430 	.word	0x58025430
 8004758:	58025444 	.word	0x58025444
 800475c:	58025458 	.word	0x58025458
 8004760:	5802546c 	.word	0x5802546c
 8004764:	58025480 	.word	0x58025480
 8004768:	58025494 	.word	0x58025494
 800476c:	2300      	movs	r3, #0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d07e      	beq.n	8004870 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a80      	ldr	r2, [pc, #512]	; (8004978 <HAL_DMA_Init+0x630>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d021      	beq.n	80047c0 <HAL_DMA_Init+0x478>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a7e      	ldr	r2, [pc, #504]	; (800497c <HAL_DMA_Init+0x634>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d01c      	beq.n	80047c0 <HAL_DMA_Init+0x478>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a7d      	ldr	r2, [pc, #500]	; (8004980 <HAL_DMA_Init+0x638>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d017      	beq.n	80047c0 <HAL_DMA_Init+0x478>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a7b      	ldr	r2, [pc, #492]	; (8004984 <HAL_DMA_Init+0x63c>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d012      	beq.n	80047c0 <HAL_DMA_Init+0x478>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a7a      	ldr	r2, [pc, #488]	; (8004988 <HAL_DMA_Init+0x640>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d00d      	beq.n	80047c0 <HAL_DMA_Init+0x478>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a78      	ldr	r2, [pc, #480]	; (800498c <HAL_DMA_Init+0x644>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d008      	beq.n	80047c0 <HAL_DMA_Init+0x478>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a77      	ldr	r2, [pc, #476]	; (8004990 <HAL_DMA_Init+0x648>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d003      	beq.n	80047c0 <HAL_DMA_Init+0x478>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a75      	ldr	r2, [pc, #468]	; (8004994 <HAL_DMA_Init+0x64c>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2202      	movs	r2, #2
 80047c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	4b6e      	ldr	r3, [pc, #440]	; (8004998 <HAL_DMA_Init+0x650>)
 80047de:	4013      	ands	r3, r2
 80047e0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	2b40      	cmp	r3, #64	; 0x40
 80047e8:	d008      	beq.n	80047fc <HAL_DMA_Init+0x4b4>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	2b80      	cmp	r3, #128	; 0x80
 80047f0:	d102      	bne.n	80047f8 <HAL_DMA_Init+0x4b0>
 80047f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80047f6:	e002      	b.n	80047fe <HAL_DMA_Init+0x4b6>
 80047f8:	2300      	movs	r3, #0
 80047fa:	e000      	b.n	80047fe <HAL_DMA_Init+0x4b6>
 80047fc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	68d2      	ldr	r2, [r2, #12]
 8004802:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004804:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800480c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004814:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800481c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	69db      	ldr	r3, [r3, #28]
 8004822:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004824:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a1b      	ldr	r3, [r3, #32]
 800482a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800482c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	4313      	orrs	r3, r2
 8004832:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	461a      	mov	r2, r3
 8004842:	4b56      	ldr	r3, [pc, #344]	; (800499c <HAL_DMA_Init+0x654>)
 8004844:	4413      	add	r3, r2
 8004846:	4a56      	ldr	r2, [pc, #344]	; (80049a0 <HAL_DMA_Init+0x658>)
 8004848:	fba2 2303 	umull	r2, r3, r2, r3
 800484c:	091b      	lsrs	r3, r3, #4
 800484e:	009a      	lsls	r2, r3, #2
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f002 fa27 	bl	8006ca8 <DMA_CalcBaseAndBitshift>
 800485a:	4603      	mov	r3, r0
 800485c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004862:	f003 031f 	and.w	r3, r3, #31
 8004866:	2201      	movs	r2, #1
 8004868:	409a      	lsls	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	605a      	str	r2, [r3, #4]
 800486e:	e008      	b.n	8004882 <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2240      	movs	r2, #64	; 0x40
 8004874:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2203      	movs	r2, #3
 800487a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e0ee      	b.n	8004a60 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a47      	ldr	r2, [pc, #284]	; (80049a4 <HAL_DMA_Init+0x65c>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d072      	beq.n	8004972 <HAL_DMA_Init+0x62a>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a45      	ldr	r2, [pc, #276]	; (80049a8 <HAL_DMA_Init+0x660>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d06d      	beq.n	8004972 <HAL_DMA_Init+0x62a>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a44      	ldr	r2, [pc, #272]	; (80049ac <HAL_DMA_Init+0x664>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d068      	beq.n	8004972 <HAL_DMA_Init+0x62a>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a42      	ldr	r2, [pc, #264]	; (80049b0 <HAL_DMA_Init+0x668>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d063      	beq.n	8004972 <HAL_DMA_Init+0x62a>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a41      	ldr	r2, [pc, #260]	; (80049b4 <HAL_DMA_Init+0x66c>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d05e      	beq.n	8004972 <HAL_DMA_Init+0x62a>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a3f      	ldr	r2, [pc, #252]	; (80049b8 <HAL_DMA_Init+0x670>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d059      	beq.n	8004972 <HAL_DMA_Init+0x62a>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a3e      	ldr	r2, [pc, #248]	; (80049bc <HAL_DMA_Init+0x674>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d054      	beq.n	8004972 <HAL_DMA_Init+0x62a>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a3c      	ldr	r2, [pc, #240]	; (80049c0 <HAL_DMA_Init+0x678>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d04f      	beq.n	8004972 <HAL_DMA_Init+0x62a>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a3b      	ldr	r2, [pc, #236]	; (80049c4 <HAL_DMA_Init+0x67c>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d04a      	beq.n	8004972 <HAL_DMA_Init+0x62a>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a39      	ldr	r2, [pc, #228]	; (80049c8 <HAL_DMA_Init+0x680>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d045      	beq.n	8004972 <HAL_DMA_Init+0x62a>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a38      	ldr	r2, [pc, #224]	; (80049cc <HAL_DMA_Init+0x684>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d040      	beq.n	8004972 <HAL_DMA_Init+0x62a>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a36      	ldr	r2, [pc, #216]	; (80049d0 <HAL_DMA_Init+0x688>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d03b      	beq.n	8004972 <HAL_DMA_Init+0x62a>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a35      	ldr	r2, [pc, #212]	; (80049d4 <HAL_DMA_Init+0x68c>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d036      	beq.n	8004972 <HAL_DMA_Init+0x62a>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a33      	ldr	r2, [pc, #204]	; (80049d8 <HAL_DMA_Init+0x690>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d031      	beq.n	8004972 <HAL_DMA_Init+0x62a>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a32      	ldr	r2, [pc, #200]	; (80049dc <HAL_DMA_Init+0x694>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d02c      	beq.n	8004972 <HAL_DMA_Init+0x62a>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a30      	ldr	r2, [pc, #192]	; (80049e0 <HAL_DMA_Init+0x698>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d027      	beq.n	8004972 <HAL_DMA_Init+0x62a>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a14      	ldr	r2, [pc, #80]	; (8004978 <HAL_DMA_Init+0x630>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d022      	beq.n	8004972 <HAL_DMA_Init+0x62a>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a12      	ldr	r2, [pc, #72]	; (800497c <HAL_DMA_Init+0x634>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d01d      	beq.n	8004972 <HAL_DMA_Init+0x62a>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a11      	ldr	r2, [pc, #68]	; (8004980 <HAL_DMA_Init+0x638>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d018      	beq.n	8004972 <HAL_DMA_Init+0x62a>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a0f      	ldr	r2, [pc, #60]	; (8004984 <HAL_DMA_Init+0x63c>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d013      	beq.n	8004972 <HAL_DMA_Init+0x62a>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a0e      	ldr	r2, [pc, #56]	; (8004988 <HAL_DMA_Init+0x640>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d00e      	beq.n	8004972 <HAL_DMA_Init+0x62a>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a0c      	ldr	r2, [pc, #48]	; (800498c <HAL_DMA_Init+0x644>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d009      	beq.n	8004972 <HAL_DMA_Init+0x62a>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a0b      	ldr	r2, [pc, #44]	; (8004990 <HAL_DMA_Init+0x648>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d004      	beq.n	8004972 <HAL_DMA_Init+0x62a>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a09      	ldr	r2, [pc, #36]	; (8004994 <HAL_DMA_Init+0x64c>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d138      	bne.n	80049e4 <HAL_DMA_Init+0x69c>
 8004972:	2301      	movs	r3, #1
 8004974:	e037      	b.n	80049e6 <HAL_DMA_Init+0x69e>
 8004976:	bf00      	nop
 8004978:	58025408 	.word	0x58025408
 800497c:	5802541c 	.word	0x5802541c
 8004980:	58025430 	.word	0x58025430
 8004984:	58025444 	.word	0x58025444
 8004988:	58025458 	.word	0x58025458
 800498c:	5802546c 	.word	0x5802546c
 8004990:	58025480 	.word	0x58025480
 8004994:	58025494 	.word	0x58025494
 8004998:	fffe000f 	.word	0xfffe000f
 800499c:	a7fdabf8 	.word	0xa7fdabf8
 80049a0:	cccccccd 	.word	0xcccccccd
 80049a4:	40020010 	.word	0x40020010
 80049a8:	40020028 	.word	0x40020028
 80049ac:	40020040 	.word	0x40020040
 80049b0:	40020058 	.word	0x40020058
 80049b4:	40020070 	.word	0x40020070
 80049b8:	40020088 	.word	0x40020088
 80049bc:	400200a0 	.word	0x400200a0
 80049c0:	400200b8 	.word	0x400200b8
 80049c4:	40020410 	.word	0x40020410
 80049c8:	40020428 	.word	0x40020428
 80049cc:	40020440 	.word	0x40020440
 80049d0:	40020458 	.word	0x40020458
 80049d4:	40020470 	.word	0x40020470
 80049d8:	40020488 	.word	0x40020488
 80049dc:	400204a0 	.word	0x400204a0
 80049e0:	400204b8 	.word	0x400204b8
 80049e4:	2300      	movs	r3, #0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d032      	beq.n	8004a50 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f002 fa8a 	bl	8006f04 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	2b80      	cmp	r3, #128	; 0x80
 80049f6:	d102      	bne.n	80049fe <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685a      	ldr	r2, [r3, #4]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a06:	b2d2      	uxtb	r2, r2
 8004a08:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004a12:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d010      	beq.n	8004a3e <HAL_DMA_Init+0x6f6>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	2b08      	cmp	r3, #8
 8004a22:	d80c      	bhi.n	8004a3e <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f002 fb07 	bl	8007038 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a2e:	2200      	movs	r2, #0
 8004a30:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004a3a:	605a      	str	r2, [r3, #4]
 8004a3c:	e008      	b.n	8004a50 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3718      	adds	r7, #24
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b086      	sub	sp, #24
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
 8004a74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a76:	2300      	movs	r3, #0
 8004a78:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d101      	bne.n	8004a84 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e226      	b.n	8004ed2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d101      	bne.n	8004a92 <HAL_DMA_Start_IT+0x2a>
 8004a8e:	2302      	movs	r3, #2
 8004a90:	e21f      	b.n	8004ed2 <HAL_DMA_Start_IT+0x46a>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	f040 820a 	bne.w	8004ebc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2202      	movs	r2, #2
 8004aac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a68      	ldr	r2, [pc, #416]	; (8004c5c <HAL_DMA_Start_IT+0x1f4>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d04a      	beq.n	8004b56 <HAL_DMA_Start_IT+0xee>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a66      	ldr	r2, [pc, #408]	; (8004c60 <HAL_DMA_Start_IT+0x1f8>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d045      	beq.n	8004b56 <HAL_DMA_Start_IT+0xee>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a65      	ldr	r2, [pc, #404]	; (8004c64 <HAL_DMA_Start_IT+0x1fc>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d040      	beq.n	8004b56 <HAL_DMA_Start_IT+0xee>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a63      	ldr	r2, [pc, #396]	; (8004c68 <HAL_DMA_Start_IT+0x200>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d03b      	beq.n	8004b56 <HAL_DMA_Start_IT+0xee>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a62      	ldr	r2, [pc, #392]	; (8004c6c <HAL_DMA_Start_IT+0x204>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d036      	beq.n	8004b56 <HAL_DMA_Start_IT+0xee>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a60      	ldr	r2, [pc, #384]	; (8004c70 <HAL_DMA_Start_IT+0x208>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d031      	beq.n	8004b56 <HAL_DMA_Start_IT+0xee>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a5f      	ldr	r2, [pc, #380]	; (8004c74 <HAL_DMA_Start_IT+0x20c>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d02c      	beq.n	8004b56 <HAL_DMA_Start_IT+0xee>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a5d      	ldr	r2, [pc, #372]	; (8004c78 <HAL_DMA_Start_IT+0x210>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d027      	beq.n	8004b56 <HAL_DMA_Start_IT+0xee>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a5c      	ldr	r2, [pc, #368]	; (8004c7c <HAL_DMA_Start_IT+0x214>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d022      	beq.n	8004b56 <HAL_DMA_Start_IT+0xee>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a5a      	ldr	r2, [pc, #360]	; (8004c80 <HAL_DMA_Start_IT+0x218>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d01d      	beq.n	8004b56 <HAL_DMA_Start_IT+0xee>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a59      	ldr	r2, [pc, #356]	; (8004c84 <HAL_DMA_Start_IT+0x21c>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d018      	beq.n	8004b56 <HAL_DMA_Start_IT+0xee>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a57      	ldr	r2, [pc, #348]	; (8004c88 <HAL_DMA_Start_IT+0x220>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d013      	beq.n	8004b56 <HAL_DMA_Start_IT+0xee>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a56      	ldr	r2, [pc, #344]	; (8004c8c <HAL_DMA_Start_IT+0x224>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d00e      	beq.n	8004b56 <HAL_DMA_Start_IT+0xee>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a54      	ldr	r2, [pc, #336]	; (8004c90 <HAL_DMA_Start_IT+0x228>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d009      	beq.n	8004b56 <HAL_DMA_Start_IT+0xee>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a53      	ldr	r2, [pc, #332]	; (8004c94 <HAL_DMA_Start_IT+0x22c>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d004      	beq.n	8004b56 <HAL_DMA_Start_IT+0xee>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a51      	ldr	r2, [pc, #324]	; (8004c98 <HAL_DMA_Start_IT+0x230>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d108      	bne.n	8004b68 <HAL_DMA_Start_IT+0x100>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f022 0201 	bic.w	r2, r2, #1
 8004b64:	601a      	str	r2, [r3, #0]
 8004b66:	e007      	b.n	8004b78 <HAL_DMA_Start_IT+0x110>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f022 0201 	bic.w	r2, r2, #1
 8004b76:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	68b9      	ldr	r1, [r7, #8]
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	f001 feae 	bl	80068e0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a34      	ldr	r2, [pc, #208]	; (8004c5c <HAL_DMA_Start_IT+0x1f4>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d04a      	beq.n	8004c24 <HAL_DMA_Start_IT+0x1bc>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a33      	ldr	r2, [pc, #204]	; (8004c60 <HAL_DMA_Start_IT+0x1f8>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d045      	beq.n	8004c24 <HAL_DMA_Start_IT+0x1bc>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a31      	ldr	r2, [pc, #196]	; (8004c64 <HAL_DMA_Start_IT+0x1fc>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d040      	beq.n	8004c24 <HAL_DMA_Start_IT+0x1bc>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a30      	ldr	r2, [pc, #192]	; (8004c68 <HAL_DMA_Start_IT+0x200>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d03b      	beq.n	8004c24 <HAL_DMA_Start_IT+0x1bc>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a2e      	ldr	r2, [pc, #184]	; (8004c6c <HAL_DMA_Start_IT+0x204>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d036      	beq.n	8004c24 <HAL_DMA_Start_IT+0x1bc>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a2d      	ldr	r2, [pc, #180]	; (8004c70 <HAL_DMA_Start_IT+0x208>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d031      	beq.n	8004c24 <HAL_DMA_Start_IT+0x1bc>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a2b      	ldr	r2, [pc, #172]	; (8004c74 <HAL_DMA_Start_IT+0x20c>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d02c      	beq.n	8004c24 <HAL_DMA_Start_IT+0x1bc>
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a2a      	ldr	r2, [pc, #168]	; (8004c78 <HAL_DMA_Start_IT+0x210>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d027      	beq.n	8004c24 <HAL_DMA_Start_IT+0x1bc>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a28      	ldr	r2, [pc, #160]	; (8004c7c <HAL_DMA_Start_IT+0x214>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d022      	beq.n	8004c24 <HAL_DMA_Start_IT+0x1bc>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a27      	ldr	r2, [pc, #156]	; (8004c80 <HAL_DMA_Start_IT+0x218>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d01d      	beq.n	8004c24 <HAL_DMA_Start_IT+0x1bc>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a25      	ldr	r2, [pc, #148]	; (8004c84 <HAL_DMA_Start_IT+0x21c>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d018      	beq.n	8004c24 <HAL_DMA_Start_IT+0x1bc>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a24      	ldr	r2, [pc, #144]	; (8004c88 <HAL_DMA_Start_IT+0x220>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d013      	beq.n	8004c24 <HAL_DMA_Start_IT+0x1bc>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a22      	ldr	r2, [pc, #136]	; (8004c8c <HAL_DMA_Start_IT+0x224>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d00e      	beq.n	8004c24 <HAL_DMA_Start_IT+0x1bc>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a21      	ldr	r2, [pc, #132]	; (8004c90 <HAL_DMA_Start_IT+0x228>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d009      	beq.n	8004c24 <HAL_DMA_Start_IT+0x1bc>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a1f      	ldr	r2, [pc, #124]	; (8004c94 <HAL_DMA_Start_IT+0x22c>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d004      	beq.n	8004c24 <HAL_DMA_Start_IT+0x1bc>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a1e      	ldr	r2, [pc, #120]	; (8004c98 <HAL_DMA_Start_IT+0x230>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d101      	bne.n	8004c28 <HAL_DMA_Start_IT+0x1c0>
 8004c24:	2301      	movs	r3, #1
 8004c26:	e000      	b.n	8004c2a <HAL_DMA_Start_IT+0x1c2>
 8004c28:	2300      	movs	r3, #0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d036      	beq.n	8004c9c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f023 021e 	bic.w	r2, r3, #30
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f042 0216 	orr.w	r2, r2, #22
 8004c40:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d03e      	beq.n	8004cc8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f042 0208 	orr.w	r2, r2, #8
 8004c58:	601a      	str	r2, [r3, #0]
 8004c5a:	e035      	b.n	8004cc8 <HAL_DMA_Start_IT+0x260>
 8004c5c:	40020010 	.word	0x40020010
 8004c60:	40020028 	.word	0x40020028
 8004c64:	40020040 	.word	0x40020040
 8004c68:	40020058 	.word	0x40020058
 8004c6c:	40020070 	.word	0x40020070
 8004c70:	40020088 	.word	0x40020088
 8004c74:	400200a0 	.word	0x400200a0
 8004c78:	400200b8 	.word	0x400200b8
 8004c7c:	40020410 	.word	0x40020410
 8004c80:	40020428 	.word	0x40020428
 8004c84:	40020440 	.word	0x40020440
 8004c88:	40020458 	.word	0x40020458
 8004c8c:	40020470 	.word	0x40020470
 8004c90:	40020488 	.word	0x40020488
 8004c94:	400204a0 	.word	0x400204a0
 8004c98:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f023 020e 	bic.w	r2, r3, #14
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f042 020a 	orr.w	r2, r2, #10
 8004cae:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d007      	beq.n	8004cc8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f042 0204 	orr.w	r2, r2, #4
 8004cc6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a83      	ldr	r2, [pc, #524]	; (8004edc <HAL_DMA_Start_IT+0x474>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d072      	beq.n	8004db8 <HAL_DMA_Start_IT+0x350>
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a82      	ldr	r2, [pc, #520]	; (8004ee0 <HAL_DMA_Start_IT+0x478>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d06d      	beq.n	8004db8 <HAL_DMA_Start_IT+0x350>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a80      	ldr	r2, [pc, #512]	; (8004ee4 <HAL_DMA_Start_IT+0x47c>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d068      	beq.n	8004db8 <HAL_DMA_Start_IT+0x350>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a7f      	ldr	r2, [pc, #508]	; (8004ee8 <HAL_DMA_Start_IT+0x480>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d063      	beq.n	8004db8 <HAL_DMA_Start_IT+0x350>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a7d      	ldr	r2, [pc, #500]	; (8004eec <HAL_DMA_Start_IT+0x484>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d05e      	beq.n	8004db8 <HAL_DMA_Start_IT+0x350>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a7c      	ldr	r2, [pc, #496]	; (8004ef0 <HAL_DMA_Start_IT+0x488>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d059      	beq.n	8004db8 <HAL_DMA_Start_IT+0x350>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a7a      	ldr	r2, [pc, #488]	; (8004ef4 <HAL_DMA_Start_IT+0x48c>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d054      	beq.n	8004db8 <HAL_DMA_Start_IT+0x350>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a79      	ldr	r2, [pc, #484]	; (8004ef8 <HAL_DMA_Start_IT+0x490>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d04f      	beq.n	8004db8 <HAL_DMA_Start_IT+0x350>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a77      	ldr	r2, [pc, #476]	; (8004efc <HAL_DMA_Start_IT+0x494>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d04a      	beq.n	8004db8 <HAL_DMA_Start_IT+0x350>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a76      	ldr	r2, [pc, #472]	; (8004f00 <HAL_DMA_Start_IT+0x498>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d045      	beq.n	8004db8 <HAL_DMA_Start_IT+0x350>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a74      	ldr	r2, [pc, #464]	; (8004f04 <HAL_DMA_Start_IT+0x49c>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d040      	beq.n	8004db8 <HAL_DMA_Start_IT+0x350>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a73      	ldr	r2, [pc, #460]	; (8004f08 <HAL_DMA_Start_IT+0x4a0>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d03b      	beq.n	8004db8 <HAL_DMA_Start_IT+0x350>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a71      	ldr	r2, [pc, #452]	; (8004f0c <HAL_DMA_Start_IT+0x4a4>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d036      	beq.n	8004db8 <HAL_DMA_Start_IT+0x350>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a70      	ldr	r2, [pc, #448]	; (8004f10 <HAL_DMA_Start_IT+0x4a8>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d031      	beq.n	8004db8 <HAL_DMA_Start_IT+0x350>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a6e      	ldr	r2, [pc, #440]	; (8004f14 <HAL_DMA_Start_IT+0x4ac>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d02c      	beq.n	8004db8 <HAL_DMA_Start_IT+0x350>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a6d      	ldr	r2, [pc, #436]	; (8004f18 <HAL_DMA_Start_IT+0x4b0>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d027      	beq.n	8004db8 <HAL_DMA_Start_IT+0x350>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a6b      	ldr	r2, [pc, #428]	; (8004f1c <HAL_DMA_Start_IT+0x4b4>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d022      	beq.n	8004db8 <HAL_DMA_Start_IT+0x350>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a6a      	ldr	r2, [pc, #424]	; (8004f20 <HAL_DMA_Start_IT+0x4b8>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d01d      	beq.n	8004db8 <HAL_DMA_Start_IT+0x350>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a68      	ldr	r2, [pc, #416]	; (8004f24 <HAL_DMA_Start_IT+0x4bc>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d018      	beq.n	8004db8 <HAL_DMA_Start_IT+0x350>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a67      	ldr	r2, [pc, #412]	; (8004f28 <HAL_DMA_Start_IT+0x4c0>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d013      	beq.n	8004db8 <HAL_DMA_Start_IT+0x350>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a65      	ldr	r2, [pc, #404]	; (8004f2c <HAL_DMA_Start_IT+0x4c4>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d00e      	beq.n	8004db8 <HAL_DMA_Start_IT+0x350>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a64      	ldr	r2, [pc, #400]	; (8004f30 <HAL_DMA_Start_IT+0x4c8>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d009      	beq.n	8004db8 <HAL_DMA_Start_IT+0x350>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a62      	ldr	r2, [pc, #392]	; (8004f34 <HAL_DMA_Start_IT+0x4cc>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d004      	beq.n	8004db8 <HAL_DMA_Start_IT+0x350>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a61      	ldr	r2, [pc, #388]	; (8004f38 <HAL_DMA_Start_IT+0x4d0>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d101      	bne.n	8004dbc <HAL_DMA_Start_IT+0x354>
 8004db8:	2301      	movs	r3, #1
 8004dba:	e000      	b.n	8004dbe <HAL_DMA_Start_IT+0x356>
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d01a      	beq.n	8004df8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d007      	beq.n	8004de0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dde:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d007      	beq.n	8004df8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004df2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004df6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a37      	ldr	r2, [pc, #220]	; (8004edc <HAL_DMA_Start_IT+0x474>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d04a      	beq.n	8004e98 <HAL_DMA_Start_IT+0x430>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a36      	ldr	r2, [pc, #216]	; (8004ee0 <HAL_DMA_Start_IT+0x478>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d045      	beq.n	8004e98 <HAL_DMA_Start_IT+0x430>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a34      	ldr	r2, [pc, #208]	; (8004ee4 <HAL_DMA_Start_IT+0x47c>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d040      	beq.n	8004e98 <HAL_DMA_Start_IT+0x430>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a33      	ldr	r2, [pc, #204]	; (8004ee8 <HAL_DMA_Start_IT+0x480>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d03b      	beq.n	8004e98 <HAL_DMA_Start_IT+0x430>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a31      	ldr	r2, [pc, #196]	; (8004eec <HAL_DMA_Start_IT+0x484>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d036      	beq.n	8004e98 <HAL_DMA_Start_IT+0x430>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a30      	ldr	r2, [pc, #192]	; (8004ef0 <HAL_DMA_Start_IT+0x488>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d031      	beq.n	8004e98 <HAL_DMA_Start_IT+0x430>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a2e      	ldr	r2, [pc, #184]	; (8004ef4 <HAL_DMA_Start_IT+0x48c>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d02c      	beq.n	8004e98 <HAL_DMA_Start_IT+0x430>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a2d      	ldr	r2, [pc, #180]	; (8004ef8 <HAL_DMA_Start_IT+0x490>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d027      	beq.n	8004e98 <HAL_DMA_Start_IT+0x430>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a2b      	ldr	r2, [pc, #172]	; (8004efc <HAL_DMA_Start_IT+0x494>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d022      	beq.n	8004e98 <HAL_DMA_Start_IT+0x430>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a2a      	ldr	r2, [pc, #168]	; (8004f00 <HAL_DMA_Start_IT+0x498>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d01d      	beq.n	8004e98 <HAL_DMA_Start_IT+0x430>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a28      	ldr	r2, [pc, #160]	; (8004f04 <HAL_DMA_Start_IT+0x49c>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d018      	beq.n	8004e98 <HAL_DMA_Start_IT+0x430>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a27      	ldr	r2, [pc, #156]	; (8004f08 <HAL_DMA_Start_IT+0x4a0>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d013      	beq.n	8004e98 <HAL_DMA_Start_IT+0x430>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a25      	ldr	r2, [pc, #148]	; (8004f0c <HAL_DMA_Start_IT+0x4a4>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d00e      	beq.n	8004e98 <HAL_DMA_Start_IT+0x430>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a24      	ldr	r2, [pc, #144]	; (8004f10 <HAL_DMA_Start_IT+0x4a8>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d009      	beq.n	8004e98 <HAL_DMA_Start_IT+0x430>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a22      	ldr	r2, [pc, #136]	; (8004f14 <HAL_DMA_Start_IT+0x4ac>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d004      	beq.n	8004e98 <HAL_DMA_Start_IT+0x430>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a21      	ldr	r2, [pc, #132]	; (8004f18 <HAL_DMA_Start_IT+0x4b0>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d108      	bne.n	8004eaa <HAL_DMA_Start_IT+0x442>
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f042 0201 	orr.w	r2, r2, #1
 8004ea6:	601a      	str	r2, [r3, #0]
 8004ea8:	e012      	b.n	8004ed0 <HAL_DMA_Start_IT+0x468>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f042 0201 	orr.w	r2, r2, #1
 8004eb8:	601a      	str	r2, [r3, #0]
 8004eba:	e009      	b.n	8004ed0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ec2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004ed0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3718      	adds	r7, #24
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	40020010 	.word	0x40020010
 8004ee0:	40020028 	.word	0x40020028
 8004ee4:	40020040 	.word	0x40020040
 8004ee8:	40020058 	.word	0x40020058
 8004eec:	40020070 	.word	0x40020070
 8004ef0:	40020088 	.word	0x40020088
 8004ef4:	400200a0 	.word	0x400200a0
 8004ef8:	400200b8 	.word	0x400200b8
 8004efc:	40020410 	.word	0x40020410
 8004f00:	40020428 	.word	0x40020428
 8004f04:	40020440 	.word	0x40020440
 8004f08:	40020458 	.word	0x40020458
 8004f0c:	40020470 	.word	0x40020470
 8004f10:	40020488 	.word	0x40020488
 8004f14:	400204a0 	.word	0x400204a0
 8004f18:	400204b8 	.word	0x400204b8
 8004f1c:	58025408 	.word	0x58025408
 8004f20:	5802541c 	.word	0x5802541c
 8004f24:	58025430 	.word	0x58025430
 8004f28:	58025444 	.word	0x58025444
 8004f2c:	58025458 	.word	0x58025458
 8004f30:	5802546c 	.word	0x5802546c
 8004f34:	58025480 	.word	0x58025480
 8004f38:	58025494 	.word	0x58025494

08004f3c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b086      	sub	sp, #24
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004f44:	f7fd faf4 	bl	8002530 <HAL_GetTick>
 8004f48:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d101      	bne.n	8004f54 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e2dc      	b.n	800550e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d008      	beq.n	8004f72 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2280      	movs	r2, #128	; 0x80
 8004f64:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e2cd      	b.n	800550e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a76      	ldr	r2, [pc, #472]	; (8005150 <HAL_DMA_Abort+0x214>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d04a      	beq.n	8005012 <HAL_DMA_Abort+0xd6>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a74      	ldr	r2, [pc, #464]	; (8005154 <HAL_DMA_Abort+0x218>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d045      	beq.n	8005012 <HAL_DMA_Abort+0xd6>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a73      	ldr	r2, [pc, #460]	; (8005158 <HAL_DMA_Abort+0x21c>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d040      	beq.n	8005012 <HAL_DMA_Abort+0xd6>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a71      	ldr	r2, [pc, #452]	; (800515c <HAL_DMA_Abort+0x220>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d03b      	beq.n	8005012 <HAL_DMA_Abort+0xd6>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a70      	ldr	r2, [pc, #448]	; (8005160 <HAL_DMA_Abort+0x224>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d036      	beq.n	8005012 <HAL_DMA_Abort+0xd6>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a6e      	ldr	r2, [pc, #440]	; (8005164 <HAL_DMA_Abort+0x228>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d031      	beq.n	8005012 <HAL_DMA_Abort+0xd6>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a6d      	ldr	r2, [pc, #436]	; (8005168 <HAL_DMA_Abort+0x22c>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d02c      	beq.n	8005012 <HAL_DMA_Abort+0xd6>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a6b      	ldr	r2, [pc, #428]	; (800516c <HAL_DMA_Abort+0x230>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d027      	beq.n	8005012 <HAL_DMA_Abort+0xd6>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a6a      	ldr	r2, [pc, #424]	; (8005170 <HAL_DMA_Abort+0x234>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d022      	beq.n	8005012 <HAL_DMA_Abort+0xd6>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a68      	ldr	r2, [pc, #416]	; (8005174 <HAL_DMA_Abort+0x238>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d01d      	beq.n	8005012 <HAL_DMA_Abort+0xd6>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a67      	ldr	r2, [pc, #412]	; (8005178 <HAL_DMA_Abort+0x23c>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d018      	beq.n	8005012 <HAL_DMA_Abort+0xd6>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a65      	ldr	r2, [pc, #404]	; (800517c <HAL_DMA_Abort+0x240>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d013      	beq.n	8005012 <HAL_DMA_Abort+0xd6>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a64      	ldr	r2, [pc, #400]	; (8005180 <HAL_DMA_Abort+0x244>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d00e      	beq.n	8005012 <HAL_DMA_Abort+0xd6>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a62      	ldr	r2, [pc, #392]	; (8005184 <HAL_DMA_Abort+0x248>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d009      	beq.n	8005012 <HAL_DMA_Abort+0xd6>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a61      	ldr	r2, [pc, #388]	; (8005188 <HAL_DMA_Abort+0x24c>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d004      	beq.n	8005012 <HAL_DMA_Abort+0xd6>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a5f      	ldr	r2, [pc, #380]	; (800518c <HAL_DMA_Abort+0x250>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d101      	bne.n	8005016 <HAL_DMA_Abort+0xda>
 8005012:	2301      	movs	r3, #1
 8005014:	e000      	b.n	8005018 <HAL_DMA_Abort+0xdc>
 8005016:	2300      	movs	r3, #0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d013      	beq.n	8005044 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f022 021e 	bic.w	r2, r2, #30
 800502a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	695a      	ldr	r2, [r3, #20]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800503a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	617b      	str	r3, [r7, #20]
 8005042:	e00a      	b.n	800505a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f022 020e 	bic.w	r2, r2, #14
 8005052:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a3c      	ldr	r2, [pc, #240]	; (8005150 <HAL_DMA_Abort+0x214>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d072      	beq.n	800514a <HAL_DMA_Abort+0x20e>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a3a      	ldr	r2, [pc, #232]	; (8005154 <HAL_DMA_Abort+0x218>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d06d      	beq.n	800514a <HAL_DMA_Abort+0x20e>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a39      	ldr	r2, [pc, #228]	; (8005158 <HAL_DMA_Abort+0x21c>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d068      	beq.n	800514a <HAL_DMA_Abort+0x20e>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a37      	ldr	r2, [pc, #220]	; (800515c <HAL_DMA_Abort+0x220>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d063      	beq.n	800514a <HAL_DMA_Abort+0x20e>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a36      	ldr	r2, [pc, #216]	; (8005160 <HAL_DMA_Abort+0x224>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d05e      	beq.n	800514a <HAL_DMA_Abort+0x20e>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a34      	ldr	r2, [pc, #208]	; (8005164 <HAL_DMA_Abort+0x228>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d059      	beq.n	800514a <HAL_DMA_Abort+0x20e>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a33      	ldr	r2, [pc, #204]	; (8005168 <HAL_DMA_Abort+0x22c>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d054      	beq.n	800514a <HAL_DMA_Abort+0x20e>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a31      	ldr	r2, [pc, #196]	; (800516c <HAL_DMA_Abort+0x230>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d04f      	beq.n	800514a <HAL_DMA_Abort+0x20e>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a30      	ldr	r2, [pc, #192]	; (8005170 <HAL_DMA_Abort+0x234>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d04a      	beq.n	800514a <HAL_DMA_Abort+0x20e>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a2e      	ldr	r2, [pc, #184]	; (8005174 <HAL_DMA_Abort+0x238>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d045      	beq.n	800514a <HAL_DMA_Abort+0x20e>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a2d      	ldr	r2, [pc, #180]	; (8005178 <HAL_DMA_Abort+0x23c>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d040      	beq.n	800514a <HAL_DMA_Abort+0x20e>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a2b      	ldr	r2, [pc, #172]	; (800517c <HAL_DMA_Abort+0x240>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d03b      	beq.n	800514a <HAL_DMA_Abort+0x20e>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a2a      	ldr	r2, [pc, #168]	; (8005180 <HAL_DMA_Abort+0x244>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d036      	beq.n	800514a <HAL_DMA_Abort+0x20e>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a28      	ldr	r2, [pc, #160]	; (8005184 <HAL_DMA_Abort+0x248>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d031      	beq.n	800514a <HAL_DMA_Abort+0x20e>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a27      	ldr	r2, [pc, #156]	; (8005188 <HAL_DMA_Abort+0x24c>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d02c      	beq.n	800514a <HAL_DMA_Abort+0x20e>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a25      	ldr	r2, [pc, #148]	; (800518c <HAL_DMA_Abort+0x250>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d027      	beq.n	800514a <HAL_DMA_Abort+0x20e>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a24      	ldr	r2, [pc, #144]	; (8005190 <HAL_DMA_Abort+0x254>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d022      	beq.n	800514a <HAL_DMA_Abort+0x20e>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a22      	ldr	r2, [pc, #136]	; (8005194 <HAL_DMA_Abort+0x258>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d01d      	beq.n	800514a <HAL_DMA_Abort+0x20e>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a21      	ldr	r2, [pc, #132]	; (8005198 <HAL_DMA_Abort+0x25c>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d018      	beq.n	800514a <HAL_DMA_Abort+0x20e>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a1f      	ldr	r2, [pc, #124]	; (800519c <HAL_DMA_Abort+0x260>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d013      	beq.n	800514a <HAL_DMA_Abort+0x20e>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a1e      	ldr	r2, [pc, #120]	; (80051a0 <HAL_DMA_Abort+0x264>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d00e      	beq.n	800514a <HAL_DMA_Abort+0x20e>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a1c      	ldr	r2, [pc, #112]	; (80051a4 <HAL_DMA_Abort+0x268>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d009      	beq.n	800514a <HAL_DMA_Abort+0x20e>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a1b      	ldr	r2, [pc, #108]	; (80051a8 <HAL_DMA_Abort+0x26c>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d004      	beq.n	800514a <HAL_DMA_Abort+0x20e>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a19      	ldr	r2, [pc, #100]	; (80051ac <HAL_DMA_Abort+0x270>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d132      	bne.n	80051b0 <HAL_DMA_Abort+0x274>
 800514a:	2301      	movs	r3, #1
 800514c:	e031      	b.n	80051b2 <HAL_DMA_Abort+0x276>
 800514e:	bf00      	nop
 8005150:	40020010 	.word	0x40020010
 8005154:	40020028 	.word	0x40020028
 8005158:	40020040 	.word	0x40020040
 800515c:	40020058 	.word	0x40020058
 8005160:	40020070 	.word	0x40020070
 8005164:	40020088 	.word	0x40020088
 8005168:	400200a0 	.word	0x400200a0
 800516c:	400200b8 	.word	0x400200b8
 8005170:	40020410 	.word	0x40020410
 8005174:	40020428 	.word	0x40020428
 8005178:	40020440 	.word	0x40020440
 800517c:	40020458 	.word	0x40020458
 8005180:	40020470 	.word	0x40020470
 8005184:	40020488 	.word	0x40020488
 8005188:	400204a0 	.word	0x400204a0
 800518c:	400204b8 	.word	0x400204b8
 8005190:	58025408 	.word	0x58025408
 8005194:	5802541c 	.word	0x5802541c
 8005198:	58025430 	.word	0x58025430
 800519c:	58025444 	.word	0x58025444
 80051a0:	58025458 	.word	0x58025458
 80051a4:	5802546c 	.word	0x5802546c
 80051a8:	58025480 	.word	0x58025480
 80051ac:	58025494 	.word	0x58025494
 80051b0:	2300      	movs	r3, #0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d007      	beq.n	80051c6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a6d      	ldr	r2, [pc, #436]	; (8005380 <HAL_DMA_Abort+0x444>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d04a      	beq.n	8005266 <HAL_DMA_Abort+0x32a>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a6b      	ldr	r2, [pc, #428]	; (8005384 <HAL_DMA_Abort+0x448>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d045      	beq.n	8005266 <HAL_DMA_Abort+0x32a>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a6a      	ldr	r2, [pc, #424]	; (8005388 <HAL_DMA_Abort+0x44c>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d040      	beq.n	8005266 <HAL_DMA_Abort+0x32a>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a68      	ldr	r2, [pc, #416]	; (800538c <HAL_DMA_Abort+0x450>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d03b      	beq.n	8005266 <HAL_DMA_Abort+0x32a>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a67      	ldr	r2, [pc, #412]	; (8005390 <HAL_DMA_Abort+0x454>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d036      	beq.n	8005266 <HAL_DMA_Abort+0x32a>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a65      	ldr	r2, [pc, #404]	; (8005394 <HAL_DMA_Abort+0x458>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d031      	beq.n	8005266 <HAL_DMA_Abort+0x32a>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a64      	ldr	r2, [pc, #400]	; (8005398 <HAL_DMA_Abort+0x45c>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d02c      	beq.n	8005266 <HAL_DMA_Abort+0x32a>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a62      	ldr	r2, [pc, #392]	; (800539c <HAL_DMA_Abort+0x460>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d027      	beq.n	8005266 <HAL_DMA_Abort+0x32a>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a61      	ldr	r2, [pc, #388]	; (80053a0 <HAL_DMA_Abort+0x464>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d022      	beq.n	8005266 <HAL_DMA_Abort+0x32a>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a5f      	ldr	r2, [pc, #380]	; (80053a4 <HAL_DMA_Abort+0x468>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d01d      	beq.n	8005266 <HAL_DMA_Abort+0x32a>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a5e      	ldr	r2, [pc, #376]	; (80053a8 <HAL_DMA_Abort+0x46c>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d018      	beq.n	8005266 <HAL_DMA_Abort+0x32a>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a5c      	ldr	r2, [pc, #368]	; (80053ac <HAL_DMA_Abort+0x470>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d013      	beq.n	8005266 <HAL_DMA_Abort+0x32a>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a5b      	ldr	r2, [pc, #364]	; (80053b0 <HAL_DMA_Abort+0x474>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d00e      	beq.n	8005266 <HAL_DMA_Abort+0x32a>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a59      	ldr	r2, [pc, #356]	; (80053b4 <HAL_DMA_Abort+0x478>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d009      	beq.n	8005266 <HAL_DMA_Abort+0x32a>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a58      	ldr	r2, [pc, #352]	; (80053b8 <HAL_DMA_Abort+0x47c>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d004      	beq.n	8005266 <HAL_DMA_Abort+0x32a>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a56      	ldr	r2, [pc, #344]	; (80053bc <HAL_DMA_Abort+0x480>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d108      	bne.n	8005278 <HAL_DMA_Abort+0x33c>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f022 0201 	bic.w	r2, r2, #1
 8005274:	601a      	str	r2, [r3, #0]
 8005276:	e007      	b.n	8005288 <HAL_DMA_Abort+0x34c>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f022 0201 	bic.w	r2, r2, #1
 8005286:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005288:	e013      	b.n	80052b2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800528a:	f7fd f951 	bl	8002530 <HAL_GetTick>
 800528e:	4602      	mov	r2, r0
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	2b05      	cmp	r3, #5
 8005296:	d90c      	bls.n	80052b2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2220      	movs	r2, #32
 800529c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2203      	movs	r2, #3
 80052a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e12d      	b.n	800550e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0301 	and.w	r3, r3, #1
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d1e5      	bne.n	800528a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a2f      	ldr	r2, [pc, #188]	; (8005380 <HAL_DMA_Abort+0x444>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d04a      	beq.n	800535e <HAL_DMA_Abort+0x422>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a2d      	ldr	r2, [pc, #180]	; (8005384 <HAL_DMA_Abort+0x448>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d045      	beq.n	800535e <HAL_DMA_Abort+0x422>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a2c      	ldr	r2, [pc, #176]	; (8005388 <HAL_DMA_Abort+0x44c>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d040      	beq.n	800535e <HAL_DMA_Abort+0x422>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a2a      	ldr	r2, [pc, #168]	; (800538c <HAL_DMA_Abort+0x450>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d03b      	beq.n	800535e <HAL_DMA_Abort+0x422>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a29      	ldr	r2, [pc, #164]	; (8005390 <HAL_DMA_Abort+0x454>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d036      	beq.n	800535e <HAL_DMA_Abort+0x422>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a27      	ldr	r2, [pc, #156]	; (8005394 <HAL_DMA_Abort+0x458>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d031      	beq.n	800535e <HAL_DMA_Abort+0x422>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a26      	ldr	r2, [pc, #152]	; (8005398 <HAL_DMA_Abort+0x45c>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d02c      	beq.n	800535e <HAL_DMA_Abort+0x422>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a24      	ldr	r2, [pc, #144]	; (800539c <HAL_DMA_Abort+0x460>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d027      	beq.n	800535e <HAL_DMA_Abort+0x422>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a23      	ldr	r2, [pc, #140]	; (80053a0 <HAL_DMA_Abort+0x464>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d022      	beq.n	800535e <HAL_DMA_Abort+0x422>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a21      	ldr	r2, [pc, #132]	; (80053a4 <HAL_DMA_Abort+0x468>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d01d      	beq.n	800535e <HAL_DMA_Abort+0x422>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a20      	ldr	r2, [pc, #128]	; (80053a8 <HAL_DMA_Abort+0x46c>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d018      	beq.n	800535e <HAL_DMA_Abort+0x422>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a1e      	ldr	r2, [pc, #120]	; (80053ac <HAL_DMA_Abort+0x470>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d013      	beq.n	800535e <HAL_DMA_Abort+0x422>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a1d      	ldr	r2, [pc, #116]	; (80053b0 <HAL_DMA_Abort+0x474>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d00e      	beq.n	800535e <HAL_DMA_Abort+0x422>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a1b      	ldr	r2, [pc, #108]	; (80053b4 <HAL_DMA_Abort+0x478>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d009      	beq.n	800535e <HAL_DMA_Abort+0x422>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a1a      	ldr	r2, [pc, #104]	; (80053b8 <HAL_DMA_Abort+0x47c>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d004      	beq.n	800535e <HAL_DMA_Abort+0x422>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a18      	ldr	r2, [pc, #96]	; (80053bc <HAL_DMA_Abort+0x480>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d101      	bne.n	8005362 <HAL_DMA_Abort+0x426>
 800535e:	2301      	movs	r3, #1
 8005360:	e000      	b.n	8005364 <HAL_DMA_Abort+0x428>
 8005362:	2300      	movs	r3, #0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d02b      	beq.n	80053c0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800536c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005372:	f003 031f 	and.w	r3, r3, #31
 8005376:	223f      	movs	r2, #63	; 0x3f
 8005378:	409a      	lsls	r2, r3
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	609a      	str	r2, [r3, #8]
 800537e:	e02a      	b.n	80053d6 <HAL_DMA_Abort+0x49a>
 8005380:	40020010 	.word	0x40020010
 8005384:	40020028 	.word	0x40020028
 8005388:	40020040 	.word	0x40020040
 800538c:	40020058 	.word	0x40020058
 8005390:	40020070 	.word	0x40020070
 8005394:	40020088 	.word	0x40020088
 8005398:	400200a0 	.word	0x400200a0
 800539c:	400200b8 	.word	0x400200b8
 80053a0:	40020410 	.word	0x40020410
 80053a4:	40020428 	.word	0x40020428
 80053a8:	40020440 	.word	0x40020440
 80053ac:	40020458 	.word	0x40020458
 80053b0:	40020470 	.word	0x40020470
 80053b4:	40020488 	.word	0x40020488
 80053b8:	400204a0 	.word	0x400204a0
 80053bc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053c4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053ca:	f003 031f 	and.w	r3, r3, #31
 80053ce:	2201      	movs	r2, #1
 80053d0:	409a      	lsls	r2, r3
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a4f      	ldr	r2, [pc, #316]	; (8005518 <HAL_DMA_Abort+0x5dc>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d072      	beq.n	80054c6 <HAL_DMA_Abort+0x58a>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a4d      	ldr	r2, [pc, #308]	; (800551c <HAL_DMA_Abort+0x5e0>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d06d      	beq.n	80054c6 <HAL_DMA_Abort+0x58a>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a4c      	ldr	r2, [pc, #304]	; (8005520 <HAL_DMA_Abort+0x5e4>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d068      	beq.n	80054c6 <HAL_DMA_Abort+0x58a>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a4a      	ldr	r2, [pc, #296]	; (8005524 <HAL_DMA_Abort+0x5e8>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d063      	beq.n	80054c6 <HAL_DMA_Abort+0x58a>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a49      	ldr	r2, [pc, #292]	; (8005528 <HAL_DMA_Abort+0x5ec>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d05e      	beq.n	80054c6 <HAL_DMA_Abort+0x58a>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a47      	ldr	r2, [pc, #284]	; (800552c <HAL_DMA_Abort+0x5f0>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d059      	beq.n	80054c6 <HAL_DMA_Abort+0x58a>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a46      	ldr	r2, [pc, #280]	; (8005530 <HAL_DMA_Abort+0x5f4>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d054      	beq.n	80054c6 <HAL_DMA_Abort+0x58a>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a44      	ldr	r2, [pc, #272]	; (8005534 <HAL_DMA_Abort+0x5f8>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d04f      	beq.n	80054c6 <HAL_DMA_Abort+0x58a>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a43      	ldr	r2, [pc, #268]	; (8005538 <HAL_DMA_Abort+0x5fc>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d04a      	beq.n	80054c6 <HAL_DMA_Abort+0x58a>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a41      	ldr	r2, [pc, #260]	; (800553c <HAL_DMA_Abort+0x600>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d045      	beq.n	80054c6 <HAL_DMA_Abort+0x58a>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a40      	ldr	r2, [pc, #256]	; (8005540 <HAL_DMA_Abort+0x604>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d040      	beq.n	80054c6 <HAL_DMA_Abort+0x58a>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a3e      	ldr	r2, [pc, #248]	; (8005544 <HAL_DMA_Abort+0x608>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d03b      	beq.n	80054c6 <HAL_DMA_Abort+0x58a>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a3d      	ldr	r2, [pc, #244]	; (8005548 <HAL_DMA_Abort+0x60c>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d036      	beq.n	80054c6 <HAL_DMA_Abort+0x58a>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a3b      	ldr	r2, [pc, #236]	; (800554c <HAL_DMA_Abort+0x610>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d031      	beq.n	80054c6 <HAL_DMA_Abort+0x58a>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a3a      	ldr	r2, [pc, #232]	; (8005550 <HAL_DMA_Abort+0x614>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d02c      	beq.n	80054c6 <HAL_DMA_Abort+0x58a>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a38      	ldr	r2, [pc, #224]	; (8005554 <HAL_DMA_Abort+0x618>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d027      	beq.n	80054c6 <HAL_DMA_Abort+0x58a>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a37      	ldr	r2, [pc, #220]	; (8005558 <HAL_DMA_Abort+0x61c>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d022      	beq.n	80054c6 <HAL_DMA_Abort+0x58a>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a35      	ldr	r2, [pc, #212]	; (800555c <HAL_DMA_Abort+0x620>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d01d      	beq.n	80054c6 <HAL_DMA_Abort+0x58a>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a34      	ldr	r2, [pc, #208]	; (8005560 <HAL_DMA_Abort+0x624>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d018      	beq.n	80054c6 <HAL_DMA_Abort+0x58a>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a32      	ldr	r2, [pc, #200]	; (8005564 <HAL_DMA_Abort+0x628>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d013      	beq.n	80054c6 <HAL_DMA_Abort+0x58a>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a31      	ldr	r2, [pc, #196]	; (8005568 <HAL_DMA_Abort+0x62c>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d00e      	beq.n	80054c6 <HAL_DMA_Abort+0x58a>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a2f      	ldr	r2, [pc, #188]	; (800556c <HAL_DMA_Abort+0x630>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d009      	beq.n	80054c6 <HAL_DMA_Abort+0x58a>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a2e      	ldr	r2, [pc, #184]	; (8005570 <HAL_DMA_Abort+0x634>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d004      	beq.n	80054c6 <HAL_DMA_Abort+0x58a>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a2c      	ldr	r2, [pc, #176]	; (8005574 <HAL_DMA_Abort+0x638>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d101      	bne.n	80054ca <HAL_DMA_Abort+0x58e>
 80054c6:	2301      	movs	r3, #1
 80054c8:	e000      	b.n	80054cc <HAL_DMA_Abort+0x590>
 80054ca:	2300      	movs	r3, #0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d015      	beq.n	80054fc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80054d8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00c      	beq.n	80054fc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054f0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80054fa:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3718      	adds	r7, #24
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	40020010 	.word	0x40020010
 800551c:	40020028 	.word	0x40020028
 8005520:	40020040 	.word	0x40020040
 8005524:	40020058 	.word	0x40020058
 8005528:	40020070 	.word	0x40020070
 800552c:	40020088 	.word	0x40020088
 8005530:	400200a0 	.word	0x400200a0
 8005534:	400200b8 	.word	0x400200b8
 8005538:	40020410 	.word	0x40020410
 800553c:	40020428 	.word	0x40020428
 8005540:	40020440 	.word	0x40020440
 8005544:	40020458 	.word	0x40020458
 8005548:	40020470 	.word	0x40020470
 800554c:	40020488 	.word	0x40020488
 8005550:	400204a0 	.word	0x400204a0
 8005554:	400204b8 	.word	0x400204b8
 8005558:	58025408 	.word	0x58025408
 800555c:	5802541c 	.word	0x5802541c
 8005560:	58025430 	.word	0x58025430
 8005564:	58025444 	.word	0x58025444
 8005568:	58025458 	.word	0x58025458
 800556c:	5802546c 	.word	0x5802546c
 8005570:	58025480 	.word	0x58025480
 8005574:	58025494 	.word	0x58025494

08005578 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d101      	bne.n	800558a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e237      	b.n	80059fa <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b02      	cmp	r3, #2
 8005594:	d004      	beq.n	80055a0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2280      	movs	r2, #128	; 0x80
 800559a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e22c      	b.n	80059fa <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a5c      	ldr	r2, [pc, #368]	; (8005718 <HAL_DMA_Abort_IT+0x1a0>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d04a      	beq.n	8005640 <HAL_DMA_Abort_IT+0xc8>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a5b      	ldr	r2, [pc, #364]	; (800571c <HAL_DMA_Abort_IT+0x1a4>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d045      	beq.n	8005640 <HAL_DMA_Abort_IT+0xc8>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a59      	ldr	r2, [pc, #356]	; (8005720 <HAL_DMA_Abort_IT+0x1a8>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d040      	beq.n	8005640 <HAL_DMA_Abort_IT+0xc8>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a58      	ldr	r2, [pc, #352]	; (8005724 <HAL_DMA_Abort_IT+0x1ac>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d03b      	beq.n	8005640 <HAL_DMA_Abort_IT+0xc8>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a56      	ldr	r2, [pc, #344]	; (8005728 <HAL_DMA_Abort_IT+0x1b0>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d036      	beq.n	8005640 <HAL_DMA_Abort_IT+0xc8>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a55      	ldr	r2, [pc, #340]	; (800572c <HAL_DMA_Abort_IT+0x1b4>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d031      	beq.n	8005640 <HAL_DMA_Abort_IT+0xc8>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a53      	ldr	r2, [pc, #332]	; (8005730 <HAL_DMA_Abort_IT+0x1b8>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d02c      	beq.n	8005640 <HAL_DMA_Abort_IT+0xc8>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a52      	ldr	r2, [pc, #328]	; (8005734 <HAL_DMA_Abort_IT+0x1bc>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d027      	beq.n	8005640 <HAL_DMA_Abort_IT+0xc8>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a50      	ldr	r2, [pc, #320]	; (8005738 <HAL_DMA_Abort_IT+0x1c0>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d022      	beq.n	8005640 <HAL_DMA_Abort_IT+0xc8>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a4f      	ldr	r2, [pc, #316]	; (800573c <HAL_DMA_Abort_IT+0x1c4>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d01d      	beq.n	8005640 <HAL_DMA_Abort_IT+0xc8>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a4d      	ldr	r2, [pc, #308]	; (8005740 <HAL_DMA_Abort_IT+0x1c8>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d018      	beq.n	8005640 <HAL_DMA_Abort_IT+0xc8>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a4c      	ldr	r2, [pc, #304]	; (8005744 <HAL_DMA_Abort_IT+0x1cc>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d013      	beq.n	8005640 <HAL_DMA_Abort_IT+0xc8>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a4a      	ldr	r2, [pc, #296]	; (8005748 <HAL_DMA_Abort_IT+0x1d0>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d00e      	beq.n	8005640 <HAL_DMA_Abort_IT+0xc8>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a49      	ldr	r2, [pc, #292]	; (800574c <HAL_DMA_Abort_IT+0x1d4>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d009      	beq.n	8005640 <HAL_DMA_Abort_IT+0xc8>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a47      	ldr	r2, [pc, #284]	; (8005750 <HAL_DMA_Abort_IT+0x1d8>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d004      	beq.n	8005640 <HAL_DMA_Abort_IT+0xc8>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a46      	ldr	r2, [pc, #280]	; (8005754 <HAL_DMA_Abort_IT+0x1dc>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d101      	bne.n	8005644 <HAL_DMA_Abort_IT+0xcc>
 8005640:	2301      	movs	r3, #1
 8005642:	e000      	b.n	8005646 <HAL_DMA_Abort_IT+0xce>
 8005644:	2300      	movs	r3, #0
 8005646:	2b00      	cmp	r3, #0
 8005648:	f000 8086 	beq.w	8005758 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2204      	movs	r2, #4
 8005650:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a2f      	ldr	r2, [pc, #188]	; (8005718 <HAL_DMA_Abort_IT+0x1a0>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d04a      	beq.n	80056f4 <HAL_DMA_Abort_IT+0x17c>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a2e      	ldr	r2, [pc, #184]	; (800571c <HAL_DMA_Abort_IT+0x1a4>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d045      	beq.n	80056f4 <HAL_DMA_Abort_IT+0x17c>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a2c      	ldr	r2, [pc, #176]	; (8005720 <HAL_DMA_Abort_IT+0x1a8>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d040      	beq.n	80056f4 <HAL_DMA_Abort_IT+0x17c>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a2b      	ldr	r2, [pc, #172]	; (8005724 <HAL_DMA_Abort_IT+0x1ac>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d03b      	beq.n	80056f4 <HAL_DMA_Abort_IT+0x17c>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a29      	ldr	r2, [pc, #164]	; (8005728 <HAL_DMA_Abort_IT+0x1b0>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d036      	beq.n	80056f4 <HAL_DMA_Abort_IT+0x17c>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a28      	ldr	r2, [pc, #160]	; (800572c <HAL_DMA_Abort_IT+0x1b4>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d031      	beq.n	80056f4 <HAL_DMA_Abort_IT+0x17c>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a26      	ldr	r2, [pc, #152]	; (8005730 <HAL_DMA_Abort_IT+0x1b8>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d02c      	beq.n	80056f4 <HAL_DMA_Abort_IT+0x17c>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a25      	ldr	r2, [pc, #148]	; (8005734 <HAL_DMA_Abort_IT+0x1bc>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d027      	beq.n	80056f4 <HAL_DMA_Abort_IT+0x17c>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a23      	ldr	r2, [pc, #140]	; (8005738 <HAL_DMA_Abort_IT+0x1c0>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d022      	beq.n	80056f4 <HAL_DMA_Abort_IT+0x17c>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a22      	ldr	r2, [pc, #136]	; (800573c <HAL_DMA_Abort_IT+0x1c4>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d01d      	beq.n	80056f4 <HAL_DMA_Abort_IT+0x17c>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a20      	ldr	r2, [pc, #128]	; (8005740 <HAL_DMA_Abort_IT+0x1c8>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d018      	beq.n	80056f4 <HAL_DMA_Abort_IT+0x17c>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a1f      	ldr	r2, [pc, #124]	; (8005744 <HAL_DMA_Abort_IT+0x1cc>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d013      	beq.n	80056f4 <HAL_DMA_Abort_IT+0x17c>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a1d      	ldr	r2, [pc, #116]	; (8005748 <HAL_DMA_Abort_IT+0x1d0>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d00e      	beq.n	80056f4 <HAL_DMA_Abort_IT+0x17c>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a1c      	ldr	r2, [pc, #112]	; (800574c <HAL_DMA_Abort_IT+0x1d4>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d009      	beq.n	80056f4 <HAL_DMA_Abort_IT+0x17c>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a1a      	ldr	r2, [pc, #104]	; (8005750 <HAL_DMA_Abort_IT+0x1d8>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d004      	beq.n	80056f4 <HAL_DMA_Abort_IT+0x17c>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a19      	ldr	r2, [pc, #100]	; (8005754 <HAL_DMA_Abort_IT+0x1dc>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d108      	bne.n	8005706 <HAL_DMA_Abort_IT+0x18e>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f022 0201 	bic.w	r2, r2, #1
 8005702:	601a      	str	r2, [r3, #0]
 8005704:	e178      	b.n	80059f8 <HAL_DMA_Abort_IT+0x480>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f022 0201 	bic.w	r2, r2, #1
 8005714:	601a      	str	r2, [r3, #0]
 8005716:	e16f      	b.n	80059f8 <HAL_DMA_Abort_IT+0x480>
 8005718:	40020010 	.word	0x40020010
 800571c:	40020028 	.word	0x40020028
 8005720:	40020040 	.word	0x40020040
 8005724:	40020058 	.word	0x40020058
 8005728:	40020070 	.word	0x40020070
 800572c:	40020088 	.word	0x40020088
 8005730:	400200a0 	.word	0x400200a0
 8005734:	400200b8 	.word	0x400200b8
 8005738:	40020410 	.word	0x40020410
 800573c:	40020428 	.word	0x40020428
 8005740:	40020440 	.word	0x40020440
 8005744:	40020458 	.word	0x40020458
 8005748:	40020470 	.word	0x40020470
 800574c:	40020488 	.word	0x40020488
 8005750:	400204a0 	.word	0x400204a0
 8005754:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f022 020e 	bic.w	r2, r2, #14
 8005766:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a6c      	ldr	r2, [pc, #432]	; (8005920 <HAL_DMA_Abort_IT+0x3a8>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d04a      	beq.n	8005808 <HAL_DMA_Abort_IT+0x290>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a6b      	ldr	r2, [pc, #428]	; (8005924 <HAL_DMA_Abort_IT+0x3ac>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d045      	beq.n	8005808 <HAL_DMA_Abort_IT+0x290>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a69      	ldr	r2, [pc, #420]	; (8005928 <HAL_DMA_Abort_IT+0x3b0>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d040      	beq.n	8005808 <HAL_DMA_Abort_IT+0x290>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a68      	ldr	r2, [pc, #416]	; (800592c <HAL_DMA_Abort_IT+0x3b4>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d03b      	beq.n	8005808 <HAL_DMA_Abort_IT+0x290>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a66      	ldr	r2, [pc, #408]	; (8005930 <HAL_DMA_Abort_IT+0x3b8>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d036      	beq.n	8005808 <HAL_DMA_Abort_IT+0x290>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a65      	ldr	r2, [pc, #404]	; (8005934 <HAL_DMA_Abort_IT+0x3bc>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d031      	beq.n	8005808 <HAL_DMA_Abort_IT+0x290>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a63      	ldr	r2, [pc, #396]	; (8005938 <HAL_DMA_Abort_IT+0x3c0>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d02c      	beq.n	8005808 <HAL_DMA_Abort_IT+0x290>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a62      	ldr	r2, [pc, #392]	; (800593c <HAL_DMA_Abort_IT+0x3c4>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d027      	beq.n	8005808 <HAL_DMA_Abort_IT+0x290>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a60      	ldr	r2, [pc, #384]	; (8005940 <HAL_DMA_Abort_IT+0x3c8>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d022      	beq.n	8005808 <HAL_DMA_Abort_IT+0x290>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a5f      	ldr	r2, [pc, #380]	; (8005944 <HAL_DMA_Abort_IT+0x3cc>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d01d      	beq.n	8005808 <HAL_DMA_Abort_IT+0x290>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a5d      	ldr	r2, [pc, #372]	; (8005948 <HAL_DMA_Abort_IT+0x3d0>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d018      	beq.n	8005808 <HAL_DMA_Abort_IT+0x290>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a5c      	ldr	r2, [pc, #368]	; (800594c <HAL_DMA_Abort_IT+0x3d4>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d013      	beq.n	8005808 <HAL_DMA_Abort_IT+0x290>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a5a      	ldr	r2, [pc, #360]	; (8005950 <HAL_DMA_Abort_IT+0x3d8>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d00e      	beq.n	8005808 <HAL_DMA_Abort_IT+0x290>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a59      	ldr	r2, [pc, #356]	; (8005954 <HAL_DMA_Abort_IT+0x3dc>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d009      	beq.n	8005808 <HAL_DMA_Abort_IT+0x290>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a57      	ldr	r2, [pc, #348]	; (8005958 <HAL_DMA_Abort_IT+0x3e0>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d004      	beq.n	8005808 <HAL_DMA_Abort_IT+0x290>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a56      	ldr	r2, [pc, #344]	; (800595c <HAL_DMA_Abort_IT+0x3e4>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d108      	bne.n	800581a <HAL_DMA_Abort_IT+0x2a2>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f022 0201 	bic.w	r2, r2, #1
 8005816:	601a      	str	r2, [r3, #0]
 8005818:	e007      	b.n	800582a <HAL_DMA_Abort_IT+0x2b2>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f022 0201 	bic.w	r2, r2, #1
 8005828:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a3c      	ldr	r2, [pc, #240]	; (8005920 <HAL_DMA_Abort_IT+0x3a8>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d072      	beq.n	800591a <HAL_DMA_Abort_IT+0x3a2>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a3a      	ldr	r2, [pc, #232]	; (8005924 <HAL_DMA_Abort_IT+0x3ac>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d06d      	beq.n	800591a <HAL_DMA_Abort_IT+0x3a2>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a39      	ldr	r2, [pc, #228]	; (8005928 <HAL_DMA_Abort_IT+0x3b0>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d068      	beq.n	800591a <HAL_DMA_Abort_IT+0x3a2>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a37      	ldr	r2, [pc, #220]	; (800592c <HAL_DMA_Abort_IT+0x3b4>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d063      	beq.n	800591a <HAL_DMA_Abort_IT+0x3a2>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a36      	ldr	r2, [pc, #216]	; (8005930 <HAL_DMA_Abort_IT+0x3b8>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d05e      	beq.n	800591a <HAL_DMA_Abort_IT+0x3a2>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a34      	ldr	r2, [pc, #208]	; (8005934 <HAL_DMA_Abort_IT+0x3bc>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d059      	beq.n	800591a <HAL_DMA_Abort_IT+0x3a2>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a33      	ldr	r2, [pc, #204]	; (8005938 <HAL_DMA_Abort_IT+0x3c0>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d054      	beq.n	800591a <HAL_DMA_Abort_IT+0x3a2>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a31      	ldr	r2, [pc, #196]	; (800593c <HAL_DMA_Abort_IT+0x3c4>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d04f      	beq.n	800591a <HAL_DMA_Abort_IT+0x3a2>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a30      	ldr	r2, [pc, #192]	; (8005940 <HAL_DMA_Abort_IT+0x3c8>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d04a      	beq.n	800591a <HAL_DMA_Abort_IT+0x3a2>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a2e      	ldr	r2, [pc, #184]	; (8005944 <HAL_DMA_Abort_IT+0x3cc>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d045      	beq.n	800591a <HAL_DMA_Abort_IT+0x3a2>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a2d      	ldr	r2, [pc, #180]	; (8005948 <HAL_DMA_Abort_IT+0x3d0>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d040      	beq.n	800591a <HAL_DMA_Abort_IT+0x3a2>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a2b      	ldr	r2, [pc, #172]	; (800594c <HAL_DMA_Abort_IT+0x3d4>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d03b      	beq.n	800591a <HAL_DMA_Abort_IT+0x3a2>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a2a      	ldr	r2, [pc, #168]	; (8005950 <HAL_DMA_Abort_IT+0x3d8>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d036      	beq.n	800591a <HAL_DMA_Abort_IT+0x3a2>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a28      	ldr	r2, [pc, #160]	; (8005954 <HAL_DMA_Abort_IT+0x3dc>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d031      	beq.n	800591a <HAL_DMA_Abort_IT+0x3a2>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a27      	ldr	r2, [pc, #156]	; (8005958 <HAL_DMA_Abort_IT+0x3e0>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d02c      	beq.n	800591a <HAL_DMA_Abort_IT+0x3a2>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a25      	ldr	r2, [pc, #148]	; (800595c <HAL_DMA_Abort_IT+0x3e4>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d027      	beq.n	800591a <HAL_DMA_Abort_IT+0x3a2>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a24      	ldr	r2, [pc, #144]	; (8005960 <HAL_DMA_Abort_IT+0x3e8>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d022      	beq.n	800591a <HAL_DMA_Abort_IT+0x3a2>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a22      	ldr	r2, [pc, #136]	; (8005964 <HAL_DMA_Abort_IT+0x3ec>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d01d      	beq.n	800591a <HAL_DMA_Abort_IT+0x3a2>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a21      	ldr	r2, [pc, #132]	; (8005968 <HAL_DMA_Abort_IT+0x3f0>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d018      	beq.n	800591a <HAL_DMA_Abort_IT+0x3a2>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a1f      	ldr	r2, [pc, #124]	; (800596c <HAL_DMA_Abort_IT+0x3f4>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d013      	beq.n	800591a <HAL_DMA_Abort_IT+0x3a2>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a1e      	ldr	r2, [pc, #120]	; (8005970 <HAL_DMA_Abort_IT+0x3f8>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d00e      	beq.n	800591a <HAL_DMA_Abort_IT+0x3a2>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a1c      	ldr	r2, [pc, #112]	; (8005974 <HAL_DMA_Abort_IT+0x3fc>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d009      	beq.n	800591a <HAL_DMA_Abort_IT+0x3a2>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a1b      	ldr	r2, [pc, #108]	; (8005978 <HAL_DMA_Abort_IT+0x400>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d004      	beq.n	800591a <HAL_DMA_Abort_IT+0x3a2>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a19      	ldr	r2, [pc, #100]	; (800597c <HAL_DMA_Abort_IT+0x404>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d132      	bne.n	8005980 <HAL_DMA_Abort_IT+0x408>
 800591a:	2301      	movs	r3, #1
 800591c:	e031      	b.n	8005982 <HAL_DMA_Abort_IT+0x40a>
 800591e:	bf00      	nop
 8005920:	40020010 	.word	0x40020010
 8005924:	40020028 	.word	0x40020028
 8005928:	40020040 	.word	0x40020040
 800592c:	40020058 	.word	0x40020058
 8005930:	40020070 	.word	0x40020070
 8005934:	40020088 	.word	0x40020088
 8005938:	400200a0 	.word	0x400200a0
 800593c:	400200b8 	.word	0x400200b8
 8005940:	40020410 	.word	0x40020410
 8005944:	40020428 	.word	0x40020428
 8005948:	40020440 	.word	0x40020440
 800594c:	40020458 	.word	0x40020458
 8005950:	40020470 	.word	0x40020470
 8005954:	40020488 	.word	0x40020488
 8005958:	400204a0 	.word	0x400204a0
 800595c:	400204b8 	.word	0x400204b8
 8005960:	58025408 	.word	0x58025408
 8005964:	5802541c 	.word	0x5802541c
 8005968:	58025430 	.word	0x58025430
 800596c:	58025444 	.word	0x58025444
 8005970:	58025458 	.word	0x58025458
 8005974:	5802546c 	.word	0x5802546c
 8005978:	58025480 	.word	0x58025480
 800597c:	58025494 	.word	0x58025494
 8005980:	2300      	movs	r3, #0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d028      	beq.n	80059d8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005990:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005994:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800599a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059a0:	f003 031f 	and.w	r3, r3, #31
 80059a4:	2201      	movs	r2, #1
 80059a6:	409a      	lsls	r2, r3
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80059b4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00c      	beq.n	80059d8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059cc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80059d6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d003      	beq.n	80059f8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop

08005a04 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b08a      	sub	sp, #40	; 0x28
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005a10:	4b67      	ldr	r3, [pc, #412]	; (8005bb0 <HAL_DMA_IRQHandler+0x1ac>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a67      	ldr	r2, [pc, #412]	; (8005bb4 <HAL_DMA_IRQHandler+0x1b0>)
 8005a16:	fba2 2303 	umull	r2, r3, r2, r3
 8005a1a:	0a9b      	lsrs	r3, r3, #10
 8005a1c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a22:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a28:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005a2a:	6a3b      	ldr	r3, [r7, #32]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a5f      	ldr	r2, [pc, #380]	; (8005bb8 <HAL_DMA_IRQHandler+0x1b4>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d04a      	beq.n	8005ad6 <HAL_DMA_IRQHandler+0xd2>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a5d      	ldr	r2, [pc, #372]	; (8005bbc <HAL_DMA_IRQHandler+0x1b8>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d045      	beq.n	8005ad6 <HAL_DMA_IRQHandler+0xd2>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a5c      	ldr	r2, [pc, #368]	; (8005bc0 <HAL_DMA_IRQHandler+0x1bc>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d040      	beq.n	8005ad6 <HAL_DMA_IRQHandler+0xd2>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a5a      	ldr	r2, [pc, #360]	; (8005bc4 <HAL_DMA_IRQHandler+0x1c0>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d03b      	beq.n	8005ad6 <HAL_DMA_IRQHandler+0xd2>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a59      	ldr	r2, [pc, #356]	; (8005bc8 <HAL_DMA_IRQHandler+0x1c4>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d036      	beq.n	8005ad6 <HAL_DMA_IRQHandler+0xd2>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a57      	ldr	r2, [pc, #348]	; (8005bcc <HAL_DMA_IRQHandler+0x1c8>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d031      	beq.n	8005ad6 <HAL_DMA_IRQHandler+0xd2>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a56      	ldr	r2, [pc, #344]	; (8005bd0 <HAL_DMA_IRQHandler+0x1cc>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d02c      	beq.n	8005ad6 <HAL_DMA_IRQHandler+0xd2>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a54      	ldr	r2, [pc, #336]	; (8005bd4 <HAL_DMA_IRQHandler+0x1d0>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d027      	beq.n	8005ad6 <HAL_DMA_IRQHandler+0xd2>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a53      	ldr	r2, [pc, #332]	; (8005bd8 <HAL_DMA_IRQHandler+0x1d4>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d022      	beq.n	8005ad6 <HAL_DMA_IRQHandler+0xd2>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a51      	ldr	r2, [pc, #324]	; (8005bdc <HAL_DMA_IRQHandler+0x1d8>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d01d      	beq.n	8005ad6 <HAL_DMA_IRQHandler+0xd2>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a50      	ldr	r2, [pc, #320]	; (8005be0 <HAL_DMA_IRQHandler+0x1dc>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d018      	beq.n	8005ad6 <HAL_DMA_IRQHandler+0xd2>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a4e      	ldr	r2, [pc, #312]	; (8005be4 <HAL_DMA_IRQHandler+0x1e0>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d013      	beq.n	8005ad6 <HAL_DMA_IRQHandler+0xd2>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a4d      	ldr	r2, [pc, #308]	; (8005be8 <HAL_DMA_IRQHandler+0x1e4>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d00e      	beq.n	8005ad6 <HAL_DMA_IRQHandler+0xd2>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a4b      	ldr	r2, [pc, #300]	; (8005bec <HAL_DMA_IRQHandler+0x1e8>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d009      	beq.n	8005ad6 <HAL_DMA_IRQHandler+0xd2>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a4a      	ldr	r2, [pc, #296]	; (8005bf0 <HAL_DMA_IRQHandler+0x1ec>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d004      	beq.n	8005ad6 <HAL_DMA_IRQHandler+0xd2>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a48      	ldr	r2, [pc, #288]	; (8005bf4 <HAL_DMA_IRQHandler+0x1f0>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d101      	bne.n	8005ada <HAL_DMA_IRQHandler+0xd6>
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e000      	b.n	8005adc <HAL_DMA_IRQHandler+0xd8>
 8005ada:	2300      	movs	r3, #0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f000 842b 	beq.w	8006338 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ae6:	f003 031f 	and.w	r3, r3, #31
 8005aea:	2208      	movs	r2, #8
 8005aec:	409a      	lsls	r2, r3
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	4013      	ands	r3, r2
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	f000 80a2 	beq.w	8005c3c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a2e      	ldr	r2, [pc, #184]	; (8005bb8 <HAL_DMA_IRQHandler+0x1b4>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d04a      	beq.n	8005b98 <HAL_DMA_IRQHandler+0x194>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a2d      	ldr	r2, [pc, #180]	; (8005bbc <HAL_DMA_IRQHandler+0x1b8>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d045      	beq.n	8005b98 <HAL_DMA_IRQHandler+0x194>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a2b      	ldr	r2, [pc, #172]	; (8005bc0 <HAL_DMA_IRQHandler+0x1bc>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d040      	beq.n	8005b98 <HAL_DMA_IRQHandler+0x194>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a2a      	ldr	r2, [pc, #168]	; (8005bc4 <HAL_DMA_IRQHandler+0x1c0>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d03b      	beq.n	8005b98 <HAL_DMA_IRQHandler+0x194>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a28      	ldr	r2, [pc, #160]	; (8005bc8 <HAL_DMA_IRQHandler+0x1c4>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d036      	beq.n	8005b98 <HAL_DMA_IRQHandler+0x194>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a27      	ldr	r2, [pc, #156]	; (8005bcc <HAL_DMA_IRQHandler+0x1c8>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d031      	beq.n	8005b98 <HAL_DMA_IRQHandler+0x194>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a25      	ldr	r2, [pc, #148]	; (8005bd0 <HAL_DMA_IRQHandler+0x1cc>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d02c      	beq.n	8005b98 <HAL_DMA_IRQHandler+0x194>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a24      	ldr	r2, [pc, #144]	; (8005bd4 <HAL_DMA_IRQHandler+0x1d0>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d027      	beq.n	8005b98 <HAL_DMA_IRQHandler+0x194>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a22      	ldr	r2, [pc, #136]	; (8005bd8 <HAL_DMA_IRQHandler+0x1d4>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d022      	beq.n	8005b98 <HAL_DMA_IRQHandler+0x194>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a21      	ldr	r2, [pc, #132]	; (8005bdc <HAL_DMA_IRQHandler+0x1d8>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d01d      	beq.n	8005b98 <HAL_DMA_IRQHandler+0x194>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a1f      	ldr	r2, [pc, #124]	; (8005be0 <HAL_DMA_IRQHandler+0x1dc>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d018      	beq.n	8005b98 <HAL_DMA_IRQHandler+0x194>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a1e      	ldr	r2, [pc, #120]	; (8005be4 <HAL_DMA_IRQHandler+0x1e0>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d013      	beq.n	8005b98 <HAL_DMA_IRQHandler+0x194>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a1c      	ldr	r2, [pc, #112]	; (8005be8 <HAL_DMA_IRQHandler+0x1e4>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d00e      	beq.n	8005b98 <HAL_DMA_IRQHandler+0x194>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a1b      	ldr	r2, [pc, #108]	; (8005bec <HAL_DMA_IRQHandler+0x1e8>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d009      	beq.n	8005b98 <HAL_DMA_IRQHandler+0x194>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a19      	ldr	r2, [pc, #100]	; (8005bf0 <HAL_DMA_IRQHandler+0x1ec>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d004      	beq.n	8005b98 <HAL_DMA_IRQHandler+0x194>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a18      	ldr	r2, [pc, #96]	; (8005bf4 <HAL_DMA_IRQHandler+0x1f0>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d12f      	bne.n	8005bf8 <HAL_DMA_IRQHandler+0x1f4>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 0304 	and.w	r3, r3, #4
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	bf14      	ite	ne
 8005ba6:	2301      	movne	r3, #1
 8005ba8:	2300      	moveq	r3, #0
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	e02e      	b.n	8005c0c <HAL_DMA_IRQHandler+0x208>
 8005bae:	bf00      	nop
 8005bb0:	24000004 	.word	0x24000004
 8005bb4:	1b4e81b5 	.word	0x1b4e81b5
 8005bb8:	40020010 	.word	0x40020010
 8005bbc:	40020028 	.word	0x40020028
 8005bc0:	40020040 	.word	0x40020040
 8005bc4:	40020058 	.word	0x40020058
 8005bc8:	40020070 	.word	0x40020070
 8005bcc:	40020088 	.word	0x40020088
 8005bd0:	400200a0 	.word	0x400200a0
 8005bd4:	400200b8 	.word	0x400200b8
 8005bd8:	40020410 	.word	0x40020410
 8005bdc:	40020428 	.word	0x40020428
 8005be0:	40020440 	.word	0x40020440
 8005be4:	40020458 	.word	0x40020458
 8005be8:	40020470 	.word	0x40020470
 8005bec:	40020488 	.word	0x40020488
 8005bf0:	400204a0 	.word	0x400204a0
 8005bf4:	400204b8 	.word	0x400204b8
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0308 	and.w	r3, r3, #8
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	bf14      	ite	ne
 8005c06:	2301      	movne	r3, #1
 8005c08:	2300      	moveq	r3, #0
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d015      	beq.n	8005c3c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f022 0204 	bic.w	r2, r2, #4
 8005c1e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c24:	f003 031f 	and.w	r3, r3, #31
 8005c28:	2208      	movs	r2, #8
 8005c2a:	409a      	lsls	r2, r3
 8005c2c:	6a3b      	ldr	r3, [r7, #32]
 8005c2e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c34:	f043 0201 	orr.w	r2, r3, #1
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c40:	f003 031f 	and.w	r3, r3, #31
 8005c44:	69ba      	ldr	r2, [r7, #24]
 8005c46:	fa22 f303 	lsr.w	r3, r2, r3
 8005c4a:	f003 0301 	and.w	r3, r3, #1
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d06e      	beq.n	8005d30 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a69      	ldr	r2, [pc, #420]	; (8005dfc <HAL_DMA_IRQHandler+0x3f8>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d04a      	beq.n	8005cf2 <HAL_DMA_IRQHandler+0x2ee>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a67      	ldr	r2, [pc, #412]	; (8005e00 <HAL_DMA_IRQHandler+0x3fc>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d045      	beq.n	8005cf2 <HAL_DMA_IRQHandler+0x2ee>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a66      	ldr	r2, [pc, #408]	; (8005e04 <HAL_DMA_IRQHandler+0x400>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d040      	beq.n	8005cf2 <HAL_DMA_IRQHandler+0x2ee>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a64      	ldr	r2, [pc, #400]	; (8005e08 <HAL_DMA_IRQHandler+0x404>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d03b      	beq.n	8005cf2 <HAL_DMA_IRQHandler+0x2ee>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a63      	ldr	r2, [pc, #396]	; (8005e0c <HAL_DMA_IRQHandler+0x408>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d036      	beq.n	8005cf2 <HAL_DMA_IRQHandler+0x2ee>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a61      	ldr	r2, [pc, #388]	; (8005e10 <HAL_DMA_IRQHandler+0x40c>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d031      	beq.n	8005cf2 <HAL_DMA_IRQHandler+0x2ee>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a60      	ldr	r2, [pc, #384]	; (8005e14 <HAL_DMA_IRQHandler+0x410>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d02c      	beq.n	8005cf2 <HAL_DMA_IRQHandler+0x2ee>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a5e      	ldr	r2, [pc, #376]	; (8005e18 <HAL_DMA_IRQHandler+0x414>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d027      	beq.n	8005cf2 <HAL_DMA_IRQHandler+0x2ee>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a5d      	ldr	r2, [pc, #372]	; (8005e1c <HAL_DMA_IRQHandler+0x418>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d022      	beq.n	8005cf2 <HAL_DMA_IRQHandler+0x2ee>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a5b      	ldr	r2, [pc, #364]	; (8005e20 <HAL_DMA_IRQHandler+0x41c>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d01d      	beq.n	8005cf2 <HAL_DMA_IRQHandler+0x2ee>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a5a      	ldr	r2, [pc, #360]	; (8005e24 <HAL_DMA_IRQHandler+0x420>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d018      	beq.n	8005cf2 <HAL_DMA_IRQHandler+0x2ee>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a58      	ldr	r2, [pc, #352]	; (8005e28 <HAL_DMA_IRQHandler+0x424>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d013      	beq.n	8005cf2 <HAL_DMA_IRQHandler+0x2ee>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a57      	ldr	r2, [pc, #348]	; (8005e2c <HAL_DMA_IRQHandler+0x428>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d00e      	beq.n	8005cf2 <HAL_DMA_IRQHandler+0x2ee>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a55      	ldr	r2, [pc, #340]	; (8005e30 <HAL_DMA_IRQHandler+0x42c>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d009      	beq.n	8005cf2 <HAL_DMA_IRQHandler+0x2ee>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a54      	ldr	r2, [pc, #336]	; (8005e34 <HAL_DMA_IRQHandler+0x430>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d004      	beq.n	8005cf2 <HAL_DMA_IRQHandler+0x2ee>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a52      	ldr	r2, [pc, #328]	; (8005e38 <HAL_DMA_IRQHandler+0x434>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d10a      	bne.n	8005d08 <HAL_DMA_IRQHandler+0x304>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	695b      	ldr	r3, [r3, #20]
 8005cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	bf14      	ite	ne
 8005d00:	2301      	movne	r3, #1
 8005d02:	2300      	moveq	r3, #0
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	e003      	b.n	8005d10 <HAL_DMA_IRQHandler+0x30c>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2300      	movs	r3, #0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00d      	beq.n	8005d30 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d18:	f003 031f 	and.w	r3, r3, #31
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	409a      	lsls	r2, r3
 8005d20:	6a3b      	ldr	r3, [r7, #32]
 8005d22:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d28:	f043 0202 	orr.w	r2, r3, #2
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d34:	f003 031f 	and.w	r3, r3, #31
 8005d38:	2204      	movs	r2, #4
 8005d3a:	409a      	lsls	r2, r3
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	4013      	ands	r3, r2
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f000 808f 	beq.w	8005e64 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a2c      	ldr	r2, [pc, #176]	; (8005dfc <HAL_DMA_IRQHandler+0x3f8>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d04a      	beq.n	8005de6 <HAL_DMA_IRQHandler+0x3e2>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a2a      	ldr	r2, [pc, #168]	; (8005e00 <HAL_DMA_IRQHandler+0x3fc>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d045      	beq.n	8005de6 <HAL_DMA_IRQHandler+0x3e2>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a29      	ldr	r2, [pc, #164]	; (8005e04 <HAL_DMA_IRQHandler+0x400>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d040      	beq.n	8005de6 <HAL_DMA_IRQHandler+0x3e2>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a27      	ldr	r2, [pc, #156]	; (8005e08 <HAL_DMA_IRQHandler+0x404>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d03b      	beq.n	8005de6 <HAL_DMA_IRQHandler+0x3e2>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a26      	ldr	r2, [pc, #152]	; (8005e0c <HAL_DMA_IRQHandler+0x408>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d036      	beq.n	8005de6 <HAL_DMA_IRQHandler+0x3e2>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a24      	ldr	r2, [pc, #144]	; (8005e10 <HAL_DMA_IRQHandler+0x40c>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d031      	beq.n	8005de6 <HAL_DMA_IRQHandler+0x3e2>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a23      	ldr	r2, [pc, #140]	; (8005e14 <HAL_DMA_IRQHandler+0x410>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d02c      	beq.n	8005de6 <HAL_DMA_IRQHandler+0x3e2>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a21      	ldr	r2, [pc, #132]	; (8005e18 <HAL_DMA_IRQHandler+0x414>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d027      	beq.n	8005de6 <HAL_DMA_IRQHandler+0x3e2>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a20      	ldr	r2, [pc, #128]	; (8005e1c <HAL_DMA_IRQHandler+0x418>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d022      	beq.n	8005de6 <HAL_DMA_IRQHandler+0x3e2>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a1e      	ldr	r2, [pc, #120]	; (8005e20 <HAL_DMA_IRQHandler+0x41c>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d01d      	beq.n	8005de6 <HAL_DMA_IRQHandler+0x3e2>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a1d      	ldr	r2, [pc, #116]	; (8005e24 <HAL_DMA_IRQHandler+0x420>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d018      	beq.n	8005de6 <HAL_DMA_IRQHandler+0x3e2>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a1b      	ldr	r2, [pc, #108]	; (8005e28 <HAL_DMA_IRQHandler+0x424>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d013      	beq.n	8005de6 <HAL_DMA_IRQHandler+0x3e2>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a1a      	ldr	r2, [pc, #104]	; (8005e2c <HAL_DMA_IRQHandler+0x428>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d00e      	beq.n	8005de6 <HAL_DMA_IRQHandler+0x3e2>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a18      	ldr	r2, [pc, #96]	; (8005e30 <HAL_DMA_IRQHandler+0x42c>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d009      	beq.n	8005de6 <HAL_DMA_IRQHandler+0x3e2>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a17      	ldr	r2, [pc, #92]	; (8005e34 <HAL_DMA_IRQHandler+0x430>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d004      	beq.n	8005de6 <HAL_DMA_IRQHandler+0x3e2>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a15      	ldr	r2, [pc, #84]	; (8005e38 <HAL_DMA_IRQHandler+0x434>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d12a      	bne.n	8005e3c <HAL_DMA_IRQHandler+0x438>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 0302 	and.w	r3, r3, #2
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	bf14      	ite	ne
 8005df4:	2301      	movne	r3, #1
 8005df6:	2300      	moveq	r3, #0
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	e023      	b.n	8005e44 <HAL_DMA_IRQHandler+0x440>
 8005dfc:	40020010 	.word	0x40020010
 8005e00:	40020028 	.word	0x40020028
 8005e04:	40020040 	.word	0x40020040
 8005e08:	40020058 	.word	0x40020058
 8005e0c:	40020070 	.word	0x40020070
 8005e10:	40020088 	.word	0x40020088
 8005e14:	400200a0 	.word	0x400200a0
 8005e18:	400200b8 	.word	0x400200b8
 8005e1c:	40020410 	.word	0x40020410
 8005e20:	40020428 	.word	0x40020428
 8005e24:	40020440 	.word	0x40020440
 8005e28:	40020458 	.word	0x40020458
 8005e2c:	40020470 	.word	0x40020470
 8005e30:	40020488 	.word	0x40020488
 8005e34:	400204a0 	.word	0x400204a0
 8005e38:	400204b8 	.word	0x400204b8
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2300      	movs	r3, #0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d00d      	beq.n	8005e64 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e4c:	f003 031f 	and.w	r3, r3, #31
 8005e50:	2204      	movs	r2, #4
 8005e52:	409a      	lsls	r2, r3
 8005e54:	6a3b      	ldr	r3, [r7, #32]
 8005e56:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e5c:	f043 0204 	orr.w	r2, r3, #4
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e68:	f003 031f 	and.w	r3, r3, #31
 8005e6c:	2210      	movs	r2, #16
 8005e6e:	409a      	lsls	r2, r3
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	4013      	ands	r3, r2
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f000 80a6 	beq.w	8005fc6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a85      	ldr	r2, [pc, #532]	; (8006094 <HAL_DMA_IRQHandler+0x690>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d04a      	beq.n	8005f1a <HAL_DMA_IRQHandler+0x516>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a83      	ldr	r2, [pc, #524]	; (8006098 <HAL_DMA_IRQHandler+0x694>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d045      	beq.n	8005f1a <HAL_DMA_IRQHandler+0x516>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a82      	ldr	r2, [pc, #520]	; (800609c <HAL_DMA_IRQHandler+0x698>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d040      	beq.n	8005f1a <HAL_DMA_IRQHandler+0x516>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a80      	ldr	r2, [pc, #512]	; (80060a0 <HAL_DMA_IRQHandler+0x69c>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d03b      	beq.n	8005f1a <HAL_DMA_IRQHandler+0x516>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a7f      	ldr	r2, [pc, #508]	; (80060a4 <HAL_DMA_IRQHandler+0x6a0>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d036      	beq.n	8005f1a <HAL_DMA_IRQHandler+0x516>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a7d      	ldr	r2, [pc, #500]	; (80060a8 <HAL_DMA_IRQHandler+0x6a4>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d031      	beq.n	8005f1a <HAL_DMA_IRQHandler+0x516>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a7c      	ldr	r2, [pc, #496]	; (80060ac <HAL_DMA_IRQHandler+0x6a8>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d02c      	beq.n	8005f1a <HAL_DMA_IRQHandler+0x516>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a7a      	ldr	r2, [pc, #488]	; (80060b0 <HAL_DMA_IRQHandler+0x6ac>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d027      	beq.n	8005f1a <HAL_DMA_IRQHandler+0x516>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a79      	ldr	r2, [pc, #484]	; (80060b4 <HAL_DMA_IRQHandler+0x6b0>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d022      	beq.n	8005f1a <HAL_DMA_IRQHandler+0x516>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a77      	ldr	r2, [pc, #476]	; (80060b8 <HAL_DMA_IRQHandler+0x6b4>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d01d      	beq.n	8005f1a <HAL_DMA_IRQHandler+0x516>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a76      	ldr	r2, [pc, #472]	; (80060bc <HAL_DMA_IRQHandler+0x6b8>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d018      	beq.n	8005f1a <HAL_DMA_IRQHandler+0x516>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a74      	ldr	r2, [pc, #464]	; (80060c0 <HAL_DMA_IRQHandler+0x6bc>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d013      	beq.n	8005f1a <HAL_DMA_IRQHandler+0x516>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a73      	ldr	r2, [pc, #460]	; (80060c4 <HAL_DMA_IRQHandler+0x6c0>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d00e      	beq.n	8005f1a <HAL_DMA_IRQHandler+0x516>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a71      	ldr	r2, [pc, #452]	; (80060c8 <HAL_DMA_IRQHandler+0x6c4>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d009      	beq.n	8005f1a <HAL_DMA_IRQHandler+0x516>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a70      	ldr	r2, [pc, #448]	; (80060cc <HAL_DMA_IRQHandler+0x6c8>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d004      	beq.n	8005f1a <HAL_DMA_IRQHandler+0x516>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a6e      	ldr	r2, [pc, #440]	; (80060d0 <HAL_DMA_IRQHandler+0x6cc>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d10a      	bne.n	8005f30 <HAL_DMA_IRQHandler+0x52c>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0308 	and.w	r3, r3, #8
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	bf14      	ite	ne
 8005f28:	2301      	movne	r3, #1
 8005f2a:	2300      	moveq	r3, #0
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	e009      	b.n	8005f44 <HAL_DMA_IRQHandler+0x540>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0304 	and.w	r3, r3, #4
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	bf14      	ite	ne
 8005f3e:	2301      	movne	r3, #1
 8005f40:	2300      	moveq	r3, #0
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d03e      	beq.n	8005fc6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f4c:	f003 031f 	and.w	r3, r3, #31
 8005f50:	2210      	movs	r2, #16
 8005f52:	409a      	lsls	r2, r3
 8005f54:	6a3b      	ldr	r3, [r7, #32]
 8005f56:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d018      	beq.n	8005f98 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d108      	bne.n	8005f86 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d024      	beq.n	8005fc6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	4798      	blx	r3
 8005f84:	e01f      	b.n	8005fc6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d01b      	beq.n	8005fc6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	4798      	blx	r3
 8005f96:	e016      	b.n	8005fc6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d107      	bne.n	8005fb6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f022 0208 	bic.w	r2, r2, #8
 8005fb4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d003      	beq.n	8005fc6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fca:	f003 031f 	and.w	r3, r3, #31
 8005fce:	2220      	movs	r2, #32
 8005fd0:	409a      	lsls	r2, r3
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	f000 8110 	beq.w	80061fc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a2c      	ldr	r2, [pc, #176]	; (8006094 <HAL_DMA_IRQHandler+0x690>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d04a      	beq.n	800607c <HAL_DMA_IRQHandler+0x678>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a2b      	ldr	r2, [pc, #172]	; (8006098 <HAL_DMA_IRQHandler+0x694>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d045      	beq.n	800607c <HAL_DMA_IRQHandler+0x678>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a29      	ldr	r2, [pc, #164]	; (800609c <HAL_DMA_IRQHandler+0x698>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d040      	beq.n	800607c <HAL_DMA_IRQHandler+0x678>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a28      	ldr	r2, [pc, #160]	; (80060a0 <HAL_DMA_IRQHandler+0x69c>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d03b      	beq.n	800607c <HAL_DMA_IRQHandler+0x678>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a26      	ldr	r2, [pc, #152]	; (80060a4 <HAL_DMA_IRQHandler+0x6a0>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d036      	beq.n	800607c <HAL_DMA_IRQHandler+0x678>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a25      	ldr	r2, [pc, #148]	; (80060a8 <HAL_DMA_IRQHandler+0x6a4>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d031      	beq.n	800607c <HAL_DMA_IRQHandler+0x678>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a23      	ldr	r2, [pc, #140]	; (80060ac <HAL_DMA_IRQHandler+0x6a8>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d02c      	beq.n	800607c <HAL_DMA_IRQHandler+0x678>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a22      	ldr	r2, [pc, #136]	; (80060b0 <HAL_DMA_IRQHandler+0x6ac>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d027      	beq.n	800607c <HAL_DMA_IRQHandler+0x678>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a20      	ldr	r2, [pc, #128]	; (80060b4 <HAL_DMA_IRQHandler+0x6b0>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d022      	beq.n	800607c <HAL_DMA_IRQHandler+0x678>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a1f      	ldr	r2, [pc, #124]	; (80060b8 <HAL_DMA_IRQHandler+0x6b4>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d01d      	beq.n	800607c <HAL_DMA_IRQHandler+0x678>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a1d      	ldr	r2, [pc, #116]	; (80060bc <HAL_DMA_IRQHandler+0x6b8>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d018      	beq.n	800607c <HAL_DMA_IRQHandler+0x678>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a1c      	ldr	r2, [pc, #112]	; (80060c0 <HAL_DMA_IRQHandler+0x6bc>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d013      	beq.n	800607c <HAL_DMA_IRQHandler+0x678>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a1a      	ldr	r2, [pc, #104]	; (80060c4 <HAL_DMA_IRQHandler+0x6c0>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d00e      	beq.n	800607c <HAL_DMA_IRQHandler+0x678>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a19      	ldr	r2, [pc, #100]	; (80060c8 <HAL_DMA_IRQHandler+0x6c4>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d009      	beq.n	800607c <HAL_DMA_IRQHandler+0x678>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a17      	ldr	r2, [pc, #92]	; (80060cc <HAL_DMA_IRQHandler+0x6c8>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d004      	beq.n	800607c <HAL_DMA_IRQHandler+0x678>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a16      	ldr	r2, [pc, #88]	; (80060d0 <HAL_DMA_IRQHandler+0x6cc>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d12b      	bne.n	80060d4 <HAL_DMA_IRQHandler+0x6d0>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 0310 	and.w	r3, r3, #16
 8006086:	2b00      	cmp	r3, #0
 8006088:	bf14      	ite	ne
 800608a:	2301      	movne	r3, #1
 800608c:	2300      	moveq	r3, #0
 800608e:	b2db      	uxtb	r3, r3
 8006090:	e02a      	b.n	80060e8 <HAL_DMA_IRQHandler+0x6e4>
 8006092:	bf00      	nop
 8006094:	40020010 	.word	0x40020010
 8006098:	40020028 	.word	0x40020028
 800609c:	40020040 	.word	0x40020040
 80060a0:	40020058 	.word	0x40020058
 80060a4:	40020070 	.word	0x40020070
 80060a8:	40020088 	.word	0x40020088
 80060ac:	400200a0 	.word	0x400200a0
 80060b0:	400200b8 	.word	0x400200b8
 80060b4:	40020410 	.word	0x40020410
 80060b8:	40020428 	.word	0x40020428
 80060bc:	40020440 	.word	0x40020440
 80060c0:	40020458 	.word	0x40020458
 80060c4:	40020470 	.word	0x40020470
 80060c8:	40020488 	.word	0x40020488
 80060cc:	400204a0 	.word	0x400204a0
 80060d0:	400204b8 	.word	0x400204b8
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0302 	and.w	r3, r3, #2
 80060de:	2b00      	cmp	r3, #0
 80060e0:	bf14      	ite	ne
 80060e2:	2301      	movne	r3, #1
 80060e4:	2300      	moveq	r3, #0
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f000 8087 	beq.w	80061fc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060f2:	f003 031f 	and.w	r3, r3, #31
 80060f6:	2220      	movs	r2, #32
 80060f8:	409a      	lsls	r2, r3
 80060fa:	6a3b      	ldr	r3, [r7, #32]
 80060fc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006104:	b2db      	uxtb	r3, r3
 8006106:	2b04      	cmp	r3, #4
 8006108:	d139      	bne.n	800617e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f022 0216 	bic.w	r2, r2, #22
 8006118:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	695a      	ldr	r2, [r3, #20]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006128:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612e:	2b00      	cmp	r3, #0
 8006130:	d103      	bne.n	800613a <HAL_DMA_IRQHandler+0x736>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006136:	2b00      	cmp	r3, #0
 8006138:	d007      	beq.n	800614a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f022 0208 	bic.w	r2, r2, #8
 8006148:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800614e:	f003 031f 	and.w	r3, r3, #31
 8006152:	223f      	movs	r2, #63	; 0x3f
 8006154:	409a      	lsls	r2, r3
 8006156:	6a3b      	ldr	r3, [r7, #32]
 8006158:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2201      	movs	r2, #1
 800615e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800616e:	2b00      	cmp	r3, #0
 8006170:	f000 8382 	beq.w	8006878 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	4798      	blx	r3
          }
          return;
 800617c:	e37c      	b.n	8006878 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006188:	2b00      	cmp	r3, #0
 800618a:	d018      	beq.n	80061be <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006196:	2b00      	cmp	r3, #0
 8006198:	d108      	bne.n	80061ac <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d02c      	beq.n	80061fc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	4798      	blx	r3
 80061aa:	e027      	b.n	80061fc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d023      	beq.n	80061fc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	4798      	blx	r3
 80061bc:	e01e      	b.n	80061fc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d10f      	bne.n	80061ec <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f022 0210 	bic.w	r2, r2, #16
 80061da:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d003      	beq.n	80061fc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006200:	2b00      	cmp	r3, #0
 8006202:	f000 833e 	beq.w	8006882 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800620a:	f003 0301 	and.w	r3, r3, #1
 800620e:	2b00      	cmp	r3, #0
 8006210:	f000 8088 	beq.w	8006324 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2204      	movs	r2, #4
 8006218:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a89      	ldr	r2, [pc, #548]	; (8006448 <HAL_DMA_IRQHandler+0xa44>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d04a      	beq.n	80062bc <HAL_DMA_IRQHandler+0x8b8>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a88      	ldr	r2, [pc, #544]	; (800644c <HAL_DMA_IRQHandler+0xa48>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d045      	beq.n	80062bc <HAL_DMA_IRQHandler+0x8b8>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a86      	ldr	r2, [pc, #536]	; (8006450 <HAL_DMA_IRQHandler+0xa4c>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d040      	beq.n	80062bc <HAL_DMA_IRQHandler+0x8b8>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a85      	ldr	r2, [pc, #532]	; (8006454 <HAL_DMA_IRQHandler+0xa50>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d03b      	beq.n	80062bc <HAL_DMA_IRQHandler+0x8b8>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a83      	ldr	r2, [pc, #524]	; (8006458 <HAL_DMA_IRQHandler+0xa54>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d036      	beq.n	80062bc <HAL_DMA_IRQHandler+0x8b8>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a82      	ldr	r2, [pc, #520]	; (800645c <HAL_DMA_IRQHandler+0xa58>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d031      	beq.n	80062bc <HAL_DMA_IRQHandler+0x8b8>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a80      	ldr	r2, [pc, #512]	; (8006460 <HAL_DMA_IRQHandler+0xa5c>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d02c      	beq.n	80062bc <HAL_DMA_IRQHandler+0x8b8>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a7f      	ldr	r2, [pc, #508]	; (8006464 <HAL_DMA_IRQHandler+0xa60>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d027      	beq.n	80062bc <HAL_DMA_IRQHandler+0x8b8>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a7d      	ldr	r2, [pc, #500]	; (8006468 <HAL_DMA_IRQHandler+0xa64>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d022      	beq.n	80062bc <HAL_DMA_IRQHandler+0x8b8>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a7c      	ldr	r2, [pc, #496]	; (800646c <HAL_DMA_IRQHandler+0xa68>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d01d      	beq.n	80062bc <HAL_DMA_IRQHandler+0x8b8>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a7a      	ldr	r2, [pc, #488]	; (8006470 <HAL_DMA_IRQHandler+0xa6c>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d018      	beq.n	80062bc <HAL_DMA_IRQHandler+0x8b8>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a79      	ldr	r2, [pc, #484]	; (8006474 <HAL_DMA_IRQHandler+0xa70>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d013      	beq.n	80062bc <HAL_DMA_IRQHandler+0x8b8>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a77      	ldr	r2, [pc, #476]	; (8006478 <HAL_DMA_IRQHandler+0xa74>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d00e      	beq.n	80062bc <HAL_DMA_IRQHandler+0x8b8>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a76      	ldr	r2, [pc, #472]	; (800647c <HAL_DMA_IRQHandler+0xa78>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d009      	beq.n	80062bc <HAL_DMA_IRQHandler+0x8b8>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a74      	ldr	r2, [pc, #464]	; (8006480 <HAL_DMA_IRQHandler+0xa7c>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d004      	beq.n	80062bc <HAL_DMA_IRQHandler+0x8b8>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a73      	ldr	r2, [pc, #460]	; (8006484 <HAL_DMA_IRQHandler+0xa80>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d108      	bne.n	80062ce <HAL_DMA_IRQHandler+0x8ca>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f022 0201 	bic.w	r2, r2, #1
 80062ca:	601a      	str	r2, [r3, #0]
 80062cc:	e007      	b.n	80062de <HAL_DMA_IRQHandler+0x8da>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f022 0201 	bic.w	r2, r2, #1
 80062dc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	3301      	adds	r3, #1
 80062e2:	60fb      	str	r3, [r7, #12]
 80062e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d307      	bcc.n	80062fa <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0301 	and.w	r3, r3, #1
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d1f2      	bne.n	80062de <HAL_DMA_IRQHandler+0x8da>
 80062f8:	e000      	b.n	80062fc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80062fa:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0301 	and.w	r3, r3, #1
 8006306:	2b00      	cmp	r3, #0
 8006308:	d004      	beq.n	8006314 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2203      	movs	r2, #3
 800630e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006312:	e003      	b.n	800631c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006328:	2b00      	cmp	r3, #0
 800632a:	f000 82aa 	beq.w	8006882 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	4798      	blx	r3
 8006336:	e2a4      	b.n	8006882 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a52      	ldr	r2, [pc, #328]	; (8006488 <HAL_DMA_IRQHandler+0xa84>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d04a      	beq.n	80063d8 <HAL_DMA_IRQHandler+0x9d4>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a51      	ldr	r2, [pc, #324]	; (800648c <HAL_DMA_IRQHandler+0xa88>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d045      	beq.n	80063d8 <HAL_DMA_IRQHandler+0x9d4>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a4f      	ldr	r2, [pc, #316]	; (8006490 <HAL_DMA_IRQHandler+0xa8c>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d040      	beq.n	80063d8 <HAL_DMA_IRQHandler+0x9d4>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a4e      	ldr	r2, [pc, #312]	; (8006494 <HAL_DMA_IRQHandler+0xa90>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d03b      	beq.n	80063d8 <HAL_DMA_IRQHandler+0x9d4>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a4c      	ldr	r2, [pc, #304]	; (8006498 <HAL_DMA_IRQHandler+0xa94>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d036      	beq.n	80063d8 <HAL_DMA_IRQHandler+0x9d4>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a4b      	ldr	r2, [pc, #300]	; (800649c <HAL_DMA_IRQHandler+0xa98>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d031      	beq.n	80063d8 <HAL_DMA_IRQHandler+0x9d4>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a49      	ldr	r2, [pc, #292]	; (80064a0 <HAL_DMA_IRQHandler+0xa9c>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d02c      	beq.n	80063d8 <HAL_DMA_IRQHandler+0x9d4>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a48      	ldr	r2, [pc, #288]	; (80064a4 <HAL_DMA_IRQHandler+0xaa0>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d027      	beq.n	80063d8 <HAL_DMA_IRQHandler+0x9d4>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a46      	ldr	r2, [pc, #280]	; (80064a8 <HAL_DMA_IRQHandler+0xaa4>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d022      	beq.n	80063d8 <HAL_DMA_IRQHandler+0x9d4>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a45      	ldr	r2, [pc, #276]	; (80064ac <HAL_DMA_IRQHandler+0xaa8>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d01d      	beq.n	80063d8 <HAL_DMA_IRQHandler+0x9d4>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a43      	ldr	r2, [pc, #268]	; (80064b0 <HAL_DMA_IRQHandler+0xaac>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d018      	beq.n	80063d8 <HAL_DMA_IRQHandler+0x9d4>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a42      	ldr	r2, [pc, #264]	; (80064b4 <HAL_DMA_IRQHandler+0xab0>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d013      	beq.n	80063d8 <HAL_DMA_IRQHandler+0x9d4>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a40      	ldr	r2, [pc, #256]	; (80064b8 <HAL_DMA_IRQHandler+0xab4>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d00e      	beq.n	80063d8 <HAL_DMA_IRQHandler+0x9d4>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a3f      	ldr	r2, [pc, #252]	; (80064bc <HAL_DMA_IRQHandler+0xab8>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d009      	beq.n	80063d8 <HAL_DMA_IRQHandler+0x9d4>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a3d      	ldr	r2, [pc, #244]	; (80064c0 <HAL_DMA_IRQHandler+0xabc>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d004      	beq.n	80063d8 <HAL_DMA_IRQHandler+0x9d4>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a3c      	ldr	r2, [pc, #240]	; (80064c4 <HAL_DMA_IRQHandler+0xac0>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d101      	bne.n	80063dc <HAL_DMA_IRQHandler+0x9d8>
 80063d8:	2301      	movs	r3, #1
 80063da:	e000      	b.n	80063de <HAL_DMA_IRQHandler+0x9da>
 80063dc:	2300      	movs	r3, #0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	f000 824f 	beq.w	8006882 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063f0:	f003 031f 	and.w	r3, r3, #31
 80063f4:	2204      	movs	r2, #4
 80063f6:	409a      	lsls	r2, r3
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	4013      	ands	r3, r2
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f000 80dd 	beq.w	80065bc <HAL_DMA_IRQHandler+0xbb8>
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	f003 0304 	and.w	r3, r3, #4
 8006408:	2b00      	cmp	r3, #0
 800640a:	f000 80d7 	beq.w	80065bc <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006412:	f003 031f 	and.w	r3, r3, #31
 8006416:	2204      	movs	r2, #4
 8006418:	409a      	lsls	r2, r3
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006424:	2b00      	cmp	r3, #0
 8006426:	d059      	beq.n	80064dc <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d14a      	bne.n	80064c8 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006436:	2b00      	cmp	r3, #0
 8006438:	f000 8220 	beq.w	800687c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006444:	e21a      	b.n	800687c <HAL_DMA_IRQHandler+0xe78>
 8006446:	bf00      	nop
 8006448:	40020010 	.word	0x40020010
 800644c:	40020028 	.word	0x40020028
 8006450:	40020040 	.word	0x40020040
 8006454:	40020058 	.word	0x40020058
 8006458:	40020070 	.word	0x40020070
 800645c:	40020088 	.word	0x40020088
 8006460:	400200a0 	.word	0x400200a0
 8006464:	400200b8 	.word	0x400200b8
 8006468:	40020410 	.word	0x40020410
 800646c:	40020428 	.word	0x40020428
 8006470:	40020440 	.word	0x40020440
 8006474:	40020458 	.word	0x40020458
 8006478:	40020470 	.word	0x40020470
 800647c:	40020488 	.word	0x40020488
 8006480:	400204a0 	.word	0x400204a0
 8006484:	400204b8 	.word	0x400204b8
 8006488:	48022c08 	.word	0x48022c08
 800648c:	48022c1c 	.word	0x48022c1c
 8006490:	48022c30 	.word	0x48022c30
 8006494:	48022c44 	.word	0x48022c44
 8006498:	48022c58 	.word	0x48022c58
 800649c:	48022c6c 	.word	0x48022c6c
 80064a0:	48022c80 	.word	0x48022c80
 80064a4:	48022c94 	.word	0x48022c94
 80064a8:	58025408 	.word	0x58025408
 80064ac:	5802541c 	.word	0x5802541c
 80064b0:	58025430 	.word	0x58025430
 80064b4:	58025444 	.word	0x58025444
 80064b8:	58025458 	.word	0x58025458
 80064bc:	5802546c 	.word	0x5802546c
 80064c0:	58025480 	.word	0x58025480
 80064c4:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	f000 81d5 	beq.w	800687c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80064da:	e1cf      	b.n	800687c <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	f003 0320 	and.w	r3, r3, #32
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d160      	bne.n	80065a8 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a7f      	ldr	r2, [pc, #508]	; (80066e8 <HAL_DMA_IRQHandler+0xce4>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d04a      	beq.n	8006586 <HAL_DMA_IRQHandler+0xb82>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a7d      	ldr	r2, [pc, #500]	; (80066ec <HAL_DMA_IRQHandler+0xce8>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d045      	beq.n	8006586 <HAL_DMA_IRQHandler+0xb82>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a7c      	ldr	r2, [pc, #496]	; (80066f0 <HAL_DMA_IRQHandler+0xcec>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d040      	beq.n	8006586 <HAL_DMA_IRQHandler+0xb82>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a7a      	ldr	r2, [pc, #488]	; (80066f4 <HAL_DMA_IRQHandler+0xcf0>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d03b      	beq.n	8006586 <HAL_DMA_IRQHandler+0xb82>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a79      	ldr	r2, [pc, #484]	; (80066f8 <HAL_DMA_IRQHandler+0xcf4>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d036      	beq.n	8006586 <HAL_DMA_IRQHandler+0xb82>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a77      	ldr	r2, [pc, #476]	; (80066fc <HAL_DMA_IRQHandler+0xcf8>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d031      	beq.n	8006586 <HAL_DMA_IRQHandler+0xb82>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a76      	ldr	r2, [pc, #472]	; (8006700 <HAL_DMA_IRQHandler+0xcfc>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d02c      	beq.n	8006586 <HAL_DMA_IRQHandler+0xb82>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a74      	ldr	r2, [pc, #464]	; (8006704 <HAL_DMA_IRQHandler+0xd00>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d027      	beq.n	8006586 <HAL_DMA_IRQHandler+0xb82>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a73      	ldr	r2, [pc, #460]	; (8006708 <HAL_DMA_IRQHandler+0xd04>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d022      	beq.n	8006586 <HAL_DMA_IRQHandler+0xb82>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a71      	ldr	r2, [pc, #452]	; (800670c <HAL_DMA_IRQHandler+0xd08>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d01d      	beq.n	8006586 <HAL_DMA_IRQHandler+0xb82>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a70      	ldr	r2, [pc, #448]	; (8006710 <HAL_DMA_IRQHandler+0xd0c>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d018      	beq.n	8006586 <HAL_DMA_IRQHandler+0xb82>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a6e      	ldr	r2, [pc, #440]	; (8006714 <HAL_DMA_IRQHandler+0xd10>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d013      	beq.n	8006586 <HAL_DMA_IRQHandler+0xb82>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a6d      	ldr	r2, [pc, #436]	; (8006718 <HAL_DMA_IRQHandler+0xd14>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d00e      	beq.n	8006586 <HAL_DMA_IRQHandler+0xb82>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a6b      	ldr	r2, [pc, #428]	; (800671c <HAL_DMA_IRQHandler+0xd18>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d009      	beq.n	8006586 <HAL_DMA_IRQHandler+0xb82>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a6a      	ldr	r2, [pc, #424]	; (8006720 <HAL_DMA_IRQHandler+0xd1c>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d004      	beq.n	8006586 <HAL_DMA_IRQHandler+0xb82>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a68      	ldr	r2, [pc, #416]	; (8006724 <HAL_DMA_IRQHandler+0xd20>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d108      	bne.n	8006598 <HAL_DMA_IRQHandler+0xb94>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f022 0208 	bic.w	r2, r2, #8
 8006594:	601a      	str	r2, [r3, #0]
 8006596:	e007      	b.n	80065a8 <HAL_DMA_IRQHandler+0xba4>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f022 0204 	bic.w	r2, r2, #4
 80065a6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	f000 8165 	beq.w	800687c <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80065ba:	e15f      	b.n	800687c <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065c0:	f003 031f 	and.w	r3, r3, #31
 80065c4:	2202      	movs	r2, #2
 80065c6:	409a      	lsls	r2, r3
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	4013      	ands	r3, r2
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	f000 80c5 	beq.w	800675c <HAL_DMA_IRQHandler+0xd58>
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	f003 0302 	and.w	r3, r3, #2
 80065d8:	2b00      	cmp	r3, #0
 80065da:	f000 80bf 	beq.w	800675c <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065e2:	f003 031f 	and.w	r3, r3, #31
 80065e6:	2202      	movs	r2, #2
 80065e8:	409a      	lsls	r2, r3
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d018      	beq.n	800662a <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d109      	bne.n	8006616 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006606:	2b00      	cmp	r3, #0
 8006608:	f000 813a 	beq.w	8006880 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006614:	e134      	b.n	8006880 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800661a:	2b00      	cmp	r3, #0
 800661c:	f000 8130 	beq.w	8006880 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006628:	e12a      	b.n	8006880 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	f003 0320 	and.w	r3, r3, #32
 8006630:	2b00      	cmp	r3, #0
 8006632:	f040 8089 	bne.w	8006748 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a2b      	ldr	r2, [pc, #172]	; (80066e8 <HAL_DMA_IRQHandler+0xce4>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d04a      	beq.n	80066d6 <HAL_DMA_IRQHandler+0xcd2>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a29      	ldr	r2, [pc, #164]	; (80066ec <HAL_DMA_IRQHandler+0xce8>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d045      	beq.n	80066d6 <HAL_DMA_IRQHandler+0xcd2>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a28      	ldr	r2, [pc, #160]	; (80066f0 <HAL_DMA_IRQHandler+0xcec>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d040      	beq.n	80066d6 <HAL_DMA_IRQHandler+0xcd2>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a26      	ldr	r2, [pc, #152]	; (80066f4 <HAL_DMA_IRQHandler+0xcf0>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d03b      	beq.n	80066d6 <HAL_DMA_IRQHandler+0xcd2>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a25      	ldr	r2, [pc, #148]	; (80066f8 <HAL_DMA_IRQHandler+0xcf4>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d036      	beq.n	80066d6 <HAL_DMA_IRQHandler+0xcd2>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a23      	ldr	r2, [pc, #140]	; (80066fc <HAL_DMA_IRQHandler+0xcf8>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d031      	beq.n	80066d6 <HAL_DMA_IRQHandler+0xcd2>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a22      	ldr	r2, [pc, #136]	; (8006700 <HAL_DMA_IRQHandler+0xcfc>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d02c      	beq.n	80066d6 <HAL_DMA_IRQHandler+0xcd2>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a20      	ldr	r2, [pc, #128]	; (8006704 <HAL_DMA_IRQHandler+0xd00>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d027      	beq.n	80066d6 <HAL_DMA_IRQHandler+0xcd2>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a1f      	ldr	r2, [pc, #124]	; (8006708 <HAL_DMA_IRQHandler+0xd04>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d022      	beq.n	80066d6 <HAL_DMA_IRQHandler+0xcd2>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a1d      	ldr	r2, [pc, #116]	; (800670c <HAL_DMA_IRQHandler+0xd08>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d01d      	beq.n	80066d6 <HAL_DMA_IRQHandler+0xcd2>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a1c      	ldr	r2, [pc, #112]	; (8006710 <HAL_DMA_IRQHandler+0xd0c>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d018      	beq.n	80066d6 <HAL_DMA_IRQHandler+0xcd2>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a1a      	ldr	r2, [pc, #104]	; (8006714 <HAL_DMA_IRQHandler+0xd10>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d013      	beq.n	80066d6 <HAL_DMA_IRQHandler+0xcd2>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a19      	ldr	r2, [pc, #100]	; (8006718 <HAL_DMA_IRQHandler+0xd14>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d00e      	beq.n	80066d6 <HAL_DMA_IRQHandler+0xcd2>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a17      	ldr	r2, [pc, #92]	; (800671c <HAL_DMA_IRQHandler+0xd18>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d009      	beq.n	80066d6 <HAL_DMA_IRQHandler+0xcd2>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a16      	ldr	r2, [pc, #88]	; (8006720 <HAL_DMA_IRQHandler+0xd1c>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d004      	beq.n	80066d6 <HAL_DMA_IRQHandler+0xcd2>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a14      	ldr	r2, [pc, #80]	; (8006724 <HAL_DMA_IRQHandler+0xd20>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d128      	bne.n	8006728 <HAL_DMA_IRQHandler+0xd24>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f022 0214 	bic.w	r2, r2, #20
 80066e4:	601a      	str	r2, [r3, #0]
 80066e6:	e027      	b.n	8006738 <HAL_DMA_IRQHandler+0xd34>
 80066e8:	40020010 	.word	0x40020010
 80066ec:	40020028 	.word	0x40020028
 80066f0:	40020040 	.word	0x40020040
 80066f4:	40020058 	.word	0x40020058
 80066f8:	40020070 	.word	0x40020070
 80066fc:	40020088 	.word	0x40020088
 8006700:	400200a0 	.word	0x400200a0
 8006704:	400200b8 	.word	0x400200b8
 8006708:	40020410 	.word	0x40020410
 800670c:	40020428 	.word	0x40020428
 8006710:	40020440 	.word	0x40020440
 8006714:	40020458 	.word	0x40020458
 8006718:	40020470 	.word	0x40020470
 800671c:	40020488 	.word	0x40020488
 8006720:	400204a0 	.word	0x400204a0
 8006724:	400204b8 	.word	0x400204b8
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f022 020a 	bic.w	r2, r2, #10
 8006736:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800674c:	2b00      	cmp	r3, #0
 800674e:	f000 8097 	beq.w	8006880 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800675a:	e091      	b.n	8006880 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006760:	f003 031f 	and.w	r3, r3, #31
 8006764:	2208      	movs	r2, #8
 8006766:	409a      	lsls	r2, r3
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	4013      	ands	r3, r2
 800676c:	2b00      	cmp	r3, #0
 800676e:	f000 8088 	beq.w	8006882 <HAL_DMA_IRQHandler+0xe7e>
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	f003 0308 	and.w	r3, r3, #8
 8006778:	2b00      	cmp	r3, #0
 800677a:	f000 8082 	beq.w	8006882 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a41      	ldr	r2, [pc, #260]	; (8006888 <HAL_DMA_IRQHandler+0xe84>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d04a      	beq.n	800681e <HAL_DMA_IRQHandler+0xe1a>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a3f      	ldr	r2, [pc, #252]	; (800688c <HAL_DMA_IRQHandler+0xe88>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d045      	beq.n	800681e <HAL_DMA_IRQHandler+0xe1a>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a3e      	ldr	r2, [pc, #248]	; (8006890 <HAL_DMA_IRQHandler+0xe8c>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d040      	beq.n	800681e <HAL_DMA_IRQHandler+0xe1a>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a3c      	ldr	r2, [pc, #240]	; (8006894 <HAL_DMA_IRQHandler+0xe90>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d03b      	beq.n	800681e <HAL_DMA_IRQHandler+0xe1a>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a3b      	ldr	r2, [pc, #236]	; (8006898 <HAL_DMA_IRQHandler+0xe94>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d036      	beq.n	800681e <HAL_DMA_IRQHandler+0xe1a>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a39      	ldr	r2, [pc, #228]	; (800689c <HAL_DMA_IRQHandler+0xe98>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d031      	beq.n	800681e <HAL_DMA_IRQHandler+0xe1a>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a38      	ldr	r2, [pc, #224]	; (80068a0 <HAL_DMA_IRQHandler+0xe9c>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d02c      	beq.n	800681e <HAL_DMA_IRQHandler+0xe1a>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a36      	ldr	r2, [pc, #216]	; (80068a4 <HAL_DMA_IRQHandler+0xea0>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d027      	beq.n	800681e <HAL_DMA_IRQHandler+0xe1a>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a35      	ldr	r2, [pc, #212]	; (80068a8 <HAL_DMA_IRQHandler+0xea4>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d022      	beq.n	800681e <HAL_DMA_IRQHandler+0xe1a>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a33      	ldr	r2, [pc, #204]	; (80068ac <HAL_DMA_IRQHandler+0xea8>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d01d      	beq.n	800681e <HAL_DMA_IRQHandler+0xe1a>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a32      	ldr	r2, [pc, #200]	; (80068b0 <HAL_DMA_IRQHandler+0xeac>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d018      	beq.n	800681e <HAL_DMA_IRQHandler+0xe1a>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a30      	ldr	r2, [pc, #192]	; (80068b4 <HAL_DMA_IRQHandler+0xeb0>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d013      	beq.n	800681e <HAL_DMA_IRQHandler+0xe1a>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a2f      	ldr	r2, [pc, #188]	; (80068b8 <HAL_DMA_IRQHandler+0xeb4>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d00e      	beq.n	800681e <HAL_DMA_IRQHandler+0xe1a>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a2d      	ldr	r2, [pc, #180]	; (80068bc <HAL_DMA_IRQHandler+0xeb8>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d009      	beq.n	800681e <HAL_DMA_IRQHandler+0xe1a>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a2c      	ldr	r2, [pc, #176]	; (80068c0 <HAL_DMA_IRQHandler+0xebc>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d004      	beq.n	800681e <HAL_DMA_IRQHandler+0xe1a>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a2a      	ldr	r2, [pc, #168]	; (80068c4 <HAL_DMA_IRQHandler+0xec0>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d108      	bne.n	8006830 <HAL_DMA_IRQHandler+0xe2c>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f022 021c 	bic.w	r2, r2, #28
 800682c:	601a      	str	r2, [r3, #0]
 800682e:	e007      	b.n	8006840 <HAL_DMA_IRQHandler+0xe3c>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f022 020e 	bic.w	r2, r2, #14
 800683e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006844:	f003 031f 	and.w	r3, r3, #31
 8006848:	2201      	movs	r2, #1
 800684a:	409a      	lsls	r2, r3
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2201      	movs	r2, #1
 800685a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800686a:	2b00      	cmp	r3, #0
 800686c:	d009      	beq.n	8006882 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	4798      	blx	r3
 8006876:	e004      	b.n	8006882 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8006878:	bf00      	nop
 800687a:	e002      	b.n	8006882 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800687c:	bf00      	nop
 800687e:	e000      	b.n	8006882 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006880:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006882:	3728      	adds	r7, #40	; 0x28
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}
 8006888:	40020010 	.word	0x40020010
 800688c:	40020028 	.word	0x40020028
 8006890:	40020040 	.word	0x40020040
 8006894:	40020058 	.word	0x40020058
 8006898:	40020070 	.word	0x40020070
 800689c:	40020088 	.word	0x40020088
 80068a0:	400200a0 	.word	0x400200a0
 80068a4:	400200b8 	.word	0x400200b8
 80068a8:	40020410 	.word	0x40020410
 80068ac:	40020428 	.word	0x40020428
 80068b0:	40020440 	.word	0x40020440
 80068b4:	40020458 	.word	0x40020458
 80068b8:	40020470 	.word	0x40020470
 80068bc:	40020488 	.word	0x40020488
 80068c0:	400204a0 	.word	0x400204a0
 80068c4:	400204b8 	.word	0x400204b8

080068c8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	370c      	adds	r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b087      	sub	sp, #28
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	607a      	str	r2, [r7, #4]
 80068ec:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068f2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068f8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a7f      	ldr	r2, [pc, #508]	; (8006afc <DMA_SetConfig+0x21c>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d072      	beq.n	80069ea <DMA_SetConfig+0x10a>
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a7d      	ldr	r2, [pc, #500]	; (8006b00 <DMA_SetConfig+0x220>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d06d      	beq.n	80069ea <DMA_SetConfig+0x10a>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a7c      	ldr	r2, [pc, #496]	; (8006b04 <DMA_SetConfig+0x224>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d068      	beq.n	80069ea <DMA_SetConfig+0x10a>
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a7a      	ldr	r2, [pc, #488]	; (8006b08 <DMA_SetConfig+0x228>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d063      	beq.n	80069ea <DMA_SetConfig+0x10a>
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a79      	ldr	r2, [pc, #484]	; (8006b0c <DMA_SetConfig+0x22c>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d05e      	beq.n	80069ea <DMA_SetConfig+0x10a>
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a77      	ldr	r2, [pc, #476]	; (8006b10 <DMA_SetConfig+0x230>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d059      	beq.n	80069ea <DMA_SetConfig+0x10a>
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a76      	ldr	r2, [pc, #472]	; (8006b14 <DMA_SetConfig+0x234>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d054      	beq.n	80069ea <DMA_SetConfig+0x10a>
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a74      	ldr	r2, [pc, #464]	; (8006b18 <DMA_SetConfig+0x238>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d04f      	beq.n	80069ea <DMA_SetConfig+0x10a>
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a73      	ldr	r2, [pc, #460]	; (8006b1c <DMA_SetConfig+0x23c>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d04a      	beq.n	80069ea <DMA_SetConfig+0x10a>
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a71      	ldr	r2, [pc, #452]	; (8006b20 <DMA_SetConfig+0x240>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d045      	beq.n	80069ea <DMA_SetConfig+0x10a>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a70      	ldr	r2, [pc, #448]	; (8006b24 <DMA_SetConfig+0x244>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d040      	beq.n	80069ea <DMA_SetConfig+0x10a>
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a6e      	ldr	r2, [pc, #440]	; (8006b28 <DMA_SetConfig+0x248>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d03b      	beq.n	80069ea <DMA_SetConfig+0x10a>
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a6d      	ldr	r2, [pc, #436]	; (8006b2c <DMA_SetConfig+0x24c>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d036      	beq.n	80069ea <DMA_SetConfig+0x10a>
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a6b      	ldr	r2, [pc, #428]	; (8006b30 <DMA_SetConfig+0x250>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d031      	beq.n	80069ea <DMA_SetConfig+0x10a>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a6a      	ldr	r2, [pc, #424]	; (8006b34 <DMA_SetConfig+0x254>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d02c      	beq.n	80069ea <DMA_SetConfig+0x10a>
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a68      	ldr	r2, [pc, #416]	; (8006b38 <DMA_SetConfig+0x258>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d027      	beq.n	80069ea <DMA_SetConfig+0x10a>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a67      	ldr	r2, [pc, #412]	; (8006b3c <DMA_SetConfig+0x25c>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d022      	beq.n	80069ea <DMA_SetConfig+0x10a>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a65      	ldr	r2, [pc, #404]	; (8006b40 <DMA_SetConfig+0x260>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d01d      	beq.n	80069ea <DMA_SetConfig+0x10a>
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a64      	ldr	r2, [pc, #400]	; (8006b44 <DMA_SetConfig+0x264>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d018      	beq.n	80069ea <DMA_SetConfig+0x10a>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a62      	ldr	r2, [pc, #392]	; (8006b48 <DMA_SetConfig+0x268>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d013      	beq.n	80069ea <DMA_SetConfig+0x10a>
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a61      	ldr	r2, [pc, #388]	; (8006b4c <DMA_SetConfig+0x26c>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d00e      	beq.n	80069ea <DMA_SetConfig+0x10a>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a5f      	ldr	r2, [pc, #380]	; (8006b50 <DMA_SetConfig+0x270>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d009      	beq.n	80069ea <DMA_SetConfig+0x10a>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a5e      	ldr	r2, [pc, #376]	; (8006b54 <DMA_SetConfig+0x274>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d004      	beq.n	80069ea <DMA_SetConfig+0x10a>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a5c      	ldr	r2, [pc, #368]	; (8006b58 <DMA_SetConfig+0x278>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d101      	bne.n	80069ee <DMA_SetConfig+0x10e>
 80069ea:	2301      	movs	r3, #1
 80069ec:	e000      	b.n	80069f0 <DMA_SetConfig+0x110>
 80069ee:	2300      	movs	r3, #0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00d      	beq.n	8006a10 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069f8:	68fa      	ldr	r2, [r7, #12]
 80069fa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80069fc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d004      	beq.n	8006a10 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006a0e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a39      	ldr	r2, [pc, #228]	; (8006afc <DMA_SetConfig+0x21c>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d04a      	beq.n	8006ab0 <DMA_SetConfig+0x1d0>
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a38      	ldr	r2, [pc, #224]	; (8006b00 <DMA_SetConfig+0x220>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d045      	beq.n	8006ab0 <DMA_SetConfig+0x1d0>
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a36      	ldr	r2, [pc, #216]	; (8006b04 <DMA_SetConfig+0x224>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d040      	beq.n	8006ab0 <DMA_SetConfig+0x1d0>
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a35      	ldr	r2, [pc, #212]	; (8006b08 <DMA_SetConfig+0x228>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d03b      	beq.n	8006ab0 <DMA_SetConfig+0x1d0>
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a33      	ldr	r2, [pc, #204]	; (8006b0c <DMA_SetConfig+0x22c>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d036      	beq.n	8006ab0 <DMA_SetConfig+0x1d0>
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a32      	ldr	r2, [pc, #200]	; (8006b10 <DMA_SetConfig+0x230>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d031      	beq.n	8006ab0 <DMA_SetConfig+0x1d0>
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a30      	ldr	r2, [pc, #192]	; (8006b14 <DMA_SetConfig+0x234>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d02c      	beq.n	8006ab0 <DMA_SetConfig+0x1d0>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a2f      	ldr	r2, [pc, #188]	; (8006b18 <DMA_SetConfig+0x238>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d027      	beq.n	8006ab0 <DMA_SetConfig+0x1d0>
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a2d      	ldr	r2, [pc, #180]	; (8006b1c <DMA_SetConfig+0x23c>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d022      	beq.n	8006ab0 <DMA_SetConfig+0x1d0>
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a2c      	ldr	r2, [pc, #176]	; (8006b20 <DMA_SetConfig+0x240>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d01d      	beq.n	8006ab0 <DMA_SetConfig+0x1d0>
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a2a      	ldr	r2, [pc, #168]	; (8006b24 <DMA_SetConfig+0x244>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d018      	beq.n	8006ab0 <DMA_SetConfig+0x1d0>
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a29      	ldr	r2, [pc, #164]	; (8006b28 <DMA_SetConfig+0x248>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d013      	beq.n	8006ab0 <DMA_SetConfig+0x1d0>
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a27      	ldr	r2, [pc, #156]	; (8006b2c <DMA_SetConfig+0x24c>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d00e      	beq.n	8006ab0 <DMA_SetConfig+0x1d0>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a26      	ldr	r2, [pc, #152]	; (8006b30 <DMA_SetConfig+0x250>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d009      	beq.n	8006ab0 <DMA_SetConfig+0x1d0>
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a24      	ldr	r2, [pc, #144]	; (8006b34 <DMA_SetConfig+0x254>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d004      	beq.n	8006ab0 <DMA_SetConfig+0x1d0>
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a23      	ldr	r2, [pc, #140]	; (8006b38 <DMA_SetConfig+0x258>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d101      	bne.n	8006ab4 <DMA_SetConfig+0x1d4>
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e000      	b.n	8006ab6 <DMA_SetConfig+0x1d6>
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d059      	beq.n	8006b6e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006abe:	f003 031f 	and.w	r3, r3, #31
 8006ac2:	223f      	movs	r2, #63	; 0x3f
 8006ac4:	409a      	lsls	r2, r3
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006ad8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	683a      	ldr	r2, [r7, #0]
 8006ae0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	2b40      	cmp	r3, #64	; 0x40
 8006ae8:	d138      	bne.n	8006b5c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	68ba      	ldr	r2, [r7, #8]
 8006af8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006afa:	e0ae      	b.n	8006c5a <DMA_SetConfig+0x37a>
 8006afc:	40020010 	.word	0x40020010
 8006b00:	40020028 	.word	0x40020028
 8006b04:	40020040 	.word	0x40020040
 8006b08:	40020058 	.word	0x40020058
 8006b0c:	40020070 	.word	0x40020070
 8006b10:	40020088 	.word	0x40020088
 8006b14:	400200a0 	.word	0x400200a0
 8006b18:	400200b8 	.word	0x400200b8
 8006b1c:	40020410 	.word	0x40020410
 8006b20:	40020428 	.word	0x40020428
 8006b24:	40020440 	.word	0x40020440
 8006b28:	40020458 	.word	0x40020458
 8006b2c:	40020470 	.word	0x40020470
 8006b30:	40020488 	.word	0x40020488
 8006b34:	400204a0 	.word	0x400204a0
 8006b38:	400204b8 	.word	0x400204b8
 8006b3c:	58025408 	.word	0x58025408
 8006b40:	5802541c 	.word	0x5802541c
 8006b44:	58025430 	.word	0x58025430
 8006b48:	58025444 	.word	0x58025444
 8006b4c:	58025458 	.word	0x58025458
 8006b50:	5802546c 	.word	0x5802546c
 8006b54:	58025480 	.word	0x58025480
 8006b58:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	68ba      	ldr	r2, [r7, #8]
 8006b62:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	60da      	str	r2, [r3, #12]
}
 8006b6c:	e075      	b.n	8006c5a <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a3d      	ldr	r2, [pc, #244]	; (8006c68 <DMA_SetConfig+0x388>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d04a      	beq.n	8006c0e <DMA_SetConfig+0x32e>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a3b      	ldr	r2, [pc, #236]	; (8006c6c <DMA_SetConfig+0x38c>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d045      	beq.n	8006c0e <DMA_SetConfig+0x32e>
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a3a      	ldr	r2, [pc, #232]	; (8006c70 <DMA_SetConfig+0x390>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d040      	beq.n	8006c0e <DMA_SetConfig+0x32e>
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a38      	ldr	r2, [pc, #224]	; (8006c74 <DMA_SetConfig+0x394>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d03b      	beq.n	8006c0e <DMA_SetConfig+0x32e>
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a37      	ldr	r2, [pc, #220]	; (8006c78 <DMA_SetConfig+0x398>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d036      	beq.n	8006c0e <DMA_SetConfig+0x32e>
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a35      	ldr	r2, [pc, #212]	; (8006c7c <DMA_SetConfig+0x39c>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d031      	beq.n	8006c0e <DMA_SetConfig+0x32e>
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a34      	ldr	r2, [pc, #208]	; (8006c80 <DMA_SetConfig+0x3a0>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d02c      	beq.n	8006c0e <DMA_SetConfig+0x32e>
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a32      	ldr	r2, [pc, #200]	; (8006c84 <DMA_SetConfig+0x3a4>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d027      	beq.n	8006c0e <DMA_SetConfig+0x32e>
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a31      	ldr	r2, [pc, #196]	; (8006c88 <DMA_SetConfig+0x3a8>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d022      	beq.n	8006c0e <DMA_SetConfig+0x32e>
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a2f      	ldr	r2, [pc, #188]	; (8006c8c <DMA_SetConfig+0x3ac>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d01d      	beq.n	8006c0e <DMA_SetConfig+0x32e>
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a2e      	ldr	r2, [pc, #184]	; (8006c90 <DMA_SetConfig+0x3b0>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d018      	beq.n	8006c0e <DMA_SetConfig+0x32e>
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a2c      	ldr	r2, [pc, #176]	; (8006c94 <DMA_SetConfig+0x3b4>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d013      	beq.n	8006c0e <DMA_SetConfig+0x32e>
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a2b      	ldr	r2, [pc, #172]	; (8006c98 <DMA_SetConfig+0x3b8>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d00e      	beq.n	8006c0e <DMA_SetConfig+0x32e>
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a29      	ldr	r2, [pc, #164]	; (8006c9c <DMA_SetConfig+0x3bc>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d009      	beq.n	8006c0e <DMA_SetConfig+0x32e>
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a28      	ldr	r2, [pc, #160]	; (8006ca0 <DMA_SetConfig+0x3c0>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d004      	beq.n	8006c0e <DMA_SetConfig+0x32e>
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a26      	ldr	r2, [pc, #152]	; (8006ca4 <DMA_SetConfig+0x3c4>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d101      	bne.n	8006c12 <DMA_SetConfig+0x332>
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e000      	b.n	8006c14 <DMA_SetConfig+0x334>
 8006c12:	2300      	movs	r3, #0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d020      	beq.n	8006c5a <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c1c:	f003 031f 	and.w	r3, r3, #31
 8006c20:	2201      	movs	r2, #1
 8006c22:	409a      	lsls	r2, r3
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	683a      	ldr	r2, [r7, #0]
 8006c2e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	2b40      	cmp	r3, #64	; 0x40
 8006c36:	d108      	bne.n	8006c4a <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68ba      	ldr	r2, [r7, #8]
 8006c46:	60da      	str	r2, [r3, #12]
}
 8006c48:	e007      	b.n	8006c5a <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	68ba      	ldr	r2, [r7, #8]
 8006c50:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	60da      	str	r2, [r3, #12]
}
 8006c5a:	bf00      	nop
 8006c5c:	371c      	adds	r7, #28
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop
 8006c68:	48022c08 	.word	0x48022c08
 8006c6c:	48022c1c 	.word	0x48022c1c
 8006c70:	48022c30 	.word	0x48022c30
 8006c74:	48022c44 	.word	0x48022c44
 8006c78:	48022c58 	.word	0x48022c58
 8006c7c:	48022c6c 	.word	0x48022c6c
 8006c80:	48022c80 	.word	0x48022c80
 8006c84:	48022c94 	.word	0x48022c94
 8006c88:	58025408 	.word	0x58025408
 8006c8c:	5802541c 	.word	0x5802541c
 8006c90:	58025430 	.word	0x58025430
 8006c94:	58025444 	.word	0x58025444
 8006c98:	58025458 	.word	0x58025458
 8006c9c:	5802546c 	.word	0x5802546c
 8006ca0:	58025480 	.word	0x58025480
 8006ca4:	58025494 	.word	0x58025494

08006ca8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b085      	sub	sp, #20
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a42      	ldr	r2, [pc, #264]	; (8006dc0 <DMA_CalcBaseAndBitshift+0x118>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d04a      	beq.n	8006d50 <DMA_CalcBaseAndBitshift+0xa8>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a41      	ldr	r2, [pc, #260]	; (8006dc4 <DMA_CalcBaseAndBitshift+0x11c>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d045      	beq.n	8006d50 <DMA_CalcBaseAndBitshift+0xa8>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a3f      	ldr	r2, [pc, #252]	; (8006dc8 <DMA_CalcBaseAndBitshift+0x120>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d040      	beq.n	8006d50 <DMA_CalcBaseAndBitshift+0xa8>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a3e      	ldr	r2, [pc, #248]	; (8006dcc <DMA_CalcBaseAndBitshift+0x124>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d03b      	beq.n	8006d50 <DMA_CalcBaseAndBitshift+0xa8>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a3c      	ldr	r2, [pc, #240]	; (8006dd0 <DMA_CalcBaseAndBitshift+0x128>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d036      	beq.n	8006d50 <DMA_CalcBaseAndBitshift+0xa8>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a3b      	ldr	r2, [pc, #236]	; (8006dd4 <DMA_CalcBaseAndBitshift+0x12c>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d031      	beq.n	8006d50 <DMA_CalcBaseAndBitshift+0xa8>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a39      	ldr	r2, [pc, #228]	; (8006dd8 <DMA_CalcBaseAndBitshift+0x130>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d02c      	beq.n	8006d50 <DMA_CalcBaseAndBitshift+0xa8>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a38      	ldr	r2, [pc, #224]	; (8006ddc <DMA_CalcBaseAndBitshift+0x134>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d027      	beq.n	8006d50 <DMA_CalcBaseAndBitshift+0xa8>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a36      	ldr	r2, [pc, #216]	; (8006de0 <DMA_CalcBaseAndBitshift+0x138>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d022      	beq.n	8006d50 <DMA_CalcBaseAndBitshift+0xa8>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a35      	ldr	r2, [pc, #212]	; (8006de4 <DMA_CalcBaseAndBitshift+0x13c>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d01d      	beq.n	8006d50 <DMA_CalcBaseAndBitshift+0xa8>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a33      	ldr	r2, [pc, #204]	; (8006de8 <DMA_CalcBaseAndBitshift+0x140>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d018      	beq.n	8006d50 <DMA_CalcBaseAndBitshift+0xa8>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a32      	ldr	r2, [pc, #200]	; (8006dec <DMA_CalcBaseAndBitshift+0x144>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d013      	beq.n	8006d50 <DMA_CalcBaseAndBitshift+0xa8>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a30      	ldr	r2, [pc, #192]	; (8006df0 <DMA_CalcBaseAndBitshift+0x148>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d00e      	beq.n	8006d50 <DMA_CalcBaseAndBitshift+0xa8>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a2f      	ldr	r2, [pc, #188]	; (8006df4 <DMA_CalcBaseAndBitshift+0x14c>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d009      	beq.n	8006d50 <DMA_CalcBaseAndBitshift+0xa8>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a2d      	ldr	r2, [pc, #180]	; (8006df8 <DMA_CalcBaseAndBitshift+0x150>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d004      	beq.n	8006d50 <DMA_CalcBaseAndBitshift+0xa8>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a2c      	ldr	r2, [pc, #176]	; (8006dfc <DMA_CalcBaseAndBitshift+0x154>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d101      	bne.n	8006d54 <DMA_CalcBaseAndBitshift+0xac>
 8006d50:	2301      	movs	r3, #1
 8006d52:	e000      	b.n	8006d56 <DMA_CalcBaseAndBitshift+0xae>
 8006d54:	2300      	movs	r3, #0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d024      	beq.n	8006da4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	3b10      	subs	r3, #16
 8006d62:	4a27      	ldr	r2, [pc, #156]	; (8006e00 <DMA_CalcBaseAndBitshift+0x158>)
 8006d64:	fba2 2303 	umull	r2, r3, r2, r3
 8006d68:	091b      	lsrs	r3, r3, #4
 8006d6a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f003 0307 	and.w	r3, r3, #7
 8006d72:	4a24      	ldr	r2, [pc, #144]	; (8006e04 <DMA_CalcBaseAndBitshift+0x15c>)
 8006d74:	5cd3      	ldrb	r3, [r2, r3]
 8006d76:	461a      	mov	r2, r3
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2b03      	cmp	r3, #3
 8006d80:	d908      	bls.n	8006d94 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	461a      	mov	r2, r3
 8006d88:	4b1f      	ldr	r3, [pc, #124]	; (8006e08 <DMA_CalcBaseAndBitshift+0x160>)
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	1d1a      	adds	r2, r3, #4
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	659a      	str	r2, [r3, #88]	; 0x58
 8006d92:	e00d      	b.n	8006db0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	461a      	mov	r2, r3
 8006d9a:	4b1b      	ldr	r3, [pc, #108]	; (8006e08 <DMA_CalcBaseAndBitshift+0x160>)
 8006d9c:	4013      	ands	r3, r2
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	6593      	str	r3, [r2, #88]	; 0x58
 8006da2:	e005      	b.n	8006db0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3714      	adds	r7, #20
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr
 8006dc0:	40020010 	.word	0x40020010
 8006dc4:	40020028 	.word	0x40020028
 8006dc8:	40020040 	.word	0x40020040
 8006dcc:	40020058 	.word	0x40020058
 8006dd0:	40020070 	.word	0x40020070
 8006dd4:	40020088 	.word	0x40020088
 8006dd8:	400200a0 	.word	0x400200a0
 8006ddc:	400200b8 	.word	0x400200b8
 8006de0:	40020410 	.word	0x40020410
 8006de4:	40020428 	.word	0x40020428
 8006de8:	40020440 	.word	0x40020440
 8006dec:	40020458 	.word	0x40020458
 8006df0:	40020470 	.word	0x40020470
 8006df4:	40020488 	.word	0x40020488
 8006df8:	400204a0 	.word	0x400204a0
 8006dfc:	400204b8 	.word	0x400204b8
 8006e00:	aaaaaaab 	.word	0xaaaaaaab
 8006e04:	08011c90 	.word	0x08011c90
 8006e08:	fffffc00 	.word	0xfffffc00

08006e0c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b085      	sub	sp, #20
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e14:	2300      	movs	r3, #0
 8006e16:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	699b      	ldr	r3, [r3, #24]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d120      	bne.n	8006e62 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e24:	2b03      	cmp	r3, #3
 8006e26:	d858      	bhi.n	8006eda <DMA_CheckFifoParam+0xce>
 8006e28:	a201      	add	r2, pc, #4	; (adr r2, 8006e30 <DMA_CheckFifoParam+0x24>)
 8006e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e2e:	bf00      	nop
 8006e30:	08006e41 	.word	0x08006e41
 8006e34:	08006e53 	.word	0x08006e53
 8006e38:	08006e41 	.word	0x08006e41
 8006e3c:	08006edb 	.word	0x08006edb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d048      	beq.n	8006ede <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006e50:	e045      	b.n	8006ede <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e56:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006e5a:	d142      	bne.n	8006ee2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006e60:	e03f      	b.n	8006ee2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	699b      	ldr	r3, [r3, #24]
 8006e66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e6a:	d123      	bne.n	8006eb4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e70:	2b03      	cmp	r3, #3
 8006e72:	d838      	bhi.n	8006ee6 <DMA_CheckFifoParam+0xda>
 8006e74:	a201      	add	r2, pc, #4	; (adr r2, 8006e7c <DMA_CheckFifoParam+0x70>)
 8006e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e7a:	bf00      	nop
 8006e7c:	08006e8d 	.word	0x08006e8d
 8006e80:	08006e93 	.word	0x08006e93
 8006e84:	08006e8d 	.word	0x08006e8d
 8006e88:	08006ea5 	.word	0x08006ea5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	73fb      	strb	r3, [r7, #15]
        break;
 8006e90:	e030      	b.n	8006ef4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d025      	beq.n	8006eea <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006ea2:	e022      	b.n	8006eea <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006eac:	d11f      	bne.n	8006eee <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006eb2:	e01c      	b.n	8006eee <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb8:	2b02      	cmp	r3, #2
 8006eba:	d902      	bls.n	8006ec2 <DMA_CheckFifoParam+0xb6>
 8006ebc:	2b03      	cmp	r3, #3
 8006ebe:	d003      	beq.n	8006ec8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006ec0:	e018      	b.n	8006ef4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	73fb      	strb	r3, [r7, #15]
        break;
 8006ec6:	e015      	b.n	8006ef4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ecc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d00e      	beq.n	8006ef2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	73fb      	strb	r3, [r7, #15]
    break;
 8006ed8:	e00b      	b.n	8006ef2 <DMA_CheckFifoParam+0xe6>
        break;
 8006eda:	bf00      	nop
 8006edc:	e00a      	b.n	8006ef4 <DMA_CheckFifoParam+0xe8>
        break;
 8006ede:	bf00      	nop
 8006ee0:	e008      	b.n	8006ef4 <DMA_CheckFifoParam+0xe8>
        break;
 8006ee2:	bf00      	nop
 8006ee4:	e006      	b.n	8006ef4 <DMA_CheckFifoParam+0xe8>
        break;
 8006ee6:	bf00      	nop
 8006ee8:	e004      	b.n	8006ef4 <DMA_CheckFifoParam+0xe8>
        break;
 8006eea:	bf00      	nop
 8006eec:	e002      	b.n	8006ef4 <DMA_CheckFifoParam+0xe8>
        break;
 8006eee:	bf00      	nop
 8006ef0:	e000      	b.n	8006ef4 <DMA_CheckFifoParam+0xe8>
    break;
 8006ef2:	bf00      	nop
    }
  }

  return status;
 8006ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3714      	adds	r7, #20
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop

08006f04 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b085      	sub	sp, #20
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a38      	ldr	r2, [pc, #224]	; (8006ff8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d022      	beq.n	8006f62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a36      	ldr	r2, [pc, #216]	; (8006ffc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d01d      	beq.n	8006f62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a35      	ldr	r2, [pc, #212]	; (8007000 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d018      	beq.n	8006f62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a33      	ldr	r2, [pc, #204]	; (8007004 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d013      	beq.n	8006f62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a32      	ldr	r2, [pc, #200]	; (8007008 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d00e      	beq.n	8006f62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a30      	ldr	r2, [pc, #192]	; (800700c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d009      	beq.n	8006f62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a2f      	ldr	r2, [pc, #188]	; (8007010 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d004      	beq.n	8006f62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a2d      	ldr	r2, [pc, #180]	; (8007014 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d101      	bne.n	8006f66 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006f62:	2301      	movs	r3, #1
 8006f64:	e000      	b.n	8006f68 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006f66:	2300      	movs	r3, #0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d01a      	beq.n	8006fa2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	3b08      	subs	r3, #8
 8006f74:	4a28      	ldr	r2, [pc, #160]	; (8007018 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006f76:	fba2 2303 	umull	r2, r3, r2, r3
 8006f7a:	091b      	lsrs	r3, r3, #4
 8006f7c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	4b26      	ldr	r3, [pc, #152]	; (800701c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006f82:	4413      	add	r3, r2
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	461a      	mov	r2, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4a24      	ldr	r2, [pc, #144]	; (8007020 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006f90:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f003 031f 	and.w	r3, r3, #31
 8006f98:	2201      	movs	r2, #1
 8006f9a:	409a      	lsls	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006fa0:	e024      	b.n	8006fec <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	3b10      	subs	r3, #16
 8006faa:	4a1e      	ldr	r2, [pc, #120]	; (8007024 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006fac:	fba2 2303 	umull	r2, r3, r2, r3
 8006fb0:	091b      	lsrs	r3, r3, #4
 8006fb2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	4a1c      	ldr	r2, [pc, #112]	; (8007028 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d806      	bhi.n	8006fca <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	4a1b      	ldr	r2, [pc, #108]	; (800702c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d902      	bls.n	8006fca <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	3308      	adds	r3, #8
 8006fc8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	4b18      	ldr	r3, [pc, #96]	; (8007030 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006fce:	4413      	add	r3, r2
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a16      	ldr	r2, [pc, #88]	; (8007034 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006fdc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f003 031f 	and.w	r3, r3, #31
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	409a      	lsls	r2, r3
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006fec:	bf00      	nop
 8006fee:	3714      	adds	r7, #20
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr
 8006ff8:	58025408 	.word	0x58025408
 8006ffc:	5802541c 	.word	0x5802541c
 8007000:	58025430 	.word	0x58025430
 8007004:	58025444 	.word	0x58025444
 8007008:	58025458 	.word	0x58025458
 800700c:	5802546c 	.word	0x5802546c
 8007010:	58025480 	.word	0x58025480
 8007014:	58025494 	.word	0x58025494
 8007018:	cccccccd 	.word	0xcccccccd
 800701c:	16009600 	.word	0x16009600
 8007020:	58025880 	.word	0x58025880
 8007024:	aaaaaaab 	.word	0xaaaaaaab
 8007028:	400204b8 	.word	0x400204b8
 800702c:	4002040f 	.word	0x4002040f
 8007030:	10008200 	.word	0x10008200
 8007034:	40020880 	.word	0x40020880

08007038 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007038:	b480      	push	{r7}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	b2db      	uxtb	r3, r3
 8007046:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d04a      	beq.n	80070e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2b08      	cmp	r3, #8
 8007052:	d847      	bhi.n	80070e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a25      	ldr	r2, [pc, #148]	; (80070f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d022      	beq.n	80070a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a24      	ldr	r2, [pc, #144]	; (80070f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d01d      	beq.n	80070a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a22      	ldr	r2, [pc, #136]	; (80070f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d018      	beq.n	80070a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a21      	ldr	r2, [pc, #132]	; (80070fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d013      	beq.n	80070a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a1f      	ldr	r2, [pc, #124]	; (8007100 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d00e      	beq.n	80070a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a1e      	ldr	r2, [pc, #120]	; (8007104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d009      	beq.n	80070a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a1c      	ldr	r2, [pc, #112]	; (8007108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d004      	beq.n	80070a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a1b      	ldr	r2, [pc, #108]	; (800710c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d101      	bne.n	80070a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80070a4:	2301      	movs	r3, #1
 80070a6:	e000      	b.n	80070aa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80070a8:	2300      	movs	r3, #0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00a      	beq.n	80070c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80070ae:	68fa      	ldr	r2, [r7, #12]
 80070b0:	4b17      	ldr	r3, [pc, #92]	; (8007110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80070b2:	4413      	add	r3, r2
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	461a      	mov	r2, r3
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	4a15      	ldr	r2, [pc, #84]	; (8007114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80070c0:	671a      	str	r2, [r3, #112]	; 0x70
 80070c2:	e009      	b.n	80070d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80070c4:	68fa      	ldr	r2, [r7, #12]
 80070c6:	4b14      	ldr	r3, [pc, #80]	; (8007118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80070c8:	4413      	add	r3, r2
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	461a      	mov	r2, r3
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4a11      	ldr	r2, [pc, #68]	; (800711c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80070d6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	3b01      	subs	r3, #1
 80070dc:	2201      	movs	r2, #1
 80070de:	409a      	lsls	r2, r3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80070e4:	bf00      	nop
 80070e6:	3714      	adds	r7, #20
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr
 80070f0:	58025408 	.word	0x58025408
 80070f4:	5802541c 	.word	0x5802541c
 80070f8:	58025430 	.word	0x58025430
 80070fc:	58025444 	.word	0x58025444
 8007100:	58025458 	.word	0x58025458
 8007104:	5802546c 	.word	0x5802546c
 8007108:	58025480 	.word	0x58025480
 800710c:	58025494 	.word	0x58025494
 8007110:	1600963f 	.word	0x1600963f
 8007114:	58025940 	.word	0x58025940
 8007118:	1000823f 	.word	0x1000823f
 800711c:	40020940 	.word	0x40020940

08007120 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007120:	b480      	push	{r7}
 8007122:	b089      	sub	sp, #36	; 0x24
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800712a:	2300      	movs	r3, #0
 800712c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800712e:	4b89      	ldr	r3, [pc, #548]	; (8007354 <HAL_GPIO_Init+0x234>)
 8007130:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007132:	e194      	b.n	800745e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	2101      	movs	r1, #1
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	fa01 f303 	lsl.w	r3, r1, r3
 8007140:	4013      	ands	r3, r2
 8007142:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	2b00      	cmp	r3, #0
 8007148:	f000 8186 	beq.w	8007458 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	f003 0303 	and.w	r3, r3, #3
 8007154:	2b01      	cmp	r3, #1
 8007156:	d005      	beq.n	8007164 <HAL_GPIO_Init+0x44>
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	f003 0303 	and.w	r3, r3, #3
 8007160:	2b02      	cmp	r3, #2
 8007162:	d130      	bne.n	80071c6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800716a:	69fb      	ldr	r3, [r7, #28]
 800716c:	005b      	lsls	r3, r3, #1
 800716e:	2203      	movs	r2, #3
 8007170:	fa02 f303 	lsl.w	r3, r2, r3
 8007174:	43db      	mvns	r3, r3
 8007176:	69ba      	ldr	r2, [r7, #24]
 8007178:	4013      	ands	r3, r2
 800717a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	68da      	ldr	r2, [r3, #12]
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	005b      	lsls	r3, r3, #1
 8007184:	fa02 f303 	lsl.w	r3, r2, r3
 8007188:	69ba      	ldr	r2, [r7, #24]
 800718a:	4313      	orrs	r3, r2
 800718c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	69ba      	ldr	r2, [r7, #24]
 8007192:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800719a:	2201      	movs	r2, #1
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	fa02 f303 	lsl.w	r3, r2, r3
 80071a2:	43db      	mvns	r3, r3
 80071a4:	69ba      	ldr	r2, [r7, #24]
 80071a6:	4013      	ands	r3, r2
 80071a8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	091b      	lsrs	r3, r3, #4
 80071b0:	f003 0201 	and.w	r2, r3, #1
 80071b4:	69fb      	ldr	r3, [r7, #28]
 80071b6:	fa02 f303 	lsl.w	r3, r2, r3
 80071ba:	69ba      	ldr	r2, [r7, #24]
 80071bc:	4313      	orrs	r3, r2
 80071be:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	69ba      	ldr	r2, [r7, #24]
 80071c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	f003 0303 	and.w	r3, r3, #3
 80071ce:	2b03      	cmp	r3, #3
 80071d0:	d017      	beq.n	8007202 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	005b      	lsls	r3, r3, #1
 80071dc:	2203      	movs	r2, #3
 80071de:	fa02 f303 	lsl.w	r3, r2, r3
 80071e2:	43db      	mvns	r3, r3
 80071e4:	69ba      	ldr	r2, [r7, #24]
 80071e6:	4013      	ands	r3, r2
 80071e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	689a      	ldr	r2, [r3, #8]
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	005b      	lsls	r3, r3, #1
 80071f2:	fa02 f303 	lsl.w	r3, r2, r3
 80071f6:	69ba      	ldr	r2, [r7, #24]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	69ba      	ldr	r2, [r7, #24]
 8007200:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	f003 0303 	and.w	r3, r3, #3
 800720a:	2b02      	cmp	r3, #2
 800720c:	d123      	bne.n	8007256 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800720e:	69fb      	ldr	r3, [r7, #28]
 8007210:	08da      	lsrs	r2, r3, #3
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	3208      	adds	r2, #8
 8007216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800721a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	f003 0307 	and.w	r3, r3, #7
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	220f      	movs	r2, #15
 8007226:	fa02 f303 	lsl.w	r3, r2, r3
 800722a:	43db      	mvns	r3, r3
 800722c:	69ba      	ldr	r2, [r7, #24]
 800722e:	4013      	ands	r3, r2
 8007230:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	691a      	ldr	r2, [r3, #16]
 8007236:	69fb      	ldr	r3, [r7, #28]
 8007238:	f003 0307 	and.w	r3, r3, #7
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	fa02 f303 	lsl.w	r3, r2, r3
 8007242:	69ba      	ldr	r2, [r7, #24]
 8007244:	4313      	orrs	r3, r2
 8007246:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	08da      	lsrs	r2, r3, #3
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	3208      	adds	r2, #8
 8007250:	69b9      	ldr	r1, [r7, #24]
 8007252:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800725c:	69fb      	ldr	r3, [r7, #28]
 800725e:	005b      	lsls	r3, r3, #1
 8007260:	2203      	movs	r2, #3
 8007262:	fa02 f303 	lsl.w	r3, r2, r3
 8007266:	43db      	mvns	r3, r3
 8007268:	69ba      	ldr	r2, [r7, #24]
 800726a:	4013      	ands	r3, r2
 800726c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	f003 0203 	and.w	r2, r3, #3
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	005b      	lsls	r3, r3, #1
 800727a:	fa02 f303 	lsl.w	r3, r2, r3
 800727e:	69ba      	ldr	r2, [r7, #24]
 8007280:	4313      	orrs	r3, r2
 8007282:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	69ba      	ldr	r2, [r7, #24]
 8007288:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007292:	2b00      	cmp	r3, #0
 8007294:	f000 80e0 	beq.w	8007458 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007298:	4b2f      	ldr	r3, [pc, #188]	; (8007358 <HAL_GPIO_Init+0x238>)
 800729a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800729e:	4a2e      	ldr	r2, [pc, #184]	; (8007358 <HAL_GPIO_Init+0x238>)
 80072a0:	f043 0302 	orr.w	r3, r3, #2
 80072a4:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80072a8:	4b2b      	ldr	r3, [pc, #172]	; (8007358 <HAL_GPIO_Init+0x238>)
 80072aa:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80072ae:	f003 0302 	and.w	r3, r3, #2
 80072b2:	60fb      	str	r3, [r7, #12]
 80072b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80072b6:	4a29      	ldr	r2, [pc, #164]	; (800735c <HAL_GPIO_Init+0x23c>)
 80072b8:	69fb      	ldr	r3, [r7, #28]
 80072ba:	089b      	lsrs	r3, r3, #2
 80072bc:	3302      	adds	r3, #2
 80072be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	f003 0303 	and.w	r3, r3, #3
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	220f      	movs	r2, #15
 80072ce:	fa02 f303 	lsl.w	r3, r2, r3
 80072d2:	43db      	mvns	r3, r3
 80072d4:	69ba      	ldr	r2, [r7, #24]
 80072d6:	4013      	ands	r3, r2
 80072d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	4a20      	ldr	r2, [pc, #128]	; (8007360 <HAL_GPIO_Init+0x240>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d052      	beq.n	8007388 <HAL_GPIO_Init+0x268>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	4a1f      	ldr	r2, [pc, #124]	; (8007364 <HAL_GPIO_Init+0x244>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d031      	beq.n	800734e <HAL_GPIO_Init+0x22e>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	4a1e      	ldr	r2, [pc, #120]	; (8007368 <HAL_GPIO_Init+0x248>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d02b      	beq.n	800734a <HAL_GPIO_Init+0x22a>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	4a1d      	ldr	r2, [pc, #116]	; (800736c <HAL_GPIO_Init+0x24c>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d025      	beq.n	8007346 <HAL_GPIO_Init+0x226>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	4a1c      	ldr	r2, [pc, #112]	; (8007370 <HAL_GPIO_Init+0x250>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d01f      	beq.n	8007342 <HAL_GPIO_Init+0x222>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4a1b      	ldr	r2, [pc, #108]	; (8007374 <HAL_GPIO_Init+0x254>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d019      	beq.n	800733e <HAL_GPIO_Init+0x21e>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4a1a      	ldr	r2, [pc, #104]	; (8007378 <HAL_GPIO_Init+0x258>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d013      	beq.n	800733a <HAL_GPIO_Init+0x21a>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	4a19      	ldr	r2, [pc, #100]	; (800737c <HAL_GPIO_Init+0x25c>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d00d      	beq.n	8007336 <HAL_GPIO_Init+0x216>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	4a18      	ldr	r2, [pc, #96]	; (8007380 <HAL_GPIO_Init+0x260>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d007      	beq.n	8007332 <HAL_GPIO_Init+0x212>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4a17      	ldr	r2, [pc, #92]	; (8007384 <HAL_GPIO_Init+0x264>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d101      	bne.n	800732e <HAL_GPIO_Init+0x20e>
 800732a:	2309      	movs	r3, #9
 800732c:	e02d      	b.n	800738a <HAL_GPIO_Init+0x26a>
 800732e:	230a      	movs	r3, #10
 8007330:	e02b      	b.n	800738a <HAL_GPIO_Init+0x26a>
 8007332:	2308      	movs	r3, #8
 8007334:	e029      	b.n	800738a <HAL_GPIO_Init+0x26a>
 8007336:	2307      	movs	r3, #7
 8007338:	e027      	b.n	800738a <HAL_GPIO_Init+0x26a>
 800733a:	2306      	movs	r3, #6
 800733c:	e025      	b.n	800738a <HAL_GPIO_Init+0x26a>
 800733e:	2305      	movs	r3, #5
 8007340:	e023      	b.n	800738a <HAL_GPIO_Init+0x26a>
 8007342:	2304      	movs	r3, #4
 8007344:	e021      	b.n	800738a <HAL_GPIO_Init+0x26a>
 8007346:	2303      	movs	r3, #3
 8007348:	e01f      	b.n	800738a <HAL_GPIO_Init+0x26a>
 800734a:	2302      	movs	r3, #2
 800734c:	e01d      	b.n	800738a <HAL_GPIO_Init+0x26a>
 800734e:	2301      	movs	r3, #1
 8007350:	e01b      	b.n	800738a <HAL_GPIO_Init+0x26a>
 8007352:	bf00      	nop
 8007354:	58000080 	.word	0x58000080
 8007358:	58024400 	.word	0x58024400
 800735c:	58000400 	.word	0x58000400
 8007360:	58020000 	.word	0x58020000
 8007364:	58020400 	.word	0x58020400
 8007368:	58020800 	.word	0x58020800
 800736c:	58020c00 	.word	0x58020c00
 8007370:	58021000 	.word	0x58021000
 8007374:	58021400 	.word	0x58021400
 8007378:	58021800 	.word	0x58021800
 800737c:	58021c00 	.word	0x58021c00
 8007380:	58022000 	.word	0x58022000
 8007384:	58022400 	.word	0x58022400
 8007388:	2300      	movs	r3, #0
 800738a:	69fa      	ldr	r2, [r7, #28]
 800738c:	f002 0203 	and.w	r2, r2, #3
 8007390:	0092      	lsls	r2, r2, #2
 8007392:	4093      	lsls	r3, r2
 8007394:	69ba      	ldr	r2, [r7, #24]
 8007396:	4313      	orrs	r3, r2
 8007398:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800739a:	4938      	ldr	r1, [pc, #224]	; (800747c <HAL_GPIO_Init+0x35c>)
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	089b      	lsrs	r3, r3, #2
 80073a0:	3302      	adds	r3, #2
 80073a2:	69ba      	ldr	r2, [r7, #24]
 80073a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80073a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	43db      	mvns	r3, r3
 80073b4:	69ba      	ldr	r2, [r7, #24]
 80073b6:	4013      	ands	r3, r2
 80073b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d003      	beq.n	80073ce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80073c6:	69ba      	ldr	r2, [r7, #24]
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80073ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80073d2:	69bb      	ldr	r3, [r7, #24]
 80073d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80073d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	43db      	mvns	r3, r3
 80073e2:	69ba      	ldr	r2, [r7, #24]
 80073e4:	4013      	ands	r3, r2
 80073e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d003      	beq.n	80073fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80073f4:	69ba      	ldr	r2, [r7, #24]
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80073fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007400:	69bb      	ldr	r3, [r7, #24]
 8007402:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	43db      	mvns	r3, r3
 800740e:	69ba      	ldr	r2, [r7, #24]
 8007410:	4013      	ands	r3, r2
 8007412:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800741c:	2b00      	cmp	r3, #0
 800741e:	d003      	beq.n	8007428 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007420:	69ba      	ldr	r2, [r7, #24]
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	4313      	orrs	r3, r2
 8007426:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	69ba      	ldr	r2, [r7, #24]
 800742c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	43db      	mvns	r3, r3
 8007438:	69ba      	ldr	r2, [r7, #24]
 800743a:	4013      	ands	r3, r2
 800743c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007446:	2b00      	cmp	r3, #0
 8007448:	d003      	beq.n	8007452 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800744a:	69ba      	ldr	r2, [r7, #24]
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	4313      	orrs	r3, r2
 8007450:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	69ba      	ldr	r2, [r7, #24]
 8007456:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007458:	69fb      	ldr	r3, [r7, #28]
 800745a:	3301      	adds	r3, #1
 800745c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	fa22 f303 	lsr.w	r3, r2, r3
 8007468:	2b00      	cmp	r3, #0
 800746a:	f47f ae63 	bne.w	8007134 <HAL_GPIO_Init+0x14>
  }
}
 800746e:	bf00      	nop
 8007470:	bf00      	nop
 8007472:	3724      	adds	r7, #36	; 0x24
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr
 800747c:	58000400 	.word	0x58000400

08007480 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007480:	b480      	push	{r7}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	460b      	mov	r3, r1
 800748a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	691a      	ldr	r2, [r3, #16]
 8007490:	887b      	ldrh	r3, [r7, #2]
 8007492:	4013      	ands	r3, r2
 8007494:	2b00      	cmp	r3, #0
 8007496:	d002      	beq.n	800749e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007498:	2301      	movs	r3, #1
 800749a:	73fb      	strb	r3, [r7, #15]
 800749c:	e001      	b.n	80074a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800749e:	2300      	movs	r3, #0
 80074a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80074a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3714      	adds	r7, #20
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b083      	sub	sp, #12
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	460b      	mov	r3, r1
 80074ba:	807b      	strh	r3, [r7, #2]
 80074bc:	4613      	mov	r3, r2
 80074be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80074c0:	787b      	ldrb	r3, [r7, #1]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d003      	beq.n	80074ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80074c6:	887a      	ldrh	r2, [r7, #2]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80074cc:	e003      	b.n	80074d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80074ce:	887b      	ldrh	r3, [r7, #2]
 80074d0:	041a      	lsls	r2, r3, #16
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	619a      	str	r2, [r3, #24]
}
 80074d6:	bf00      	nop
 80074d8:	370c      	adds	r7, #12
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr

080074e2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80074e2:	b480      	push	{r7}
 80074e4:	b085      	sub	sp, #20
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
 80074ea:	460b      	mov	r3, r1
 80074ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	695b      	ldr	r3, [r3, #20]
 80074f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80074f4:	887a      	ldrh	r2, [r7, #2]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	4013      	ands	r3, r2
 80074fa:	041a      	lsls	r2, r3, #16
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	43d9      	mvns	r1, r3
 8007500:	887b      	ldrh	r3, [r7, #2]
 8007502:	400b      	ands	r3, r1
 8007504:	431a      	orrs	r2, r3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	619a      	str	r2, [r3, #24]
}
 800750a:	bf00      	nop
 800750c:	3714      	adds	r7, #20
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr
	...

08007518 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8007520:	4b29      	ldr	r3, [pc, #164]	; (80075c8 <HAL_PWREx_ConfigSupply+0xb0>)
 8007522:	68db      	ldr	r3, [r3, #12]
 8007524:	f003 0307 	and.w	r3, r3, #7
 8007528:	2b06      	cmp	r3, #6
 800752a:	d00a      	beq.n	8007542 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800752c:	4b26      	ldr	r3, [pc, #152]	; (80075c8 <HAL_PWREx_ConfigSupply+0xb0>)
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	429a      	cmp	r2, r3
 8007538:	d001      	beq.n	800753e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	e040      	b.n	80075c0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800753e:	2300      	movs	r3, #0
 8007540:	e03e      	b.n	80075c0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007542:	4b21      	ldr	r3, [pc, #132]	; (80075c8 <HAL_PWREx_ConfigSupply+0xb0>)
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800754a:	491f      	ldr	r1, [pc, #124]	; (80075c8 <HAL_PWREx_ConfigSupply+0xb0>)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4313      	orrs	r3, r2
 8007550:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007552:	f7fa ffed 	bl	8002530 <HAL_GetTick>
 8007556:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007558:	e009      	b.n	800756e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800755a:	f7fa ffe9 	bl	8002530 <HAL_GetTick>
 800755e:	4602      	mov	r2, r0
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	1ad3      	subs	r3, r2, r3
 8007564:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007568:	d901      	bls.n	800756e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	e028      	b.n	80075c0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800756e:	4b16      	ldr	r3, [pc, #88]	; (80075c8 <HAL_PWREx_ConfigSupply+0xb0>)
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007576:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800757a:	d1ee      	bne.n	800755a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2b1e      	cmp	r3, #30
 8007580:	d008      	beq.n	8007594 <HAL_PWREx_ConfigSupply+0x7c>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2b2e      	cmp	r3, #46	; 0x2e
 8007586:	d005      	beq.n	8007594 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2b1d      	cmp	r3, #29
 800758c:	d002      	beq.n	8007594 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2b2d      	cmp	r3, #45	; 0x2d
 8007592:	d114      	bne.n	80075be <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8007594:	f7fa ffcc 	bl	8002530 <HAL_GetTick>
 8007598:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800759a:	e009      	b.n	80075b0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800759c:	f7fa ffc8 	bl	8002530 <HAL_GetTick>
 80075a0:	4602      	mov	r2, r0
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	1ad3      	subs	r3, r2, r3
 80075a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075aa:	d901      	bls.n	80075b0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	e007      	b.n	80075c0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80075b0:	4b05      	ldr	r3, [pc, #20]	; (80075c8 <HAL_PWREx_ConfigSupply+0xb0>)
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075bc:	d1ee      	bne.n	800759c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80075be:	2300      	movs	r3, #0
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3710      	adds	r7, #16
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	58024800 	.word	0x58024800

080075cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b08c      	sub	sp, #48	; 0x30
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d101      	bne.n	80075de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	e3f4      	b.n	8007dc8 <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f003 0301 	and.w	r3, r3, #1
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	f000 80b3 	beq.w	8007752 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80075ec:	4b95      	ldr	r3, [pc, #596]	; (8007844 <HAL_RCC_OscConfig+0x278>)
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80075f6:	4b93      	ldr	r3, [pc, #588]	; (8007844 <HAL_RCC_OscConfig+0x278>)
 80075f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075fa:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80075fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075fe:	2b10      	cmp	r3, #16
 8007600:	d007      	beq.n	8007612 <HAL_RCC_OscConfig+0x46>
 8007602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007604:	2b18      	cmp	r3, #24
 8007606:	d112      	bne.n	800762e <HAL_RCC_OscConfig+0x62>
 8007608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800760a:	f003 0303 	and.w	r3, r3, #3
 800760e:	2b02      	cmp	r3, #2
 8007610:	d10d      	bne.n	800762e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007612:	4b8c      	ldr	r3, [pc, #560]	; (8007844 <HAL_RCC_OscConfig+0x278>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800761a:	2b00      	cmp	r3, #0
 800761c:	f000 8098 	beq.w	8007750 <HAL_RCC_OscConfig+0x184>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	2b00      	cmp	r3, #0
 8007626:	f040 8093 	bne.w	8007750 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	e3cc      	b.n	8007dc8 <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007636:	d106      	bne.n	8007646 <HAL_RCC_OscConfig+0x7a>
 8007638:	4b82      	ldr	r3, [pc, #520]	; (8007844 <HAL_RCC_OscConfig+0x278>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a81      	ldr	r2, [pc, #516]	; (8007844 <HAL_RCC_OscConfig+0x278>)
 800763e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007642:	6013      	str	r3, [r2, #0]
 8007644:	e058      	b.n	80076f8 <HAL_RCC_OscConfig+0x12c>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d112      	bne.n	8007674 <HAL_RCC_OscConfig+0xa8>
 800764e:	4b7d      	ldr	r3, [pc, #500]	; (8007844 <HAL_RCC_OscConfig+0x278>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a7c      	ldr	r2, [pc, #496]	; (8007844 <HAL_RCC_OscConfig+0x278>)
 8007654:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007658:	6013      	str	r3, [r2, #0]
 800765a:	4b7a      	ldr	r3, [pc, #488]	; (8007844 <HAL_RCC_OscConfig+0x278>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a79      	ldr	r2, [pc, #484]	; (8007844 <HAL_RCC_OscConfig+0x278>)
 8007660:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007664:	6013      	str	r3, [r2, #0]
 8007666:	4b77      	ldr	r3, [pc, #476]	; (8007844 <HAL_RCC_OscConfig+0x278>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a76      	ldr	r2, [pc, #472]	; (8007844 <HAL_RCC_OscConfig+0x278>)
 800766c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007670:	6013      	str	r3, [r2, #0]
 8007672:	e041      	b.n	80076f8 <HAL_RCC_OscConfig+0x12c>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800767c:	d112      	bne.n	80076a4 <HAL_RCC_OscConfig+0xd8>
 800767e:	4b71      	ldr	r3, [pc, #452]	; (8007844 <HAL_RCC_OscConfig+0x278>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a70      	ldr	r2, [pc, #448]	; (8007844 <HAL_RCC_OscConfig+0x278>)
 8007684:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007688:	6013      	str	r3, [r2, #0]
 800768a:	4b6e      	ldr	r3, [pc, #440]	; (8007844 <HAL_RCC_OscConfig+0x278>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a6d      	ldr	r2, [pc, #436]	; (8007844 <HAL_RCC_OscConfig+0x278>)
 8007690:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007694:	6013      	str	r3, [r2, #0]
 8007696:	4b6b      	ldr	r3, [pc, #428]	; (8007844 <HAL_RCC_OscConfig+0x278>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a6a      	ldr	r2, [pc, #424]	; (8007844 <HAL_RCC_OscConfig+0x278>)
 800769c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076a0:	6013      	str	r3, [r2, #0]
 80076a2:	e029      	b.n	80076f8 <HAL_RCC_OscConfig+0x12c>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80076ac:	d112      	bne.n	80076d4 <HAL_RCC_OscConfig+0x108>
 80076ae:	4b65      	ldr	r3, [pc, #404]	; (8007844 <HAL_RCC_OscConfig+0x278>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a64      	ldr	r2, [pc, #400]	; (8007844 <HAL_RCC_OscConfig+0x278>)
 80076b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80076b8:	6013      	str	r3, [r2, #0]
 80076ba:	4b62      	ldr	r3, [pc, #392]	; (8007844 <HAL_RCC_OscConfig+0x278>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a61      	ldr	r2, [pc, #388]	; (8007844 <HAL_RCC_OscConfig+0x278>)
 80076c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076c4:	6013      	str	r3, [r2, #0]
 80076c6:	4b5f      	ldr	r3, [pc, #380]	; (8007844 <HAL_RCC_OscConfig+0x278>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a5e      	ldr	r2, [pc, #376]	; (8007844 <HAL_RCC_OscConfig+0x278>)
 80076cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076d0:	6013      	str	r3, [r2, #0]
 80076d2:	e011      	b.n	80076f8 <HAL_RCC_OscConfig+0x12c>
 80076d4:	4b5b      	ldr	r3, [pc, #364]	; (8007844 <HAL_RCC_OscConfig+0x278>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a5a      	ldr	r2, [pc, #360]	; (8007844 <HAL_RCC_OscConfig+0x278>)
 80076da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076de:	6013      	str	r3, [r2, #0]
 80076e0:	4b58      	ldr	r3, [pc, #352]	; (8007844 <HAL_RCC_OscConfig+0x278>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a57      	ldr	r2, [pc, #348]	; (8007844 <HAL_RCC_OscConfig+0x278>)
 80076e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80076ea:	6013      	str	r3, [r2, #0]
 80076ec:	4b55      	ldr	r3, [pc, #340]	; (8007844 <HAL_RCC_OscConfig+0x278>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a54      	ldr	r2, [pc, #336]	; (8007844 <HAL_RCC_OscConfig+0x278>)
 80076f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80076f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d013      	beq.n	8007728 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007700:	f7fa ff16 	bl	8002530 <HAL_GetTick>
 8007704:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007706:	e008      	b.n	800771a <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007708:	f7fa ff12 	bl	8002530 <HAL_GetTick>
 800770c:	4602      	mov	r2, r0
 800770e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007710:	1ad3      	subs	r3, r2, r3
 8007712:	2b64      	cmp	r3, #100	; 0x64
 8007714:	d901      	bls.n	800771a <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8007716:	2303      	movs	r3, #3
 8007718:	e356      	b.n	8007dc8 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800771a:	4b4a      	ldr	r3, [pc, #296]	; (8007844 <HAL_RCC_OscConfig+0x278>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007722:	2b00      	cmp	r3, #0
 8007724:	d0f0      	beq.n	8007708 <HAL_RCC_OscConfig+0x13c>
 8007726:	e014      	b.n	8007752 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007728:	f7fa ff02 	bl	8002530 <HAL_GetTick>
 800772c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800772e:	e008      	b.n	8007742 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007730:	f7fa fefe 	bl	8002530 <HAL_GetTick>
 8007734:	4602      	mov	r2, r0
 8007736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007738:	1ad3      	subs	r3, r2, r3
 800773a:	2b64      	cmp	r3, #100	; 0x64
 800773c:	d901      	bls.n	8007742 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 800773e:	2303      	movs	r3, #3
 8007740:	e342      	b.n	8007dc8 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007742:	4b40      	ldr	r3, [pc, #256]	; (8007844 <HAL_RCC_OscConfig+0x278>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800774a:	2b00      	cmp	r3, #0
 800774c:	d1f0      	bne.n	8007730 <HAL_RCC_OscConfig+0x164>
 800774e:	e000      	b.n	8007752 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007750:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f003 0302 	and.w	r3, r3, #2
 800775a:	2b00      	cmp	r3, #0
 800775c:	f000 808d 	beq.w	800787a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007760:	4b38      	ldr	r3, [pc, #224]	; (8007844 <HAL_RCC_OscConfig+0x278>)
 8007762:	691b      	ldr	r3, [r3, #16]
 8007764:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007768:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800776a:	4b36      	ldr	r3, [pc, #216]	; (8007844 <HAL_RCC_OscConfig+0x278>)
 800776c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800776e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007770:	6a3b      	ldr	r3, [r7, #32]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d007      	beq.n	8007786 <HAL_RCC_OscConfig+0x1ba>
 8007776:	6a3b      	ldr	r3, [r7, #32]
 8007778:	2b18      	cmp	r3, #24
 800777a:	d137      	bne.n	80077ec <HAL_RCC_OscConfig+0x220>
 800777c:	69fb      	ldr	r3, [r7, #28]
 800777e:	f003 0303 	and.w	r3, r3, #3
 8007782:	2b00      	cmp	r3, #0
 8007784:	d132      	bne.n	80077ec <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007786:	4b2f      	ldr	r3, [pc, #188]	; (8007844 <HAL_RCC_OscConfig+0x278>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f003 0304 	and.w	r3, r3, #4
 800778e:	2b00      	cmp	r3, #0
 8007790:	d005      	beq.n	800779e <HAL_RCC_OscConfig+0x1d2>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d101      	bne.n	800779e <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	e314      	b.n	8007dc8 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800779e:	4b29      	ldr	r3, [pc, #164]	; (8007844 <HAL_RCC_OscConfig+0x278>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f023 0219 	bic.w	r2, r3, #25
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	4926      	ldr	r1, [pc, #152]	; (8007844 <HAL_RCC_OscConfig+0x278>)
 80077ac:	4313      	orrs	r3, r2
 80077ae:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80077b0:	f7fa febe 	bl	8002530 <HAL_GetTick>
 80077b4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80077b6:	e008      	b.n	80077ca <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80077b8:	f7fa feba 	bl	8002530 <HAL_GetTick>
 80077bc:	4602      	mov	r2, r0
 80077be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c0:	1ad3      	subs	r3, r2, r3
 80077c2:	2b02      	cmp	r3, #2
 80077c4:	d901      	bls.n	80077ca <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 80077c6:	2303      	movs	r3, #3
 80077c8:	e2fe      	b.n	8007dc8 <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80077ca:	4b1e      	ldr	r3, [pc, #120]	; (8007844 <HAL_RCC_OscConfig+0x278>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f003 0304 	and.w	r3, r3, #4
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d0f0      	beq.n	80077b8 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077d6:	4b1b      	ldr	r3, [pc, #108]	; (8007844 <HAL_RCC_OscConfig+0x278>)
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	061b      	lsls	r3, r3, #24
 80077e4:	4917      	ldr	r1, [pc, #92]	; (8007844 <HAL_RCC_OscConfig+0x278>)
 80077e6:	4313      	orrs	r3, r2
 80077e8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80077ea:	e046      	b.n	800787a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d029      	beq.n	8007848 <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80077f4:	4b13      	ldr	r3, [pc, #76]	; (8007844 <HAL_RCC_OscConfig+0x278>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f023 0219 	bic.w	r2, r3, #25
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	4910      	ldr	r1, [pc, #64]	; (8007844 <HAL_RCC_OscConfig+0x278>)
 8007802:	4313      	orrs	r3, r2
 8007804:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007806:	f7fa fe93 	bl	8002530 <HAL_GetTick>
 800780a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800780c:	e008      	b.n	8007820 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800780e:	f7fa fe8f 	bl	8002530 <HAL_GetTick>
 8007812:	4602      	mov	r2, r0
 8007814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007816:	1ad3      	subs	r3, r2, r3
 8007818:	2b02      	cmp	r3, #2
 800781a:	d901      	bls.n	8007820 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 800781c:	2303      	movs	r3, #3
 800781e:	e2d3      	b.n	8007dc8 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007820:	4b08      	ldr	r3, [pc, #32]	; (8007844 <HAL_RCC_OscConfig+0x278>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f003 0304 	and.w	r3, r3, #4
 8007828:	2b00      	cmp	r3, #0
 800782a:	d0f0      	beq.n	800780e <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800782c:	4b05      	ldr	r3, [pc, #20]	; (8007844 <HAL_RCC_OscConfig+0x278>)
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	691b      	ldr	r3, [r3, #16]
 8007838:	061b      	lsls	r3, r3, #24
 800783a:	4902      	ldr	r1, [pc, #8]	; (8007844 <HAL_RCC_OscConfig+0x278>)
 800783c:	4313      	orrs	r3, r2
 800783e:	604b      	str	r3, [r1, #4]
 8007840:	e01b      	b.n	800787a <HAL_RCC_OscConfig+0x2ae>
 8007842:	bf00      	nop
 8007844:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007848:	4b97      	ldr	r3, [pc, #604]	; (8007aa8 <HAL_RCC_OscConfig+0x4dc>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a96      	ldr	r2, [pc, #600]	; (8007aa8 <HAL_RCC_OscConfig+0x4dc>)
 800784e:	f023 0301 	bic.w	r3, r3, #1
 8007852:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007854:	f7fa fe6c 	bl	8002530 <HAL_GetTick>
 8007858:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800785a:	e008      	b.n	800786e <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800785c:	f7fa fe68 	bl	8002530 <HAL_GetTick>
 8007860:	4602      	mov	r2, r0
 8007862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007864:	1ad3      	subs	r3, r2, r3
 8007866:	2b02      	cmp	r3, #2
 8007868:	d901      	bls.n	800786e <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800786a:	2303      	movs	r3, #3
 800786c:	e2ac      	b.n	8007dc8 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800786e:	4b8e      	ldr	r3, [pc, #568]	; (8007aa8 <HAL_RCC_OscConfig+0x4dc>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f003 0304 	and.w	r3, r3, #4
 8007876:	2b00      	cmp	r3, #0
 8007878:	d1f0      	bne.n	800785c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f003 0310 	and.w	r3, r3, #16
 8007882:	2b00      	cmp	r3, #0
 8007884:	d06a      	beq.n	800795c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007886:	4b88      	ldr	r3, [pc, #544]	; (8007aa8 <HAL_RCC_OscConfig+0x4dc>)
 8007888:	691b      	ldr	r3, [r3, #16]
 800788a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800788e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007890:	4b85      	ldr	r3, [pc, #532]	; (8007aa8 <HAL_RCC_OscConfig+0x4dc>)
 8007892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007894:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	2b08      	cmp	r3, #8
 800789a:	d007      	beq.n	80078ac <HAL_RCC_OscConfig+0x2e0>
 800789c:	69bb      	ldr	r3, [r7, #24]
 800789e:	2b18      	cmp	r3, #24
 80078a0:	d11b      	bne.n	80078da <HAL_RCC_OscConfig+0x30e>
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	f003 0303 	and.w	r3, r3, #3
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d116      	bne.n	80078da <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80078ac:	4b7e      	ldr	r3, [pc, #504]	; (8007aa8 <HAL_RCC_OscConfig+0x4dc>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d005      	beq.n	80078c4 <HAL_RCC_OscConfig+0x2f8>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	69db      	ldr	r3, [r3, #28]
 80078bc:	2b80      	cmp	r3, #128	; 0x80
 80078be:	d001      	beq.n	80078c4 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	e281      	b.n	8007dc8 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80078c4:	4b78      	ldr	r3, [pc, #480]	; (8007aa8 <HAL_RCC_OscConfig+0x4dc>)
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6a1b      	ldr	r3, [r3, #32]
 80078d0:	061b      	lsls	r3, r3, #24
 80078d2:	4975      	ldr	r1, [pc, #468]	; (8007aa8 <HAL_RCC_OscConfig+0x4dc>)
 80078d4:	4313      	orrs	r3, r2
 80078d6:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80078d8:	e040      	b.n	800795c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	69db      	ldr	r3, [r3, #28]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d023      	beq.n	800792a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80078e2:	4b71      	ldr	r3, [pc, #452]	; (8007aa8 <HAL_RCC_OscConfig+0x4dc>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a70      	ldr	r2, [pc, #448]	; (8007aa8 <HAL_RCC_OscConfig+0x4dc>)
 80078e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078ee:	f7fa fe1f 	bl	8002530 <HAL_GetTick>
 80078f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80078f4:	e008      	b.n	8007908 <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80078f6:	f7fa fe1b 	bl	8002530 <HAL_GetTick>
 80078fa:	4602      	mov	r2, r0
 80078fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fe:	1ad3      	subs	r3, r2, r3
 8007900:	2b02      	cmp	r3, #2
 8007902:	d901      	bls.n	8007908 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8007904:	2303      	movs	r3, #3
 8007906:	e25f      	b.n	8007dc8 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007908:	4b67      	ldr	r3, [pc, #412]	; (8007aa8 <HAL_RCC_OscConfig+0x4dc>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007910:	2b00      	cmp	r3, #0
 8007912:	d0f0      	beq.n	80078f6 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007914:	4b64      	ldr	r3, [pc, #400]	; (8007aa8 <HAL_RCC_OscConfig+0x4dc>)
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6a1b      	ldr	r3, [r3, #32]
 8007920:	061b      	lsls	r3, r3, #24
 8007922:	4961      	ldr	r1, [pc, #388]	; (8007aa8 <HAL_RCC_OscConfig+0x4dc>)
 8007924:	4313      	orrs	r3, r2
 8007926:	60cb      	str	r3, [r1, #12]
 8007928:	e018      	b.n	800795c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800792a:	4b5f      	ldr	r3, [pc, #380]	; (8007aa8 <HAL_RCC_OscConfig+0x4dc>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a5e      	ldr	r2, [pc, #376]	; (8007aa8 <HAL_RCC_OscConfig+0x4dc>)
 8007930:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007934:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007936:	f7fa fdfb 	bl	8002530 <HAL_GetTick>
 800793a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800793c:	e008      	b.n	8007950 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800793e:	f7fa fdf7 	bl	8002530 <HAL_GetTick>
 8007942:	4602      	mov	r2, r0
 8007944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007946:	1ad3      	subs	r3, r2, r3
 8007948:	2b02      	cmp	r3, #2
 800794a:	d901      	bls.n	8007950 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800794c:	2303      	movs	r3, #3
 800794e:	e23b      	b.n	8007dc8 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007950:	4b55      	ldr	r3, [pc, #340]	; (8007aa8 <HAL_RCC_OscConfig+0x4dc>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007958:	2b00      	cmp	r3, #0
 800795a:	d1f0      	bne.n	800793e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f003 0308 	and.w	r3, r3, #8
 8007964:	2b00      	cmp	r3, #0
 8007966:	d036      	beq.n	80079d6 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	695b      	ldr	r3, [r3, #20]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d019      	beq.n	80079a4 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007970:	4b4d      	ldr	r3, [pc, #308]	; (8007aa8 <HAL_RCC_OscConfig+0x4dc>)
 8007972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007974:	4a4c      	ldr	r2, [pc, #304]	; (8007aa8 <HAL_RCC_OscConfig+0x4dc>)
 8007976:	f043 0301 	orr.w	r3, r3, #1
 800797a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800797c:	f7fa fdd8 	bl	8002530 <HAL_GetTick>
 8007980:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007982:	e008      	b.n	8007996 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007984:	f7fa fdd4 	bl	8002530 <HAL_GetTick>
 8007988:	4602      	mov	r2, r0
 800798a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798c:	1ad3      	subs	r3, r2, r3
 800798e:	2b02      	cmp	r3, #2
 8007990:	d901      	bls.n	8007996 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8007992:	2303      	movs	r3, #3
 8007994:	e218      	b.n	8007dc8 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007996:	4b44      	ldr	r3, [pc, #272]	; (8007aa8 <HAL_RCC_OscConfig+0x4dc>)
 8007998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800799a:	f003 0302 	and.w	r3, r3, #2
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d0f0      	beq.n	8007984 <HAL_RCC_OscConfig+0x3b8>
 80079a2:	e018      	b.n	80079d6 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80079a4:	4b40      	ldr	r3, [pc, #256]	; (8007aa8 <HAL_RCC_OscConfig+0x4dc>)
 80079a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079a8:	4a3f      	ldr	r2, [pc, #252]	; (8007aa8 <HAL_RCC_OscConfig+0x4dc>)
 80079aa:	f023 0301 	bic.w	r3, r3, #1
 80079ae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079b0:	f7fa fdbe 	bl	8002530 <HAL_GetTick>
 80079b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80079b6:	e008      	b.n	80079ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80079b8:	f7fa fdba 	bl	8002530 <HAL_GetTick>
 80079bc:	4602      	mov	r2, r0
 80079be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c0:	1ad3      	subs	r3, r2, r3
 80079c2:	2b02      	cmp	r3, #2
 80079c4:	d901      	bls.n	80079ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80079c6:	2303      	movs	r3, #3
 80079c8:	e1fe      	b.n	8007dc8 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80079ca:	4b37      	ldr	r3, [pc, #220]	; (8007aa8 <HAL_RCC_OscConfig+0x4dc>)
 80079cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079ce:	f003 0302 	and.w	r3, r3, #2
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d1f0      	bne.n	80079b8 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f003 0320 	and.w	r3, r3, #32
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d036      	beq.n	8007a50 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	699b      	ldr	r3, [r3, #24]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d019      	beq.n	8007a1e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80079ea:	4b2f      	ldr	r3, [pc, #188]	; (8007aa8 <HAL_RCC_OscConfig+0x4dc>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a2e      	ldr	r2, [pc, #184]	; (8007aa8 <HAL_RCC_OscConfig+0x4dc>)
 80079f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80079f4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80079f6:	f7fa fd9b 	bl	8002530 <HAL_GetTick>
 80079fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80079fc:	e008      	b.n	8007a10 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80079fe:	f7fa fd97 	bl	8002530 <HAL_GetTick>
 8007a02:	4602      	mov	r2, r0
 8007a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a06:	1ad3      	subs	r3, r2, r3
 8007a08:	2b02      	cmp	r3, #2
 8007a0a:	d901      	bls.n	8007a10 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	e1db      	b.n	8007dc8 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007a10:	4b25      	ldr	r3, [pc, #148]	; (8007aa8 <HAL_RCC_OscConfig+0x4dc>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d0f0      	beq.n	80079fe <HAL_RCC_OscConfig+0x432>
 8007a1c:	e018      	b.n	8007a50 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007a1e:	4b22      	ldr	r3, [pc, #136]	; (8007aa8 <HAL_RCC_OscConfig+0x4dc>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a21      	ldr	r2, [pc, #132]	; (8007aa8 <HAL_RCC_OscConfig+0x4dc>)
 8007a24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a28:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007a2a:	f7fa fd81 	bl	8002530 <HAL_GetTick>
 8007a2e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007a30:	e008      	b.n	8007a44 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007a32:	f7fa fd7d 	bl	8002530 <HAL_GetTick>
 8007a36:	4602      	mov	r2, r0
 8007a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3a:	1ad3      	subs	r3, r2, r3
 8007a3c:	2b02      	cmp	r3, #2
 8007a3e:	d901      	bls.n	8007a44 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8007a40:	2303      	movs	r3, #3
 8007a42:	e1c1      	b.n	8007dc8 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007a44:	4b18      	ldr	r3, [pc, #96]	; (8007aa8 <HAL_RCC_OscConfig+0x4dc>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d1f0      	bne.n	8007a32 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f003 0304 	and.w	r3, r3, #4
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	f000 80af 	beq.w	8007bbc <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007a5e:	4b13      	ldr	r3, [pc, #76]	; (8007aac <HAL_RCC_OscConfig+0x4e0>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a12      	ldr	r2, [pc, #72]	; (8007aac <HAL_RCC_OscConfig+0x4e0>)
 8007a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a68:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a6a:	f7fa fd61 	bl	8002530 <HAL_GetTick>
 8007a6e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a70:	e008      	b.n	8007a84 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007a72:	f7fa fd5d 	bl	8002530 <HAL_GetTick>
 8007a76:	4602      	mov	r2, r0
 8007a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7a:	1ad3      	subs	r3, r2, r3
 8007a7c:	2b64      	cmp	r3, #100	; 0x64
 8007a7e:	d901      	bls.n	8007a84 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8007a80:	2303      	movs	r3, #3
 8007a82:	e1a1      	b.n	8007dc8 <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a84:	4b09      	ldr	r3, [pc, #36]	; (8007aac <HAL_RCC_OscConfig+0x4e0>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d0f0      	beq.n	8007a72 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d10b      	bne.n	8007ab0 <HAL_RCC_OscConfig+0x4e4>
 8007a98:	4b03      	ldr	r3, [pc, #12]	; (8007aa8 <HAL_RCC_OscConfig+0x4dc>)
 8007a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a9c:	4a02      	ldr	r2, [pc, #8]	; (8007aa8 <HAL_RCC_OscConfig+0x4dc>)
 8007a9e:	f043 0301 	orr.w	r3, r3, #1
 8007aa2:	6713      	str	r3, [r2, #112]	; 0x70
 8007aa4:	e05b      	b.n	8007b5e <HAL_RCC_OscConfig+0x592>
 8007aa6:	bf00      	nop
 8007aa8:	58024400 	.word	0x58024400
 8007aac:	58024800 	.word	0x58024800
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d112      	bne.n	8007ade <HAL_RCC_OscConfig+0x512>
 8007ab8:	4b9d      	ldr	r3, [pc, #628]	; (8007d30 <HAL_RCC_OscConfig+0x764>)
 8007aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007abc:	4a9c      	ldr	r2, [pc, #624]	; (8007d30 <HAL_RCC_OscConfig+0x764>)
 8007abe:	f023 0301 	bic.w	r3, r3, #1
 8007ac2:	6713      	str	r3, [r2, #112]	; 0x70
 8007ac4:	4b9a      	ldr	r3, [pc, #616]	; (8007d30 <HAL_RCC_OscConfig+0x764>)
 8007ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ac8:	4a99      	ldr	r2, [pc, #612]	; (8007d30 <HAL_RCC_OscConfig+0x764>)
 8007aca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ace:	6713      	str	r3, [r2, #112]	; 0x70
 8007ad0:	4b97      	ldr	r3, [pc, #604]	; (8007d30 <HAL_RCC_OscConfig+0x764>)
 8007ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ad4:	4a96      	ldr	r2, [pc, #600]	; (8007d30 <HAL_RCC_OscConfig+0x764>)
 8007ad6:	f023 0304 	bic.w	r3, r3, #4
 8007ada:	6713      	str	r3, [r2, #112]	; 0x70
 8007adc:	e03f      	b.n	8007b5e <HAL_RCC_OscConfig+0x592>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	2b05      	cmp	r3, #5
 8007ae4:	d112      	bne.n	8007b0c <HAL_RCC_OscConfig+0x540>
 8007ae6:	4b92      	ldr	r3, [pc, #584]	; (8007d30 <HAL_RCC_OscConfig+0x764>)
 8007ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aea:	4a91      	ldr	r2, [pc, #580]	; (8007d30 <HAL_RCC_OscConfig+0x764>)
 8007aec:	f043 0304 	orr.w	r3, r3, #4
 8007af0:	6713      	str	r3, [r2, #112]	; 0x70
 8007af2:	4b8f      	ldr	r3, [pc, #572]	; (8007d30 <HAL_RCC_OscConfig+0x764>)
 8007af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007af6:	4a8e      	ldr	r2, [pc, #568]	; (8007d30 <HAL_RCC_OscConfig+0x764>)
 8007af8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007afc:	6713      	str	r3, [r2, #112]	; 0x70
 8007afe:	4b8c      	ldr	r3, [pc, #560]	; (8007d30 <HAL_RCC_OscConfig+0x764>)
 8007b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b02:	4a8b      	ldr	r2, [pc, #556]	; (8007d30 <HAL_RCC_OscConfig+0x764>)
 8007b04:	f043 0301 	orr.w	r3, r3, #1
 8007b08:	6713      	str	r3, [r2, #112]	; 0x70
 8007b0a:	e028      	b.n	8007b5e <HAL_RCC_OscConfig+0x592>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	2b85      	cmp	r3, #133	; 0x85
 8007b12:	d112      	bne.n	8007b3a <HAL_RCC_OscConfig+0x56e>
 8007b14:	4b86      	ldr	r3, [pc, #536]	; (8007d30 <HAL_RCC_OscConfig+0x764>)
 8007b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b18:	4a85      	ldr	r2, [pc, #532]	; (8007d30 <HAL_RCC_OscConfig+0x764>)
 8007b1a:	f043 0304 	orr.w	r3, r3, #4
 8007b1e:	6713      	str	r3, [r2, #112]	; 0x70
 8007b20:	4b83      	ldr	r3, [pc, #524]	; (8007d30 <HAL_RCC_OscConfig+0x764>)
 8007b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b24:	4a82      	ldr	r2, [pc, #520]	; (8007d30 <HAL_RCC_OscConfig+0x764>)
 8007b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b2a:	6713      	str	r3, [r2, #112]	; 0x70
 8007b2c:	4b80      	ldr	r3, [pc, #512]	; (8007d30 <HAL_RCC_OscConfig+0x764>)
 8007b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b30:	4a7f      	ldr	r2, [pc, #508]	; (8007d30 <HAL_RCC_OscConfig+0x764>)
 8007b32:	f043 0301 	orr.w	r3, r3, #1
 8007b36:	6713      	str	r3, [r2, #112]	; 0x70
 8007b38:	e011      	b.n	8007b5e <HAL_RCC_OscConfig+0x592>
 8007b3a:	4b7d      	ldr	r3, [pc, #500]	; (8007d30 <HAL_RCC_OscConfig+0x764>)
 8007b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b3e:	4a7c      	ldr	r2, [pc, #496]	; (8007d30 <HAL_RCC_OscConfig+0x764>)
 8007b40:	f023 0301 	bic.w	r3, r3, #1
 8007b44:	6713      	str	r3, [r2, #112]	; 0x70
 8007b46:	4b7a      	ldr	r3, [pc, #488]	; (8007d30 <HAL_RCC_OscConfig+0x764>)
 8007b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b4a:	4a79      	ldr	r2, [pc, #484]	; (8007d30 <HAL_RCC_OscConfig+0x764>)
 8007b4c:	f023 0304 	bic.w	r3, r3, #4
 8007b50:	6713      	str	r3, [r2, #112]	; 0x70
 8007b52:	4b77      	ldr	r3, [pc, #476]	; (8007d30 <HAL_RCC_OscConfig+0x764>)
 8007b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b56:	4a76      	ldr	r2, [pc, #472]	; (8007d30 <HAL_RCC_OscConfig+0x764>)
 8007b58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d015      	beq.n	8007b92 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b66:	f7fa fce3 	bl	8002530 <HAL_GetTick>
 8007b6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b6c:	e00a      	b.n	8007b84 <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b6e:	f7fa fcdf 	bl	8002530 <HAL_GetTick>
 8007b72:	4602      	mov	r2, r0
 8007b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b76:	1ad3      	subs	r3, r2, r3
 8007b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d901      	bls.n	8007b84 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8007b80:	2303      	movs	r3, #3
 8007b82:	e121      	b.n	8007dc8 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b84:	4b6a      	ldr	r3, [pc, #424]	; (8007d30 <HAL_RCC_OscConfig+0x764>)
 8007b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b88:	f003 0302 	and.w	r3, r3, #2
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d0ee      	beq.n	8007b6e <HAL_RCC_OscConfig+0x5a2>
 8007b90:	e014      	b.n	8007bbc <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b92:	f7fa fccd 	bl	8002530 <HAL_GetTick>
 8007b96:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007b98:	e00a      	b.n	8007bb0 <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b9a:	f7fa fcc9 	bl	8002530 <HAL_GetTick>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba2:	1ad3      	subs	r3, r2, r3
 8007ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d901      	bls.n	8007bb0 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8007bac:	2303      	movs	r3, #3
 8007bae:	e10b      	b.n	8007dc8 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007bb0:	4b5f      	ldr	r3, [pc, #380]	; (8007d30 <HAL_RCC_OscConfig+0x764>)
 8007bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bb4:	f003 0302 	and.w	r3, r3, #2
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d1ee      	bne.n	8007b9a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	f000 8100 	beq.w	8007dc6 <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007bc6:	4b5a      	ldr	r3, [pc, #360]	; (8007d30 <HAL_RCC_OscConfig+0x764>)
 8007bc8:	691b      	ldr	r3, [r3, #16]
 8007bca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007bce:	2b18      	cmp	r3, #24
 8007bd0:	f000 80bb 	beq.w	8007d4a <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd8:	2b02      	cmp	r3, #2
 8007bda:	f040 8095 	bne.w	8007d08 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007bde:	4b54      	ldr	r3, [pc, #336]	; (8007d30 <HAL_RCC_OscConfig+0x764>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a53      	ldr	r2, [pc, #332]	; (8007d30 <HAL_RCC_OscConfig+0x764>)
 8007be4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007be8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bea:	f7fa fca1 	bl	8002530 <HAL_GetTick>
 8007bee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007bf0:	e008      	b.n	8007c04 <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007bf2:	f7fa fc9d 	bl	8002530 <HAL_GetTick>
 8007bf6:	4602      	mov	r2, r0
 8007bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfa:	1ad3      	subs	r3, r2, r3
 8007bfc:	2b02      	cmp	r3, #2
 8007bfe:	d901      	bls.n	8007c04 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8007c00:	2303      	movs	r3, #3
 8007c02:	e0e1      	b.n	8007dc8 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007c04:	4b4a      	ldr	r3, [pc, #296]	; (8007d30 <HAL_RCC_OscConfig+0x764>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d1f0      	bne.n	8007bf2 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007c10:	4b47      	ldr	r3, [pc, #284]	; (8007d30 <HAL_RCC_OscConfig+0x764>)
 8007c12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c14:	4b47      	ldr	r3, [pc, #284]	; (8007d34 <HAL_RCC_OscConfig+0x768>)
 8007c16:	4013      	ands	r3, r2
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007c20:	0112      	lsls	r2, r2, #4
 8007c22:	430a      	orrs	r2, r1
 8007c24:	4942      	ldr	r1, [pc, #264]	; (8007d30 <HAL_RCC_OscConfig+0x764>)
 8007c26:	4313      	orrs	r3, r2
 8007c28:	628b      	str	r3, [r1, #40]	; 0x28
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c2e:	3b01      	subs	r3, #1
 8007c30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c38:	3b01      	subs	r3, #1
 8007c3a:	025b      	lsls	r3, r3, #9
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	431a      	orrs	r2, r3
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c44:	3b01      	subs	r3, #1
 8007c46:	041b      	lsls	r3, r3, #16
 8007c48:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007c4c:	431a      	orrs	r2, r3
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c52:	3b01      	subs	r3, #1
 8007c54:	061b      	lsls	r3, r3, #24
 8007c56:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007c5a:	4935      	ldr	r1, [pc, #212]	; (8007d30 <HAL_RCC_OscConfig+0x764>)
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007c60:	4b33      	ldr	r3, [pc, #204]	; (8007d30 <HAL_RCC_OscConfig+0x764>)
 8007c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c64:	4a32      	ldr	r2, [pc, #200]	; (8007d30 <HAL_RCC_OscConfig+0x764>)
 8007c66:	f023 0301 	bic.w	r3, r3, #1
 8007c6a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007c6c:	4b30      	ldr	r3, [pc, #192]	; (8007d30 <HAL_RCC_OscConfig+0x764>)
 8007c6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c70:	4b31      	ldr	r3, [pc, #196]	; (8007d38 <HAL_RCC_OscConfig+0x76c>)
 8007c72:	4013      	ands	r3, r2
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007c78:	00d2      	lsls	r2, r2, #3
 8007c7a:	492d      	ldr	r1, [pc, #180]	; (8007d30 <HAL_RCC_OscConfig+0x764>)
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007c80:	4b2b      	ldr	r3, [pc, #172]	; (8007d30 <HAL_RCC_OscConfig+0x764>)
 8007c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c84:	f023 020c 	bic.w	r2, r3, #12
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c8c:	4928      	ldr	r1, [pc, #160]	; (8007d30 <HAL_RCC_OscConfig+0x764>)
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007c92:	4b27      	ldr	r3, [pc, #156]	; (8007d30 <HAL_RCC_OscConfig+0x764>)
 8007c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c96:	f023 0202 	bic.w	r2, r3, #2
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c9e:	4924      	ldr	r1, [pc, #144]	; (8007d30 <HAL_RCC_OscConfig+0x764>)
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007ca4:	4b22      	ldr	r3, [pc, #136]	; (8007d30 <HAL_RCC_OscConfig+0x764>)
 8007ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca8:	4a21      	ldr	r2, [pc, #132]	; (8007d30 <HAL_RCC_OscConfig+0x764>)
 8007caa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cb0:	4b1f      	ldr	r3, [pc, #124]	; (8007d30 <HAL_RCC_OscConfig+0x764>)
 8007cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb4:	4a1e      	ldr	r2, [pc, #120]	; (8007d30 <HAL_RCC_OscConfig+0x764>)
 8007cb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007cbc:	4b1c      	ldr	r3, [pc, #112]	; (8007d30 <HAL_RCC_OscConfig+0x764>)
 8007cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc0:	4a1b      	ldr	r2, [pc, #108]	; (8007d30 <HAL_RCC_OscConfig+0x764>)
 8007cc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007cc6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007cc8:	4b19      	ldr	r3, [pc, #100]	; (8007d30 <HAL_RCC_OscConfig+0x764>)
 8007cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ccc:	4a18      	ldr	r2, [pc, #96]	; (8007d30 <HAL_RCC_OscConfig+0x764>)
 8007cce:	f043 0301 	orr.w	r3, r3, #1
 8007cd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007cd4:	4b16      	ldr	r3, [pc, #88]	; (8007d30 <HAL_RCC_OscConfig+0x764>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a15      	ldr	r2, [pc, #84]	; (8007d30 <HAL_RCC_OscConfig+0x764>)
 8007cda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007cde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ce0:	f7fa fc26 	bl	8002530 <HAL_GetTick>
 8007ce4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007ce6:	e008      	b.n	8007cfa <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ce8:	f7fa fc22 	bl	8002530 <HAL_GetTick>
 8007cec:	4602      	mov	r2, r0
 8007cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf0:	1ad3      	subs	r3, r2, r3
 8007cf2:	2b02      	cmp	r3, #2
 8007cf4:	d901      	bls.n	8007cfa <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8007cf6:	2303      	movs	r3, #3
 8007cf8:	e066      	b.n	8007dc8 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007cfa:	4b0d      	ldr	r3, [pc, #52]	; (8007d30 <HAL_RCC_OscConfig+0x764>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d0f0      	beq.n	8007ce8 <HAL_RCC_OscConfig+0x71c>
 8007d06:	e05e      	b.n	8007dc6 <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d08:	4b09      	ldr	r3, [pc, #36]	; (8007d30 <HAL_RCC_OscConfig+0x764>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a08      	ldr	r2, [pc, #32]	; (8007d30 <HAL_RCC_OscConfig+0x764>)
 8007d0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d14:	f7fa fc0c 	bl	8002530 <HAL_GetTick>
 8007d18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007d1a:	e00f      	b.n	8007d3c <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d1c:	f7fa fc08 	bl	8002530 <HAL_GetTick>
 8007d20:	4602      	mov	r2, r0
 8007d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d24:	1ad3      	subs	r3, r2, r3
 8007d26:	2b02      	cmp	r3, #2
 8007d28:	d908      	bls.n	8007d3c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8007d2a:	2303      	movs	r3, #3
 8007d2c:	e04c      	b.n	8007dc8 <HAL_RCC_OscConfig+0x7fc>
 8007d2e:	bf00      	nop
 8007d30:	58024400 	.word	0x58024400
 8007d34:	fffffc0c 	.word	0xfffffc0c
 8007d38:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007d3c:	4b24      	ldr	r3, [pc, #144]	; (8007dd0 <HAL_RCC_OscConfig+0x804>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d1e9      	bne.n	8007d1c <HAL_RCC_OscConfig+0x750>
 8007d48:	e03d      	b.n	8007dc6 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007d4a:	4b21      	ldr	r3, [pc, #132]	; (8007dd0 <HAL_RCC_OscConfig+0x804>)
 8007d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d4e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007d50:	4b1f      	ldr	r3, [pc, #124]	; (8007dd0 <HAL_RCC_OscConfig+0x804>)
 8007d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d54:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d031      	beq.n	8007dc2 <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	f003 0203 	and.w	r2, r3, #3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	d12a      	bne.n	8007dc2 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	091b      	lsrs	r3, r3, #4
 8007d70:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d122      	bne.n	8007dc2 <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d86:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d11a      	bne.n	8007dc2 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	0a5b      	lsrs	r3, r3, #9
 8007d90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d98:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d111      	bne.n	8007dc2 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	0c1b      	lsrs	r3, r3, #16
 8007da2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007daa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d108      	bne.n	8007dc2 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	0e1b      	lsrs	r3, r3, #24
 8007db4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dbc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d001      	beq.n	8007dc6 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	e000      	b.n	8007dc8 <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 8007dc6:	2300      	movs	r3, #0
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3730      	adds	r7, #48	; 0x30
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	58024400 	.word	0x58024400

08007dd4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b086      	sub	sp, #24
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d101      	bne.n	8007de8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007de4:	2301      	movs	r3, #1
 8007de6:	e19c      	b.n	8008122 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007de8:	4b8a      	ldr	r3, [pc, #552]	; (8008014 <HAL_RCC_ClockConfig+0x240>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f003 030f 	and.w	r3, r3, #15
 8007df0:	683a      	ldr	r2, [r7, #0]
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d910      	bls.n	8007e18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007df6:	4b87      	ldr	r3, [pc, #540]	; (8008014 <HAL_RCC_ClockConfig+0x240>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f023 020f 	bic.w	r2, r3, #15
 8007dfe:	4985      	ldr	r1, [pc, #532]	; (8008014 <HAL_RCC_ClockConfig+0x240>)
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	4313      	orrs	r3, r2
 8007e04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e06:	4b83      	ldr	r3, [pc, #524]	; (8008014 <HAL_RCC_ClockConfig+0x240>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 030f 	and.w	r3, r3, #15
 8007e0e:	683a      	ldr	r2, [r7, #0]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d001      	beq.n	8007e18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007e14:	2301      	movs	r3, #1
 8007e16:	e184      	b.n	8008122 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f003 0304 	and.w	r3, r3, #4
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d010      	beq.n	8007e46 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	691a      	ldr	r2, [r3, #16]
 8007e28:	4b7b      	ldr	r3, [pc, #492]	; (8008018 <HAL_RCC_ClockConfig+0x244>)
 8007e2a:	699b      	ldr	r3, [r3, #24]
 8007e2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d908      	bls.n	8007e46 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007e34:	4b78      	ldr	r3, [pc, #480]	; (8008018 <HAL_RCC_ClockConfig+0x244>)
 8007e36:	699b      	ldr	r3, [r3, #24]
 8007e38:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	691b      	ldr	r3, [r3, #16]
 8007e40:	4975      	ldr	r1, [pc, #468]	; (8008018 <HAL_RCC_ClockConfig+0x244>)
 8007e42:	4313      	orrs	r3, r2
 8007e44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f003 0308 	and.w	r3, r3, #8
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d010      	beq.n	8007e74 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	695a      	ldr	r2, [r3, #20]
 8007e56:	4b70      	ldr	r3, [pc, #448]	; (8008018 <HAL_RCC_ClockConfig+0x244>)
 8007e58:	69db      	ldr	r3, [r3, #28]
 8007e5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d908      	bls.n	8007e74 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007e62:	4b6d      	ldr	r3, [pc, #436]	; (8008018 <HAL_RCC_ClockConfig+0x244>)
 8007e64:	69db      	ldr	r3, [r3, #28]
 8007e66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	695b      	ldr	r3, [r3, #20]
 8007e6e:	496a      	ldr	r1, [pc, #424]	; (8008018 <HAL_RCC_ClockConfig+0x244>)
 8007e70:	4313      	orrs	r3, r2
 8007e72:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 0310 	and.w	r3, r3, #16
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d010      	beq.n	8007ea2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	699a      	ldr	r2, [r3, #24]
 8007e84:	4b64      	ldr	r3, [pc, #400]	; (8008018 <HAL_RCC_ClockConfig+0x244>)
 8007e86:	69db      	ldr	r3, [r3, #28]
 8007e88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d908      	bls.n	8007ea2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007e90:	4b61      	ldr	r3, [pc, #388]	; (8008018 <HAL_RCC_ClockConfig+0x244>)
 8007e92:	69db      	ldr	r3, [r3, #28]
 8007e94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	699b      	ldr	r3, [r3, #24]
 8007e9c:	495e      	ldr	r1, [pc, #376]	; (8008018 <HAL_RCC_ClockConfig+0x244>)
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f003 0320 	and.w	r3, r3, #32
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d010      	beq.n	8007ed0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	69da      	ldr	r2, [r3, #28]
 8007eb2:	4b59      	ldr	r3, [pc, #356]	; (8008018 <HAL_RCC_ClockConfig+0x244>)
 8007eb4:	6a1b      	ldr	r3, [r3, #32]
 8007eb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d908      	bls.n	8007ed0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007ebe:	4b56      	ldr	r3, [pc, #344]	; (8008018 <HAL_RCC_ClockConfig+0x244>)
 8007ec0:	6a1b      	ldr	r3, [r3, #32]
 8007ec2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	69db      	ldr	r3, [r3, #28]
 8007eca:	4953      	ldr	r1, [pc, #332]	; (8008018 <HAL_RCC_ClockConfig+0x244>)
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f003 0302 	and.w	r3, r3, #2
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d010      	beq.n	8007efe <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	68da      	ldr	r2, [r3, #12]
 8007ee0:	4b4d      	ldr	r3, [pc, #308]	; (8008018 <HAL_RCC_ClockConfig+0x244>)
 8007ee2:	699b      	ldr	r3, [r3, #24]
 8007ee4:	f003 030f 	and.w	r3, r3, #15
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d908      	bls.n	8007efe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007eec:	4b4a      	ldr	r3, [pc, #296]	; (8008018 <HAL_RCC_ClockConfig+0x244>)
 8007eee:	699b      	ldr	r3, [r3, #24]
 8007ef0:	f023 020f 	bic.w	r2, r3, #15
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	4947      	ldr	r1, [pc, #284]	; (8008018 <HAL_RCC_ClockConfig+0x244>)
 8007efa:	4313      	orrs	r3, r2
 8007efc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f003 0301 	and.w	r3, r3, #1
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d055      	beq.n	8007fb6 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007f0a:	4b43      	ldr	r3, [pc, #268]	; (8008018 <HAL_RCC_ClockConfig+0x244>)
 8007f0c:	699b      	ldr	r3, [r3, #24]
 8007f0e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	4940      	ldr	r1, [pc, #256]	; (8008018 <HAL_RCC_ClockConfig+0x244>)
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	2b02      	cmp	r3, #2
 8007f22:	d107      	bne.n	8007f34 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007f24:	4b3c      	ldr	r3, [pc, #240]	; (8008018 <HAL_RCC_ClockConfig+0x244>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d121      	bne.n	8007f74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007f30:	2301      	movs	r3, #1
 8007f32:	e0f6      	b.n	8008122 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	2b03      	cmp	r3, #3
 8007f3a:	d107      	bne.n	8007f4c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007f3c:	4b36      	ldr	r3, [pc, #216]	; (8008018 <HAL_RCC_ClockConfig+0x244>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d115      	bne.n	8007f74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	e0ea      	b.n	8008122 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d107      	bne.n	8007f64 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007f54:	4b30      	ldr	r3, [pc, #192]	; (8008018 <HAL_RCC_ClockConfig+0x244>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d109      	bne.n	8007f74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007f60:	2301      	movs	r3, #1
 8007f62:	e0de      	b.n	8008122 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f64:	4b2c      	ldr	r3, [pc, #176]	; (8008018 <HAL_RCC_ClockConfig+0x244>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f003 0304 	and.w	r3, r3, #4
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d101      	bne.n	8007f74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	e0d6      	b.n	8008122 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007f74:	4b28      	ldr	r3, [pc, #160]	; (8008018 <HAL_RCC_ClockConfig+0x244>)
 8007f76:	691b      	ldr	r3, [r3, #16]
 8007f78:	f023 0207 	bic.w	r2, r3, #7
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	4925      	ldr	r1, [pc, #148]	; (8008018 <HAL_RCC_ClockConfig+0x244>)
 8007f82:	4313      	orrs	r3, r2
 8007f84:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f86:	f7fa fad3 	bl	8002530 <HAL_GetTick>
 8007f8a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f8c:	e00a      	b.n	8007fa4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f8e:	f7fa facf 	bl	8002530 <HAL_GetTick>
 8007f92:	4602      	mov	r2, r0
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	1ad3      	subs	r3, r2, r3
 8007f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d901      	bls.n	8007fa4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007fa0:	2303      	movs	r3, #3
 8007fa2:	e0be      	b.n	8008122 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fa4:	4b1c      	ldr	r3, [pc, #112]	; (8008018 <HAL_RCC_ClockConfig+0x244>)
 8007fa6:	691b      	ldr	r3, [r3, #16]
 8007fa8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	00db      	lsls	r3, r3, #3
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d1eb      	bne.n	8007f8e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f003 0302 	and.w	r3, r3, #2
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d010      	beq.n	8007fe4 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	68da      	ldr	r2, [r3, #12]
 8007fc6:	4b14      	ldr	r3, [pc, #80]	; (8008018 <HAL_RCC_ClockConfig+0x244>)
 8007fc8:	699b      	ldr	r3, [r3, #24]
 8007fca:	f003 030f 	and.w	r3, r3, #15
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d208      	bcs.n	8007fe4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007fd2:	4b11      	ldr	r3, [pc, #68]	; (8008018 <HAL_RCC_ClockConfig+0x244>)
 8007fd4:	699b      	ldr	r3, [r3, #24]
 8007fd6:	f023 020f 	bic.w	r2, r3, #15
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	490e      	ldr	r1, [pc, #56]	; (8008018 <HAL_RCC_ClockConfig+0x244>)
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007fe4:	4b0b      	ldr	r3, [pc, #44]	; (8008014 <HAL_RCC_ClockConfig+0x240>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f003 030f 	and.w	r3, r3, #15
 8007fec:	683a      	ldr	r2, [r7, #0]
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d214      	bcs.n	800801c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ff2:	4b08      	ldr	r3, [pc, #32]	; (8008014 <HAL_RCC_ClockConfig+0x240>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f023 020f 	bic.w	r2, r3, #15
 8007ffa:	4906      	ldr	r1, [pc, #24]	; (8008014 <HAL_RCC_ClockConfig+0x240>)
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	4313      	orrs	r3, r2
 8008000:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008002:	4b04      	ldr	r3, [pc, #16]	; (8008014 <HAL_RCC_ClockConfig+0x240>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f003 030f 	and.w	r3, r3, #15
 800800a:	683a      	ldr	r2, [r7, #0]
 800800c:	429a      	cmp	r2, r3
 800800e:	d005      	beq.n	800801c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	e086      	b.n	8008122 <HAL_RCC_ClockConfig+0x34e>
 8008014:	52002000 	.word	0x52002000
 8008018:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f003 0304 	and.w	r3, r3, #4
 8008024:	2b00      	cmp	r3, #0
 8008026:	d010      	beq.n	800804a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	691a      	ldr	r2, [r3, #16]
 800802c:	4b3f      	ldr	r3, [pc, #252]	; (800812c <HAL_RCC_ClockConfig+0x358>)
 800802e:	699b      	ldr	r3, [r3, #24]
 8008030:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008034:	429a      	cmp	r2, r3
 8008036:	d208      	bcs.n	800804a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008038:	4b3c      	ldr	r3, [pc, #240]	; (800812c <HAL_RCC_ClockConfig+0x358>)
 800803a:	699b      	ldr	r3, [r3, #24]
 800803c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	691b      	ldr	r3, [r3, #16]
 8008044:	4939      	ldr	r1, [pc, #228]	; (800812c <HAL_RCC_ClockConfig+0x358>)
 8008046:	4313      	orrs	r3, r2
 8008048:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f003 0308 	and.w	r3, r3, #8
 8008052:	2b00      	cmp	r3, #0
 8008054:	d010      	beq.n	8008078 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	695a      	ldr	r2, [r3, #20]
 800805a:	4b34      	ldr	r3, [pc, #208]	; (800812c <HAL_RCC_ClockConfig+0x358>)
 800805c:	69db      	ldr	r3, [r3, #28]
 800805e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008062:	429a      	cmp	r2, r3
 8008064:	d208      	bcs.n	8008078 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008066:	4b31      	ldr	r3, [pc, #196]	; (800812c <HAL_RCC_ClockConfig+0x358>)
 8008068:	69db      	ldr	r3, [r3, #28]
 800806a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	695b      	ldr	r3, [r3, #20]
 8008072:	492e      	ldr	r1, [pc, #184]	; (800812c <HAL_RCC_ClockConfig+0x358>)
 8008074:	4313      	orrs	r3, r2
 8008076:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f003 0310 	and.w	r3, r3, #16
 8008080:	2b00      	cmp	r3, #0
 8008082:	d010      	beq.n	80080a6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	699a      	ldr	r2, [r3, #24]
 8008088:	4b28      	ldr	r3, [pc, #160]	; (800812c <HAL_RCC_ClockConfig+0x358>)
 800808a:	69db      	ldr	r3, [r3, #28]
 800808c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008090:	429a      	cmp	r2, r3
 8008092:	d208      	bcs.n	80080a6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008094:	4b25      	ldr	r3, [pc, #148]	; (800812c <HAL_RCC_ClockConfig+0x358>)
 8008096:	69db      	ldr	r3, [r3, #28]
 8008098:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	699b      	ldr	r3, [r3, #24]
 80080a0:	4922      	ldr	r1, [pc, #136]	; (800812c <HAL_RCC_ClockConfig+0x358>)
 80080a2:	4313      	orrs	r3, r2
 80080a4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f003 0320 	and.w	r3, r3, #32
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d010      	beq.n	80080d4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	69da      	ldr	r2, [r3, #28]
 80080b6:	4b1d      	ldr	r3, [pc, #116]	; (800812c <HAL_RCC_ClockConfig+0x358>)
 80080b8:	6a1b      	ldr	r3, [r3, #32]
 80080ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80080be:	429a      	cmp	r2, r3
 80080c0:	d208      	bcs.n	80080d4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80080c2:	4b1a      	ldr	r3, [pc, #104]	; (800812c <HAL_RCC_ClockConfig+0x358>)
 80080c4:	6a1b      	ldr	r3, [r3, #32]
 80080c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	69db      	ldr	r3, [r3, #28]
 80080ce:	4917      	ldr	r1, [pc, #92]	; (800812c <HAL_RCC_ClockConfig+0x358>)
 80080d0:	4313      	orrs	r3, r2
 80080d2:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80080d4:	f000 f834 	bl	8008140 <HAL_RCC_GetSysClockFreq>
 80080d8:	4602      	mov	r2, r0
 80080da:	4b14      	ldr	r3, [pc, #80]	; (800812c <HAL_RCC_ClockConfig+0x358>)
 80080dc:	699b      	ldr	r3, [r3, #24]
 80080de:	0a1b      	lsrs	r3, r3, #8
 80080e0:	f003 030f 	and.w	r3, r3, #15
 80080e4:	4912      	ldr	r1, [pc, #72]	; (8008130 <HAL_RCC_ClockConfig+0x35c>)
 80080e6:	5ccb      	ldrb	r3, [r1, r3]
 80080e8:	f003 031f 	and.w	r3, r3, #31
 80080ec:	fa22 f303 	lsr.w	r3, r2, r3
 80080f0:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80080f2:	4b0e      	ldr	r3, [pc, #56]	; (800812c <HAL_RCC_ClockConfig+0x358>)
 80080f4:	699b      	ldr	r3, [r3, #24]
 80080f6:	f003 030f 	and.w	r3, r3, #15
 80080fa:	4a0d      	ldr	r2, [pc, #52]	; (8008130 <HAL_RCC_ClockConfig+0x35c>)
 80080fc:	5cd3      	ldrb	r3, [r2, r3]
 80080fe:	f003 031f 	and.w	r3, r3, #31
 8008102:	693a      	ldr	r2, [r7, #16]
 8008104:	fa22 f303 	lsr.w	r3, r2, r3
 8008108:	4a0a      	ldr	r2, [pc, #40]	; (8008134 <HAL_RCC_ClockConfig+0x360>)
 800810a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800810c:	4a0a      	ldr	r2, [pc, #40]	; (8008138 <HAL_RCC_ClockConfig+0x364>)
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008112:	4b0a      	ldr	r3, [pc, #40]	; (800813c <HAL_RCC_ClockConfig+0x368>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4618      	mov	r0, r3
 8008118:	f7fa f85a 	bl	80021d0 <HAL_InitTick>
 800811c:	4603      	mov	r3, r0
 800811e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008120:	7bfb      	ldrb	r3, [r7, #15]
}
 8008122:	4618      	mov	r0, r3
 8008124:	3718      	adds	r7, #24
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop
 800812c:	58024400 	.word	0x58024400
 8008130:	08011c80 	.word	0x08011c80
 8008134:	24000008 	.word	0x24000008
 8008138:	24000004 	.word	0x24000004
 800813c:	2400000c 	.word	0x2400000c

08008140 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008140:	b480      	push	{r7}
 8008142:	b089      	sub	sp, #36	; 0x24
 8008144:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008146:	4bb3      	ldr	r3, [pc, #716]	; (8008414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008148:	691b      	ldr	r3, [r3, #16]
 800814a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800814e:	2b18      	cmp	r3, #24
 8008150:	f200 8155 	bhi.w	80083fe <HAL_RCC_GetSysClockFreq+0x2be>
 8008154:	a201      	add	r2, pc, #4	; (adr r2, 800815c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800815a:	bf00      	nop
 800815c:	080081c1 	.word	0x080081c1
 8008160:	080083ff 	.word	0x080083ff
 8008164:	080083ff 	.word	0x080083ff
 8008168:	080083ff 	.word	0x080083ff
 800816c:	080083ff 	.word	0x080083ff
 8008170:	080083ff 	.word	0x080083ff
 8008174:	080083ff 	.word	0x080083ff
 8008178:	080083ff 	.word	0x080083ff
 800817c:	080081e7 	.word	0x080081e7
 8008180:	080083ff 	.word	0x080083ff
 8008184:	080083ff 	.word	0x080083ff
 8008188:	080083ff 	.word	0x080083ff
 800818c:	080083ff 	.word	0x080083ff
 8008190:	080083ff 	.word	0x080083ff
 8008194:	080083ff 	.word	0x080083ff
 8008198:	080083ff 	.word	0x080083ff
 800819c:	080081ed 	.word	0x080081ed
 80081a0:	080083ff 	.word	0x080083ff
 80081a4:	080083ff 	.word	0x080083ff
 80081a8:	080083ff 	.word	0x080083ff
 80081ac:	080083ff 	.word	0x080083ff
 80081b0:	080083ff 	.word	0x080083ff
 80081b4:	080083ff 	.word	0x080083ff
 80081b8:	080083ff 	.word	0x080083ff
 80081bc:	080081f3 	.word	0x080081f3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081c0:	4b94      	ldr	r3, [pc, #592]	; (8008414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f003 0320 	and.w	r3, r3, #32
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d009      	beq.n	80081e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80081cc:	4b91      	ldr	r3, [pc, #580]	; (8008414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	08db      	lsrs	r3, r3, #3
 80081d2:	f003 0303 	and.w	r3, r3, #3
 80081d6:	4a90      	ldr	r2, [pc, #576]	; (8008418 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80081d8:	fa22 f303 	lsr.w	r3, r2, r3
 80081dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80081de:	e111      	b.n	8008404 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80081e0:	4b8d      	ldr	r3, [pc, #564]	; (8008418 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80081e2:	61bb      	str	r3, [r7, #24]
    break;
 80081e4:	e10e      	b.n	8008404 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80081e6:	4b8d      	ldr	r3, [pc, #564]	; (800841c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80081e8:	61bb      	str	r3, [r7, #24]
    break;
 80081ea:	e10b      	b.n	8008404 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80081ec:	4b8c      	ldr	r3, [pc, #560]	; (8008420 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80081ee:	61bb      	str	r3, [r7, #24]
    break;
 80081f0:	e108      	b.n	8008404 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80081f2:	4b88      	ldr	r3, [pc, #544]	; (8008414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f6:	f003 0303 	and.w	r3, r3, #3
 80081fa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80081fc:	4b85      	ldr	r3, [pc, #532]	; (8008414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008200:	091b      	lsrs	r3, r3, #4
 8008202:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008206:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008208:	4b82      	ldr	r3, [pc, #520]	; (8008414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800820a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800820c:	f003 0301 	and.w	r3, r3, #1
 8008210:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008212:	4b80      	ldr	r3, [pc, #512]	; (8008414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008216:	08db      	lsrs	r3, r3, #3
 8008218:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800821c:	68fa      	ldr	r2, [r7, #12]
 800821e:	fb02 f303 	mul.w	r3, r2, r3
 8008222:	ee07 3a90 	vmov	s15, r3
 8008226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800822a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	2b00      	cmp	r3, #0
 8008232:	f000 80e1 	beq.w	80083f8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	2b02      	cmp	r3, #2
 800823a:	f000 8083 	beq.w	8008344 <HAL_RCC_GetSysClockFreq+0x204>
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	2b02      	cmp	r3, #2
 8008242:	f200 80a1 	bhi.w	8008388 <HAL_RCC_GetSysClockFreq+0x248>
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d003      	beq.n	8008254 <HAL_RCC_GetSysClockFreq+0x114>
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	2b01      	cmp	r3, #1
 8008250:	d056      	beq.n	8008300 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008252:	e099      	b.n	8008388 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008254:	4b6f      	ldr	r3, [pc, #444]	; (8008414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f003 0320 	and.w	r3, r3, #32
 800825c:	2b00      	cmp	r3, #0
 800825e:	d02d      	beq.n	80082bc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008260:	4b6c      	ldr	r3, [pc, #432]	; (8008414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	08db      	lsrs	r3, r3, #3
 8008266:	f003 0303 	and.w	r3, r3, #3
 800826a:	4a6b      	ldr	r2, [pc, #428]	; (8008418 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800826c:	fa22 f303 	lsr.w	r3, r2, r3
 8008270:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	ee07 3a90 	vmov	s15, r3
 8008278:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	ee07 3a90 	vmov	s15, r3
 8008282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800828a:	4b62      	ldr	r3, [pc, #392]	; (8008414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800828c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800828e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008292:	ee07 3a90 	vmov	s15, r3
 8008296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800829a:	ed97 6a02 	vldr	s12, [r7, #8]
 800829e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008424 <HAL_RCC_GetSysClockFreq+0x2e4>
 80082a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082b6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80082ba:	e087      	b.n	80083cc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	ee07 3a90 	vmov	s15, r3
 80082c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082c6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008428 <HAL_RCC_GetSysClockFreq+0x2e8>
 80082ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082ce:	4b51      	ldr	r3, [pc, #324]	; (8008414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082d6:	ee07 3a90 	vmov	s15, r3
 80082da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082de:	ed97 6a02 	vldr	s12, [r7, #8]
 80082e2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008424 <HAL_RCC_GetSysClockFreq+0x2e4>
 80082e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082fe:	e065      	b.n	80083cc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	ee07 3a90 	vmov	s15, r3
 8008306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800830a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800842c <HAL_RCC_GetSysClockFreq+0x2ec>
 800830e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008312:	4b40      	ldr	r3, [pc, #256]	; (8008414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800831a:	ee07 3a90 	vmov	s15, r3
 800831e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008322:	ed97 6a02 	vldr	s12, [r7, #8]
 8008326:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008424 <HAL_RCC_GetSysClockFreq+0x2e4>
 800832a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800832e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008332:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800833a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800833e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008342:	e043      	b.n	80083cc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	ee07 3a90 	vmov	s15, r3
 800834a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800834e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008430 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008356:	4b2f      	ldr	r3, [pc, #188]	; (8008414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800835a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800835e:	ee07 3a90 	vmov	s15, r3
 8008362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008366:	ed97 6a02 	vldr	s12, [r7, #8]
 800836a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008424 <HAL_RCC_GetSysClockFreq+0x2e4>
 800836e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008376:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800837a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800837e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008382:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008386:	e021      	b.n	80083cc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	ee07 3a90 	vmov	s15, r3
 800838e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008392:	eddf 6a26 	vldr	s13, [pc, #152]	; 800842c <HAL_RCC_GetSysClockFreq+0x2ec>
 8008396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800839a:	4b1e      	ldr	r3, [pc, #120]	; (8008414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800839c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800839e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083a2:	ee07 3a90 	vmov	s15, r3
 80083a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80083ae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008424 <HAL_RCC_GetSysClockFreq+0x2e4>
 80083b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083ca:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80083cc:	4b11      	ldr	r3, [pc, #68]	; (8008414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083d0:	0a5b      	lsrs	r3, r3, #9
 80083d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083d6:	3301      	adds	r3, #1
 80083d8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	ee07 3a90 	vmov	s15, r3
 80083e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80083e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80083e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083f0:	ee17 3a90 	vmov	r3, s15
 80083f4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80083f6:	e005      	b.n	8008404 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80083f8:	2300      	movs	r3, #0
 80083fa:	61bb      	str	r3, [r7, #24]
    break;
 80083fc:	e002      	b.n	8008404 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80083fe:	4b07      	ldr	r3, [pc, #28]	; (800841c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008400:	61bb      	str	r3, [r7, #24]
    break;
 8008402:	bf00      	nop
  }

  return sysclockfreq;
 8008404:	69bb      	ldr	r3, [r7, #24]
}
 8008406:	4618      	mov	r0, r3
 8008408:	3724      	adds	r7, #36	; 0x24
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr
 8008412:	bf00      	nop
 8008414:	58024400 	.word	0x58024400
 8008418:	03d09000 	.word	0x03d09000
 800841c:	003d0900 	.word	0x003d0900
 8008420:	007a1200 	.word	0x007a1200
 8008424:	46000000 	.word	0x46000000
 8008428:	4c742400 	.word	0x4c742400
 800842c:	4a742400 	.word	0x4a742400
 8008430:	4af42400 	.word	0x4af42400

08008434 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b082      	sub	sp, #8
 8008438:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800843a:	f7ff fe81 	bl	8008140 <HAL_RCC_GetSysClockFreq>
 800843e:	4602      	mov	r2, r0
 8008440:	4b10      	ldr	r3, [pc, #64]	; (8008484 <HAL_RCC_GetHCLKFreq+0x50>)
 8008442:	699b      	ldr	r3, [r3, #24]
 8008444:	0a1b      	lsrs	r3, r3, #8
 8008446:	f003 030f 	and.w	r3, r3, #15
 800844a:	490f      	ldr	r1, [pc, #60]	; (8008488 <HAL_RCC_GetHCLKFreq+0x54>)
 800844c:	5ccb      	ldrb	r3, [r1, r3]
 800844e:	f003 031f 	and.w	r3, r3, #31
 8008452:	fa22 f303 	lsr.w	r3, r2, r3
 8008456:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8008458:	4b0a      	ldr	r3, [pc, #40]	; (8008484 <HAL_RCC_GetHCLKFreq+0x50>)
 800845a:	699b      	ldr	r3, [r3, #24]
 800845c:	f003 030f 	and.w	r3, r3, #15
 8008460:	4a09      	ldr	r2, [pc, #36]	; (8008488 <HAL_RCC_GetHCLKFreq+0x54>)
 8008462:	5cd3      	ldrb	r3, [r2, r3]
 8008464:	f003 031f 	and.w	r3, r3, #31
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	fa22 f303 	lsr.w	r3, r2, r3
 800846e:	4a07      	ldr	r2, [pc, #28]	; (800848c <HAL_RCC_GetHCLKFreq+0x58>)
 8008470:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008472:	4a07      	ldr	r2, [pc, #28]	; (8008490 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008478:	4b04      	ldr	r3, [pc, #16]	; (800848c <HAL_RCC_GetHCLKFreq+0x58>)
 800847a:	681b      	ldr	r3, [r3, #0]
}
 800847c:	4618      	mov	r0, r3
 800847e:	3708      	adds	r7, #8
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}
 8008484:	58024400 	.word	0x58024400
 8008488:	08011c80 	.word	0x08011c80
 800848c:	24000008 	.word	0x24000008
 8008490:	24000004 	.word	0x24000004

08008494 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8008498:	f7ff ffcc 	bl	8008434 <HAL_RCC_GetHCLKFreq>
 800849c:	4602      	mov	r2, r0
 800849e:	4b06      	ldr	r3, [pc, #24]	; (80084b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80084a0:	69db      	ldr	r3, [r3, #28]
 80084a2:	091b      	lsrs	r3, r3, #4
 80084a4:	f003 0307 	and.w	r3, r3, #7
 80084a8:	4904      	ldr	r1, [pc, #16]	; (80084bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80084aa:	5ccb      	ldrb	r3, [r1, r3]
 80084ac:	f003 031f 	and.w	r3, r3, #31
 80084b0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	bd80      	pop	{r7, pc}
 80084b8:	58024400 	.word	0x58024400
 80084bc:	08011c80 	.word	0x08011c80

080084c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80084c4:	f7ff ffb6 	bl	8008434 <HAL_RCC_GetHCLKFreq>
 80084c8:	4602      	mov	r2, r0
 80084ca:	4b06      	ldr	r3, [pc, #24]	; (80084e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80084cc:	69db      	ldr	r3, [r3, #28]
 80084ce:	0a1b      	lsrs	r3, r3, #8
 80084d0:	f003 0307 	and.w	r3, r3, #7
 80084d4:	4904      	ldr	r1, [pc, #16]	; (80084e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80084d6:	5ccb      	ldrb	r3, [r1, r3]
 80084d8:	f003 031f 	and.w	r3, r3, #31
 80084dc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	58024400 	.word	0x58024400
 80084e8:	08011c80 	.word	0x08011c80

080084ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b083      	sub	sp, #12
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	223f      	movs	r2, #63	; 0x3f
 80084fa:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80084fc:	4b1a      	ldr	r3, [pc, #104]	; (8008568 <HAL_RCC_GetClockConfig+0x7c>)
 80084fe:	691b      	ldr	r3, [r3, #16]
 8008500:	f003 0207 	and.w	r2, r3, #7
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 8008508:	4b17      	ldr	r3, [pc, #92]	; (8008568 <HAL_RCC_GetClockConfig+0x7c>)
 800850a:	699b      	ldr	r3, [r3, #24]
 800850c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 8008514:	4b14      	ldr	r3, [pc, #80]	; (8008568 <HAL_RCC_GetClockConfig+0x7c>)
 8008516:	699b      	ldr	r3, [r3, #24]
 8008518:	f003 020f 	and.w	r2, r3, #15
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 8008520:	4b11      	ldr	r3, [pc, #68]	; (8008568 <HAL_RCC_GetClockConfig+0x7c>)
 8008522:	699b      	ldr	r3, [r3, #24]
 8008524:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 800852c:	4b0e      	ldr	r3, [pc, #56]	; (8008568 <HAL_RCC_GetClockConfig+0x7c>)
 800852e:	69db      	ldr	r3, [r3, #28]
 8008530:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 8008538:	4b0b      	ldr	r3, [pc, #44]	; (8008568 <HAL_RCC_GetClockConfig+0x7c>)
 800853a:	69db      	ldr	r3, [r3, #28]
 800853c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 8008544:	4b08      	ldr	r3, [pc, #32]	; (8008568 <HAL_RCC_GetClockConfig+0x7c>)
 8008546:	6a1b      	ldr	r3, [r3, #32]
 8008548:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008550:	4b06      	ldr	r3, [pc, #24]	; (800856c <HAL_RCC_GetClockConfig+0x80>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f003 020f 	and.w	r2, r3, #15
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	601a      	str	r2, [r3, #0]
}
 800855c:	bf00      	nop
 800855e:	370c      	adds	r7, #12
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr
 8008568:	58024400 	.word	0x58024400
 800856c:	52002000 	.word	0x52002000

08008570 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b086      	sub	sp, #24
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008578:	2300      	movs	r3, #0
 800857a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800857c:	2300      	movs	r3, #0
 800857e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008588:	2b00      	cmp	r3, #0
 800858a:	d03f      	beq.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008590:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008594:	d02a      	beq.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008596:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800859a:	d824      	bhi.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800859c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80085a0:	d018      	beq.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80085a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80085a6:	d81e      	bhi.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d003      	beq.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80085ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085b0:	d007      	beq.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80085b2:	e018      	b.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085b4:	4b9f      	ldr	r3, [pc, #636]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80085b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b8:	4a9e      	ldr	r2, [pc, #632]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80085ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80085c0:	e015      	b.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	3304      	adds	r3, #4
 80085c6:	2102      	movs	r1, #2
 80085c8:	4618      	mov	r0, r3
 80085ca:	f001 ff1b 	bl	800a404 <RCCEx_PLL2_Config>
 80085ce:	4603      	mov	r3, r0
 80085d0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80085d2:	e00c      	b.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	3324      	adds	r3, #36	; 0x24
 80085d8:	2102      	movs	r1, #2
 80085da:	4618      	mov	r0, r3
 80085dc:	f001 ffc4 	bl	800a568 <RCCEx_PLL3_Config>
 80085e0:	4603      	mov	r3, r0
 80085e2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80085e4:	e003      	b.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085e6:	2301      	movs	r3, #1
 80085e8:	75fb      	strb	r3, [r7, #23]
      break;
 80085ea:	e000      	b.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80085ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085ee:	7dfb      	ldrb	r3, [r7, #23]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d109      	bne.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80085f4:	4b8f      	ldr	r3, [pc, #572]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80085f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008600:	498c      	ldr	r1, [pc, #560]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008602:	4313      	orrs	r3, r2
 8008604:	650b      	str	r3, [r1, #80]	; 0x50
 8008606:	e001      	b.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008608:	7dfb      	ldrb	r3, [r7, #23]
 800860a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008614:	2b00      	cmp	r3, #0
 8008616:	d03d      	beq.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800861c:	2b04      	cmp	r3, #4
 800861e:	d826      	bhi.n	800866e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008620:	a201      	add	r2, pc, #4	; (adr r2, 8008628 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008626:	bf00      	nop
 8008628:	0800863d 	.word	0x0800863d
 800862c:	0800864b 	.word	0x0800864b
 8008630:	0800865d 	.word	0x0800865d
 8008634:	08008675 	.word	0x08008675
 8008638:	08008675 	.word	0x08008675
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800863c:	4b7d      	ldr	r3, [pc, #500]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800863e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008640:	4a7c      	ldr	r2, [pc, #496]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008646:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008648:	e015      	b.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	3304      	adds	r3, #4
 800864e:	2100      	movs	r1, #0
 8008650:	4618      	mov	r0, r3
 8008652:	f001 fed7 	bl	800a404 <RCCEx_PLL2_Config>
 8008656:	4603      	mov	r3, r0
 8008658:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800865a:	e00c      	b.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	3324      	adds	r3, #36	; 0x24
 8008660:	2100      	movs	r1, #0
 8008662:	4618      	mov	r0, r3
 8008664:	f001 ff80 	bl	800a568 <RCCEx_PLL3_Config>
 8008668:	4603      	mov	r3, r0
 800866a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800866c:	e003      	b.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800866e:	2301      	movs	r3, #1
 8008670:	75fb      	strb	r3, [r7, #23]
      break;
 8008672:	e000      	b.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008674:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008676:	7dfb      	ldrb	r3, [r7, #23]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d109      	bne.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800867c:	4b6d      	ldr	r3, [pc, #436]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800867e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008680:	f023 0207 	bic.w	r2, r3, #7
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008688:	496a      	ldr	r1, [pc, #424]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800868a:	4313      	orrs	r3, r2
 800868c:	650b      	str	r3, [r1, #80]	; 0x50
 800868e:	e001      	b.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008690:	7dfb      	ldrb	r3, [r7, #23]
 8008692:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800869c:	2b00      	cmp	r3, #0
 800869e:	d04a      	beq.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086a4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80086a8:	d031      	beq.n	800870e <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80086aa:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80086ae:	d82b      	bhi.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80086b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086b4:	d02d      	beq.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80086b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086ba:	d825      	bhi.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80086bc:	2bc0      	cmp	r3, #192	; 0xc0
 80086be:	d02a      	beq.n	8008716 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80086c0:	2bc0      	cmp	r3, #192	; 0xc0
 80086c2:	d821      	bhi.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80086c4:	2b80      	cmp	r3, #128	; 0x80
 80086c6:	d016      	beq.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80086c8:	2b80      	cmp	r3, #128	; 0x80
 80086ca:	d81d      	bhi.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d002      	beq.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80086d0:	2b40      	cmp	r3, #64	; 0x40
 80086d2:	d007      	beq.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80086d4:	e018      	b.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086d6:	4b57      	ldr	r3, [pc, #348]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80086d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086da:	4a56      	ldr	r2, [pc, #344]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80086dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80086e2:	e019      	b.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	3304      	adds	r3, #4
 80086e8:	2100      	movs	r1, #0
 80086ea:	4618      	mov	r0, r3
 80086ec:	f001 fe8a 	bl	800a404 <RCCEx_PLL2_Config>
 80086f0:	4603      	mov	r3, r0
 80086f2:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80086f4:	e010      	b.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	3324      	adds	r3, #36	; 0x24
 80086fa:	2100      	movs	r1, #0
 80086fc:	4618      	mov	r0, r3
 80086fe:	f001 ff33 	bl	800a568 <RCCEx_PLL3_Config>
 8008702:	4603      	mov	r3, r0
 8008704:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8008706:	e007      	b.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008708:	2301      	movs	r3, #1
 800870a:	75fb      	strb	r3, [r7, #23]
      break;
 800870c:	e004      	b.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800870e:	bf00      	nop
 8008710:	e002      	b.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8008712:	bf00      	nop
 8008714:	e000      	b.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8008716:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008718:	7dfb      	ldrb	r3, [r7, #23]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d109      	bne.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800871e:	4b45      	ldr	r3, [pc, #276]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008722:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800872a:	4942      	ldr	r1, [pc, #264]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800872c:	4313      	orrs	r3, r2
 800872e:	650b      	str	r3, [r1, #80]	; 0x50
 8008730:	e001      	b.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008732:	7dfb      	ldrb	r3, [r7, #23]
 8008734:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800873e:	2b00      	cmp	r3, #0
 8008740:	d04f      	beq.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008746:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800874a:	d036      	beq.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800874c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8008750:	d830      	bhi.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8008752:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008756:	d032      	beq.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8008758:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800875c:	d82a      	bhi.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800875e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008762:	d02e      	beq.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8008764:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008768:	d824      	bhi.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800876a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800876e:	d018      	beq.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8008770:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008774:	d81e      	bhi.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8008776:	2b00      	cmp	r3, #0
 8008778:	d003      	beq.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800877a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800877e:	d007      	beq.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8008780:	e018      	b.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008782:	4b2c      	ldr	r3, [pc, #176]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008786:	4a2b      	ldr	r2, [pc, #172]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800878c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800878e:	e019      	b.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	3304      	adds	r3, #4
 8008794:	2100      	movs	r1, #0
 8008796:	4618      	mov	r0, r3
 8008798:	f001 fe34 	bl	800a404 <RCCEx_PLL2_Config>
 800879c:	4603      	mov	r3, r0
 800879e:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80087a0:	e010      	b.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	3324      	adds	r3, #36	; 0x24
 80087a6:	2100      	movs	r1, #0
 80087a8:	4618      	mov	r0, r3
 80087aa:	f001 fedd 	bl	800a568 <RCCEx_PLL3_Config>
 80087ae:	4603      	mov	r3, r0
 80087b0:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80087b2:	e007      	b.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80087b4:	2301      	movs	r3, #1
 80087b6:	75fb      	strb	r3, [r7, #23]
      break;
 80087b8:	e004      	b.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80087ba:	bf00      	nop
 80087bc:	e002      	b.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80087be:	bf00      	nop
 80087c0:	e000      	b.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80087c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087c4:	7dfb      	ldrb	r3, [r7, #23]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d109      	bne.n	80087de <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80087ca:	4b1a      	ldr	r3, [pc, #104]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80087cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087ce:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087d6:	4917      	ldr	r1, [pc, #92]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80087d8:	4313      	orrs	r3, r2
 80087da:	650b      	str	r3, [r1, #80]	; 0x50
 80087dc:	e001      	b.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087de:	7dfb      	ldrb	r3, [r7, #23]
 80087e0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d034      	beq.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087f2:	2b30      	cmp	r3, #48	; 0x30
 80087f4:	d01c      	beq.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 80087f6:	2b30      	cmp	r3, #48	; 0x30
 80087f8:	d817      	bhi.n	800882a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80087fa:	2b20      	cmp	r3, #32
 80087fc:	d00c      	beq.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80087fe:	2b20      	cmp	r3, #32
 8008800:	d813      	bhi.n	800882a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8008802:	2b00      	cmp	r3, #0
 8008804:	d018      	beq.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8008806:	2b10      	cmp	r3, #16
 8008808:	d10f      	bne.n	800882a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800880a:	4b0a      	ldr	r3, [pc, #40]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800880c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800880e:	4a09      	ldr	r2, [pc, #36]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008814:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8008816:	e010      	b.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	3304      	adds	r3, #4
 800881c:	2102      	movs	r1, #2
 800881e:	4618      	mov	r0, r3
 8008820:	f001 fdf0 	bl	800a404 <RCCEx_PLL2_Config>
 8008824:	4603      	mov	r3, r0
 8008826:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8008828:	e007      	b.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800882a:	2301      	movs	r3, #1
 800882c:	75fb      	strb	r3, [r7, #23]
      break;
 800882e:	e004      	b.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 8008830:	bf00      	nop
 8008832:	e002      	b.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008834:	58024400 	.word	0x58024400
      break;
 8008838:	bf00      	nop
    }

    if(ret == HAL_OK)
 800883a:	7dfb      	ldrb	r3, [r7, #23]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d109      	bne.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008840:	4b9b      	ldr	r3, [pc, #620]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8008842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008844:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800884c:	4998      	ldr	r1, [pc, #608]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800884e:	4313      	orrs	r3, r2
 8008850:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008852:	e001      	b.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008854:	7dfb      	ldrb	r3, [r7, #23]
 8008856:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008860:	2b00      	cmp	r3, #0
 8008862:	d047      	beq.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008868:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800886c:	d030      	beq.n	80088d0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800886e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008872:	d82a      	bhi.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8008874:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008878:	d02c      	beq.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0x364>
 800887a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800887e:	d824      	bhi.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8008880:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008884:	d018      	beq.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8008886:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800888a:	d81e      	bhi.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800888c:	2b00      	cmp	r3, #0
 800888e:	d003      	beq.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8008890:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008894:	d007      	beq.n	80088a6 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8008896:	e018      	b.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008898:	4b85      	ldr	r3, [pc, #532]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800889a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800889c:	4a84      	ldr	r2, [pc, #528]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800889e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80088a4:	e017      	b.n	80088d6 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	3304      	adds	r3, #4
 80088aa:	2100      	movs	r1, #0
 80088ac:	4618      	mov	r0, r3
 80088ae:	f001 fda9 	bl	800a404 <RCCEx_PLL2_Config>
 80088b2:	4603      	mov	r3, r0
 80088b4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80088b6:	e00e      	b.n	80088d6 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	3324      	adds	r3, #36	; 0x24
 80088bc:	2100      	movs	r1, #0
 80088be:	4618      	mov	r0, r3
 80088c0:	f001 fe52 	bl	800a568 <RCCEx_PLL3_Config>
 80088c4:	4603      	mov	r3, r0
 80088c6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80088c8:	e005      	b.n	80088d6 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088ca:	2301      	movs	r3, #1
 80088cc:	75fb      	strb	r3, [r7, #23]
      break;
 80088ce:	e002      	b.n	80088d6 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80088d0:	bf00      	nop
 80088d2:	e000      	b.n	80088d6 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80088d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088d6:	7dfb      	ldrb	r3, [r7, #23]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d109      	bne.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80088dc:	4b74      	ldr	r3, [pc, #464]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80088de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088e0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088e8:	4971      	ldr	r1, [pc, #452]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80088ea:	4313      	orrs	r3, r2
 80088ec:	650b      	str	r3, [r1, #80]	; 0x50
 80088ee:	e001      	b.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088f0:	7dfb      	ldrb	r3, [r7, #23]
 80088f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d049      	beq.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008904:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008908:	d02e      	beq.n	8008968 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800890a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800890e:	d828      	bhi.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8008910:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008914:	d02a      	beq.n	800896c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8008916:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800891a:	d822      	bhi.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800891c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008920:	d026      	beq.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8008922:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008926:	d81c      	bhi.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8008928:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800892c:	d010      	beq.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800892e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008932:	d816      	bhi.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8008934:	2b00      	cmp	r3, #0
 8008936:	d01d      	beq.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8008938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800893c:	d111      	bne.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	3304      	adds	r3, #4
 8008942:	2101      	movs	r1, #1
 8008944:	4618      	mov	r0, r3
 8008946:	f001 fd5d 	bl	800a404 <RCCEx_PLL2_Config>
 800894a:	4603      	mov	r3, r0
 800894c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800894e:	e012      	b.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	3324      	adds	r3, #36	; 0x24
 8008954:	2101      	movs	r1, #1
 8008956:	4618      	mov	r0, r3
 8008958:	f001 fe06 	bl	800a568 <RCCEx_PLL3_Config>
 800895c:	4603      	mov	r3, r0
 800895e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008960:	e009      	b.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008962:	2301      	movs	r3, #1
 8008964:	75fb      	strb	r3, [r7, #23]
      break;
 8008966:	e006      	b.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8008968:	bf00      	nop
 800896a:	e004      	b.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 800896c:	bf00      	nop
 800896e:	e002      	b.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8008970:	bf00      	nop
 8008972:	e000      	b.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8008974:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008976:	7dfb      	ldrb	r3, [r7, #23]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d109      	bne.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800897c:	4b4c      	ldr	r3, [pc, #304]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800897e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008980:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008988:	4949      	ldr	r1, [pc, #292]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800898a:	4313      	orrs	r3, r2
 800898c:	650b      	str	r3, [r1, #80]	; 0x50
 800898e:	e001      	b.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008990:	7dfb      	ldrb	r3, [r7, #23]
 8008992:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800899c:	2b00      	cmp	r3, #0
 800899e:	d053      	beq.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80089a6:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80089aa:	d034      	beq.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80089ac:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80089b0:	d82e      	bhi.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80089b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80089b6:	d030      	beq.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80089b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80089bc:	d828      	bhi.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80089be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089c2:	d02c      	beq.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80089c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089c8:	d822      	bhi.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80089ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80089ce:	d028      	beq.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80089d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80089d4:	d81c      	bhi.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80089d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089da:	d010      	beq.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x48e>
 80089dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089e0:	d816      	bhi.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d01f      	beq.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80089e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089ea:	d111      	bne.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	3304      	adds	r3, #4
 80089f0:	2101      	movs	r1, #1
 80089f2:	4618      	mov	r0, r3
 80089f4:	f001 fd06 	bl	800a404 <RCCEx_PLL2_Config>
 80089f8:	4603      	mov	r3, r0
 80089fa:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80089fc:	e014      	b.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	3324      	adds	r3, #36	; 0x24
 8008a02:	2101      	movs	r1, #1
 8008a04:	4618      	mov	r0, r3
 8008a06:	f001 fdaf 	bl	800a568 <RCCEx_PLL3_Config>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008a0e:	e00b      	b.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008a10:	2301      	movs	r3, #1
 8008a12:	75fb      	strb	r3, [r7, #23]
      break;
 8008a14:	e008      	b.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8008a16:	bf00      	nop
 8008a18:	e006      	b.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8008a1a:	bf00      	nop
 8008a1c:	e004      	b.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8008a1e:	bf00      	nop
 8008a20:	e002      	b.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8008a22:	bf00      	nop
 8008a24:	e000      	b.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8008a26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a28:	7dfb      	ldrb	r3, [r7, #23]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d10a      	bne.n	8008a44 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008a2e:	4b20      	ldr	r3, [pc, #128]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8008a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a32:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008a3c:	491c      	ldr	r1, [pc, #112]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	658b      	str	r3, [r1, #88]	; 0x58
 8008a42:	e001      	b.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a44:	7dfb      	ldrb	r3, [r7, #23]
 8008a46:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d031      	beq.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a5c:	d00e      	beq.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8008a5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a62:	d814      	bhi.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d015      	beq.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8008a68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a6c:	d10f      	bne.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a6e:	4b10      	ldr	r3, [pc, #64]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8008a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a72:	4a0f      	ldr	r2, [pc, #60]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8008a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a78:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008a7a:	e00c      	b.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	3304      	adds	r3, #4
 8008a80:	2101      	movs	r1, #1
 8008a82:	4618      	mov	r0, r3
 8008a84:	f001 fcbe 	bl	800a404 <RCCEx_PLL2_Config>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008a8c:	e003      	b.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	75fb      	strb	r3, [r7, #23]
      break;
 8008a92:	e000      	b.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8008a94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a96:	7dfb      	ldrb	r3, [r7, #23]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d10b      	bne.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008a9c:	4b04      	ldr	r3, [pc, #16]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8008a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008aa0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008aa8:	4901      	ldr	r1, [pc, #4]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	650b      	str	r3, [r1, #80]	; 0x50
 8008aae:	e003      	b.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x548>
 8008ab0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ab4:	7dfb      	ldrb	r3, [r7, #23]
 8008ab6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d032      	beq.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ac8:	2b03      	cmp	r3, #3
 8008aca:	d81b      	bhi.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8008acc:	a201      	add	r2, pc, #4	; (adr r2, 8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8008ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ad2:	bf00      	nop
 8008ad4:	08008b0b 	.word	0x08008b0b
 8008ad8:	08008ae5 	.word	0x08008ae5
 8008adc:	08008af3 	.word	0x08008af3
 8008ae0:	08008b0b 	.word	0x08008b0b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ae4:	4bb2      	ldr	r3, [pc, #712]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae8:	4ab1      	ldr	r2, [pc, #708]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008aea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008aee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008af0:	e00c      	b.n	8008b0c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	3304      	adds	r3, #4
 8008af6:	2102      	movs	r1, #2
 8008af8:	4618      	mov	r0, r3
 8008afa:	f001 fc83 	bl	800a404 <RCCEx_PLL2_Config>
 8008afe:	4603      	mov	r3, r0
 8008b00:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008b02:	e003      	b.n	8008b0c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008b04:	2301      	movs	r3, #1
 8008b06:	75fb      	strb	r3, [r7, #23]
      break;
 8008b08:	e000      	b.n	8008b0c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8008b0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b0c:	7dfb      	ldrb	r3, [r7, #23]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d109      	bne.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008b12:	4ba7      	ldr	r3, [pc, #668]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b16:	f023 0203 	bic.w	r2, r3, #3
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b1e:	49a4      	ldr	r1, [pc, #656]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008b20:	4313      	orrs	r3, r2
 8008b22:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008b24:	e001      	b.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b26:	7dfb      	ldrb	r3, [r7, #23]
 8008b28:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	f000 8086 	beq.w	8008c44 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008b38:	4b9e      	ldr	r3, [pc, #632]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a9d      	ldr	r2, [pc, #628]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8008b3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b42:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008b44:	f7f9 fcf4 	bl	8002530 <HAL_GetTick>
 8008b48:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b4a:	e009      	b.n	8008b60 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b4c:	f7f9 fcf0 	bl	8002530 <HAL_GetTick>
 8008b50:	4602      	mov	r2, r0
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	1ad3      	subs	r3, r2, r3
 8008b56:	2b64      	cmp	r3, #100	; 0x64
 8008b58:	d902      	bls.n	8008b60 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 8008b5a:	2303      	movs	r3, #3
 8008b5c:	75fb      	strb	r3, [r7, #23]
        break;
 8008b5e:	e005      	b.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b60:	4b94      	ldr	r3, [pc, #592]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d0ef      	beq.n	8008b4c <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8008b6c:	7dfb      	ldrb	r3, [r7, #23]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d166      	bne.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008b72:	4b8f      	ldr	r3, [pc, #572]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008b74:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008b7c:	4053      	eors	r3, r2
 8008b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d013      	beq.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008b86:	4b8a      	ldr	r3, [pc, #552]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b8e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008b90:	4b87      	ldr	r3, [pc, #540]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b94:	4a86      	ldr	r2, [pc, #536]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008b96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b9a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008b9c:	4b84      	ldr	r3, [pc, #528]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ba0:	4a83      	ldr	r2, [pc, #524]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008ba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ba6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008ba8:	4a81      	ldr	r2, [pc, #516]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008bb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bb8:	d115      	bne.n	8008be6 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bba:	f7f9 fcb9 	bl	8002530 <HAL_GetTick>
 8008bbe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008bc0:	e00b      	b.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008bc2:	f7f9 fcb5 	bl	8002530 <HAL_GetTick>
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	1ad3      	subs	r3, r2, r3
 8008bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d902      	bls.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 8008bd4:	2303      	movs	r3, #3
 8008bd6:	75fb      	strb	r3, [r7, #23]
            break;
 8008bd8:	e005      	b.n	8008be6 <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008bda:	4b75      	ldr	r3, [pc, #468]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bde:	f003 0302 	and.w	r3, r3, #2
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d0ed      	beq.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 8008be6:	7dfb      	ldrb	r3, [r7, #23]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d126      	bne.n	8008c3a <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008bfa:	d10d      	bne.n	8008c18 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 8008bfc:	4b6c      	ldr	r3, [pc, #432]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008bfe:	691b      	ldr	r3, [r3, #16]
 8008c00:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008c0a:	0919      	lsrs	r1, r3, #4
 8008c0c:	4b6a      	ldr	r3, [pc, #424]	; (8008db8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008c0e:	400b      	ands	r3, r1
 8008c10:	4967      	ldr	r1, [pc, #412]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008c12:	4313      	orrs	r3, r2
 8008c14:	610b      	str	r3, [r1, #16]
 8008c16:	e005      	b.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 8008c18:	4b65      	ldr	r3, [pc, #404]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008c1a:	691b      	ldr	r3, [r3, #16]
 8008c1c:	4a64      	ldr	r2, [pc, #400]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008c1e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008c22:	6113      	str	r3, [r2, #16]
 8008c24:	4b62      	ldr	r3, [pc, #392]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008c26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008c2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c32:	495f      	ldr	r1, [pc, #380]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008c34:	4313      	orrs	r3, r2
 8008c36:	670b      	str	r3, [r1, #112]	; 0x70
 8008c38:	e004      	b.n	8008c44 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008c3a:	7dfb      	ldrb	r3, [r7, #23]
 8008c3c:	75bb      	strb	r3, [r7, #22]
 8008c3e:	e001      	b.n	8008c44 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c40:	7dfb      	ldrb	r3, [r7, #23]
 8008c42:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f003 0301 	and.w	r3, r3, #1
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d07f      	beq.n	8008d50 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c56:	2b28      	cmp	r3, #40	; 0x28
 8008c58:	d866      	bhi.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 8008c5a:	a201      	add	r2, pc, #4	; (adr r2, 8008c60 <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 8008c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c60:	08008d2f 	.word	0x08008d2f
 8008c64:	08008d29 	.word	0x08008d29
 8008c68:	08008d29 	.word	0x08008d29
 8008c6c:	08008d29 	.word	0x08008d29
 8008c70:	08008d29 	.word	0x08008d29
 8008c74:	08008d29 	.word	0x08008d29
 8008c78:	08008d29 	.word	0x08008d29
 8008c7c:	08008d29 	.word	0x08008d29
 8008c80:	08008d05 	.word	0x08008d05
 8008c84:	08008d29 	.word	0x08008d29
 8008c88:	08008d29 	.word	0x08008d29
 8008c8c:	08008d29 	.word	0x08008d29
 8008c90:	08008d29 	.word	0x08008d29
 8008c94:	08008d29 	.word	0x08008d29
 8008c98:	08008d29 	.word	0x08008d29
 8008c9c:	08008d29 	.word	0x08008d29
 8008ca0:	08008d17 	.word	0x08008d17
 8008ca4:	08008d29 	.word	0x08008d29
 8008ca8:	08008d29 	.word	0x08008d29
 8008cac:	08008d29 	.word	0x08008d29
 8008cb0:	08008d29 	.word	0x08008d29
 8008cb4:	08008d29 	.word	0x08008d29
 8008cb8:	08008d29 	.word	0x08008d29
 8008cbc:	08008d29 	.word	0x08008d29
 8008cc0:	08008d2f 	.word	0x08008d2f
 8008cc4:	08008d29 	.word	0x08008d29
 8008cc8:	08008d29 	.word	0x08008d29
 8008ccc:	08008d29 	.word	0x08008d29
 8008cd0:	08008d29 	.word	0x08008d29
 8008cd4:	08008d29 	.word	0x08008d29
 8008cd8:	08008d29 	.word	0x08008d29
 8008cdc:	08008d29 	.word	0x08008d29
 8008ce0:	08008d2f 	.word	0x08008d2f
 8008ce4:	08008d29 	.word	0x08008d29
 8008ce8:	08008d29 	.word	0x08008d29
 8008cec:	08008d29 	.word	0x08008d29
 8008cf0:	08008d29 	.word	0x08008d29
 8008cf4:	08008d29 	.word	0x08008d29
 8008cf8:	08008d29 	.word	0x08008d29
 8008cfc:	08008d29 	.word	0x08008d29
 8008d00:	08008d2f 	.word	0x08008d2f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	3304      	adds	r3, #4
 8008d08:	2101      	movs	r1, #1
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f001 fb7a 	bl	800a404 <RCCEx_PLL2_Config>
 8008d10:	4603      	mov	r3, r0
 8008d12:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008d14:	e00c      	b.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	3324      	adds	r3, #36	; 0x24
 8008d1a:	2101      	movs	r1, #1
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f001 fc23 	bl	800a568 <RCCEx_PLL3_Config>
 8008d22:	4603      	mov	r3, r0
 8008d24:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008d26:	e003      	b.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d28:	2301      	movs	r3, #1
 8008d2a:	75fb      	strb	r3, [r7, #23]
      break;
 8008d2c:	e000      	b.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 8008d2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d30:	7dfb      	ldrb	r3, [r7, #23]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d10a      	bne.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008d36:	4b1e      	ldr	r3, [pc, #120]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d3a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d44:	491a      	ldr	r1, [pc, #104]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008d46:	4313      	orrs	r3, r2
 8008d48:	654b      	str	r3, [r1, #84]	; 0x54
 8008d4a:	e001      	b.n	8008d50 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d4c:	7dfb      	ldrb	r3, [r7, #23]
 8008d4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f003 0302 	and.w	r3, r3, #2
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d03f      	beq.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d60:	2b05      	cmp	r3, #5
 8008d62:	d821      	bhi.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8008d64:	a201      	add	r2, pc, #4	; (adr r2, 8008d6c <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d6a:	bf00      	nop
 8008d6c:	08008dbd 	.word	0x08008dbd
 8008d70:	08008d85 	.word	0x08008d85
 8008d74:	08008d97 	.word	0x08008d97
 8008d78:	08008dbd 	.word	0x08008dbd
 8008d7c:	08008dbd 	.word	0x08008dbd
 8008d80:	08008dbd 	.word	0x08008dbd
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	3304      	adds	r3, #4
 8008d88:	2101      	movs	r1, #1
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f001 fb3a 	bl	800a404 <RCCEx_PLL2_Config>
 8008d90:	4603      	mov	r3, r0
 8008d92:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008d94:	e013      	b.n	8008dbe <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	3324      	adds	r3, #36	; 0x24
 8008d9a:	2101      	movs	r1, #1
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f001 fbe3 	bl	800a568 <RCCEx_PLL3_Config>
 8008da2:	4603      	mov	r3, r0
 8008da4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008da6:	e00a      	b.n	8008dbe <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008da8:	2301      	movs	r3, #1
 8008daa:	75fb      	strb	r3, [r7, #23]
      break;
 8008dac:	e007      	b.n	8008dbe <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8008dae:	bf00      	nop
 8008db0:	58024400 	.word	0x58024400
 8008db4:	58024800 	.word	0x58024800
 8008db8:	00ffffcf 	.word	0x00ffffcf
      break;
 8008dbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008dbe:	7dfb      	ldrb	r3, [r7, #23]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d109      	bne.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008dc4:	4b9f      	ldr	r3, [pc, #636]	; (8009044 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dc8:	f023 0207 	bic.w	r2, r3, #7
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008dd0:	499c      	ldr	r1, [pc, #624]	; (8009044 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	654b      	str	r3, [r1, #84]	; 0x54
 8008dd6:	e001      	b.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dd8:	7dfb      	ldrb	r3, [r7, #23]
 8008dda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f003 0304 	and.w	r3, r3, #4
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d039      	beq.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008dee:	2b05      	cmp	r3, #5
 8008df0:	d820      	bhi.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8008df2:	a201      	add	r2, pc, #4	; (adr r2, 8008df8 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8008df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008df8:	08008e3b 	.word	0x08008e3b
 8008dfc:	08008e11 	.word	0x08008e11
 8008e00:	08008e23 	.word	0x08008e23
 8008e04:	08008e3b 	.word	0x08008e3b
 8008e08:	08008e3b 	.word	0x08008e3b
 8008e0c:	08008e3b 	.word	0x08008e3b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	3304      	adds	r3, #4
 8008e14:	2101      	movs	r1, #1
 8008e16:	4618      	mov	r0, r3
 8008e18:	f001 faf4 	bl	800a404 <RCCEx_PLL2_Config>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008e20:	e00c      	b.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	3324      	adds	r3, #36	; 0x24
 8008e26:	2101      	movs	r1, #1
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f001 fb9d 	bl	800a568 <RCCEx_PLL3_Config>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008e32:	e003      	b.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e34:	2301      	movs	r3, #1
 8008e36:	75fb      	strb	r3, [r7, #23]
      break;
 8008e38:	e000      	b.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8008e3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e3c:	7dfb      	ldrb	r3, [r7, #23]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d10a      	bne.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008e42:	4b80      	ldr	r3, [pc, #512]	; (8009044 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e46:	f023 0207 	bic.w	r2, r3, #7
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008e50:	497c      	ldr	r1, [pc, #496]	; (8009044 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008e52:	4313      	orrs	r3, r2
 8008e54:	658b      	str	r3, [r1, #88]	; 0x58
 8008e56:	e001      	b.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e58:	7dfb      	ldrb	r3, [r7, #23]
 8008e5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f003 0320 	and.w	r3, r3, #32
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d04b      	beq.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008e6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e72:	d02e      	beq.n	8008ed2 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8008e74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e78:	d828      	bhi.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8008e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e7e:	d02a      	beq.n	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8008e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e84:	d822      	bhi.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8008e86:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008e8a:	d026      	beq.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8008e8c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008e90:	d81c      	bhi.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8008e92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e96:	d010      	beq.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8008e98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e9c:	d816      	bhi.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d01d      	beq.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8008ea2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ea6:	d111      	bne.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	3304      	adds	r3, #4
 8008eac:	2100      	movs	r1, #0
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f001 faa8 	bl	800a404 <RCCEx_PLL2_Config>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008eb8:	e012      	b.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	3324      	adds	r3, #36	; 0x24
 8008ebe:	2102      	movs	r1, #2
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f001 fb51 	bl	800a568 <RCCEx_PLL3_Config>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008eca:	e009      	b.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ecc:	2301      	movs	r3, #1
 8008ece:	75fb      	strb	r3, [r7, #23]
      break;
 8008ed0:	e006      	b.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8008ed2:	bf00      	nop
 8008ed4:	e004      	b.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8008ed6:	bf00      	nop
 8008ed8:	e002      	b.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8008eda:	bf00      	nop
 8008edc:	e000      	b.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8008ede:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ee0:	7dfb      	ldrb	r3, [r7, #23]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d10a      	bne.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008ee6:	4b57      	ldr	r3, [pc, #348]	; (8009044 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008eea:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ef4:	4953      	ldr	r1, [pc, #332]	; (8009044 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	654b      	str	r3, [r1, #84]	; 0x54
 8008efa:	e001      	b.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008efc:	7dfb      	ldrb	r3, [r7, #23]
 8008efe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d04b      	beq.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008f12:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008f16:	d02e      	beq.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8008f18:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008f1c:	d828      	bhi.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8008f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f22:	d02a      	beq.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8008f24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f28:	d822      	bhi.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8008f2a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008f2e:	d026      	beq.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8008f30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008f34:	d81c      	bhi.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8008f36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f3a:	d010      	beq.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8008f3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f40:	d816      	bhi.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d01d      	beq.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8008f46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f4a:	d111      	bne.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	3304      	adds	r3, #4
 8008f50:	2100      	movs	r1, #0
 8008f52:	4618      	mov	r0, r3
 8008f54:	f001 fa56 	bl	800a404 <RCCEx_PLL2_Config>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008f5c:	e012      	b.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	3324      	adds	r3, #36	; 0x24
 8008f62:	2102      	movs	r1, #2
 8008f64:	4618      	mov	r0, r3
 8008f66:	f001 faff 	bl	800a568 <RCCEx_PLL3_Config>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008f6e:	e009      	b.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f70:	2301      	movs	r3, #1
 8008f72:	75fb      	strb	r3, [r7, #23]
      break;
 8008f74:	e006      	b.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8008f76:	bf00      	nop
 8008f78:	e004      	b.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8008f7a:	bf00      	nop
 8008f7c:	e002      	b.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8008f7e:	bf00      	nop
 8008f80:	e000      	b.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8008f82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f84:	7dfb      	ldrb	r3, [r7, #23]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d10a      	bne.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008f8a:	4b2e      	ldr	r3, [pc, #184]	; (8009044 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f8e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008f98:	492a      	ldr	r1, [pc, #168]	; (8009044 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	658b      	str	r3, [r1, #88]	; 0x58
 8008f9e:	e001      	b.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fa0:	7dfb      	ldrb	r3, [r7, #23]
 8008fa2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d04d      	beq.n	800904c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008fb6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008fba:	d02e      	beq.n	800901a <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8008fbc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008fc0:	d828      	bhi.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8008fc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fc6:	d02a      	beq.n	800901e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8008fc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fcc:	d822      	bhi.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8008fce:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008fd2:	d026      	beq.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8008fd4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008fd8:	d81c      	bhi.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8008fda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008fde:	d010      	beq.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8008fe0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008fe4:	d816      	bhi.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d01d      	beq.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8008fea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fee:	d111      	bne.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	3304      	adds	r3, #4
 8008ff4:	2100      	movs	r1, #0
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f001 fa04 	bl	800a404 <RCCEx_PLL2_Config>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009000:	e012      	b.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	3324      	adds	r3, #36	; 0x24
 8009006:	2102      	movs	r1, #2
 8009008:	4618      	mov	r0, r3
 800900a:	f001 faad 	bl	800a568 <RCCEx_PLL3_Config>
 800900e:	4603      	mov	r3, r0
 8009010:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009012:	e009      	b.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009014:	2301      	movs	r3, #1
 8009016:	75fb      	strb	r3, [r7, #23]
      break;
 8009018:	e006      	b.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800901a:	bf00      	nop
 800901c:	e004      	b.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800901e:	bf00      	nop
 8009020:	e002      	b.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009022:	bf00      	nop
 8009024:	e000      	b.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009026:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009028:	7dfb      	ldrb	r3, [r7, #23]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d10c      	bne.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800902e:	4b05      	ldr	r3, [pc, #20]	; (8009044 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009032:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800903c:	4901      	ldr	r1, [pc, #4]	; (8009044 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800903e:	4313      	orrs	r3, r2
 8009040:	658b      	str	r3, [r1, #88]	; 0x58
 8009042:	e003      	b.n	800904c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8009044:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009048:	7dfb      	ldrb	r3, [r7, #23]
 800904a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f003 0308 	and.w	r3, r3, #8
 8009054:	2b00      	cmp	r3, #0
 8009056:	d01a      	beq.n	800908e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800905e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009062:	d10a      	bne.n	800907a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	3324      	adds	r3, #36	; 0x24
 8009068:	2102      	movs	r1, #2
 800906a:	4618      	mov	r0, r3
 800906c:	f001 fa7c 	bl	800a568 <RCCEx_PLL3_Config>
 8009070:	4603      	mov	r3, r0
 8009072:	2b00      	cmp	r3, #0
 8009074:	d001      	beq.n	800907a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8009076:	2301      	movs	r3, #1
 8009078:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800907a:	4b8c      	ldr	r3, [pc, #560]	; (80092ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800907c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800907e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009088:	4988      	ldr	r1, [pc, #544]	; (80092ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800908a:	4313      	orrs	r3, r2
 800908c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f003 0310 	and.w	r3, r3, #16
 8009096:	2b00      	cmp	r3, #0
 8009098:	d01a      	beq.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80090a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090a4:	d10a      	bne.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	3324      	adds	r3, #36	; 0x24
 80090aa:	2102      	movs	r1, #2
 80090ac:	4618      	mov	r0, r3
 80090ae:	f001 fa5b 	bl	800a568 <RCCEx_PLL3_Config>
 80090b2:	4603      	mov	r3, r0
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d001      	beq.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 80090b8:	2301      	movs	r3, #1
 80090ba:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80090bc:	4b7b      	ldr	r3, [pc, #492]	; (80092ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80090be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80090ca:	4978      	ldr	r1, [pc, #480]	; (80092ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80090cc:	4313      	orrs	r3, r2
 80090ce:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d034      	beq.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80090e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80090e6:	d01d      	beq.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 80090e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80090ec:	d817      	bhi.n	800911e <HAL_RCCEx_PeriphCLKConfig+0xbae>
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d003      	beq.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 80090f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090f6:	d009      	beq.n	800910c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80090f8:	e011      	b.n	800911e <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	3304      	adds	r3, #4
 80090fe:	2100      	movs	r1, #0
 8009100:	4618      	mov	r0, r3
 8009102:	f001 f97f 	bl	800a404 <RCCEx_PLL2_Config>
 8009106:	4603      	mov	r3, r0
 8009108:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800910a:	e00c      	b.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	3324      	adds	r3, #36	; 0x24
 8009110:	2102      	movs	r1, #2
 8009112:	4618      	mov	r0, r3
 8009114:	f001 fa28 	bl	800a568 <RCCEx_PLL3_Config>
 8009118:	4603      	mov	r3, r0
 800911a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800911c:	e003      	b.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800911e:	2301      	movs	r3, #1
 8009120:	75fb      	strb	r3, [r7, #23]
      break;
 8009122:	e000      	b.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8009124:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009126:	7dfb      	ldrb	r3, [r7, #23]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d10a      	bne.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800912c:	4b5f      	ldr	r3, [pc, #380]	; (80092ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800912e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009130:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800913a:	495c      	ldr	r1, [pc, #368]	; (80092ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800913c:	4313      	orrs	r3, r2
 800913e:	658b      	str	r3, [r1, #88]	; 0x58
 8009140:	e001      	b.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009142:	7dfb      	ldrb	r3, [r7, #23]
 8009144:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800914e:	2b00      	cmp	r3, #0
 8009150:	d033      	beq.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009158:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800915c:	d01c      	beq.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800915e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009162:	d816      	bhi.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8009164:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009168:	d003      	beq.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 800916a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800916e:	d007      	beq.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8009170:	e00f      	b.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009172:	4b4e      	ldr	r3, [pc, #312]	; (80092ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8009174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009176:	4a4d      	ldr	r2, [pc, #308]	; (80092ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8009178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800917c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800917e:	e00c      	b.n	800919a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	3324      	adds	r3, #36	; 0x24
 8009184:	2101      	movs	r1, #1
 8009186:	4618      	mov	r0, r3
 8009188:	f001 f9ee 	bl	800a568 <RCCEx_PLL3_Config>
 800918c:	4603      	mov	r3, r0
 800918e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009190:	e003      	b.n	800919a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009192:	2301      	movs	r3, #1
 8009194:	75fb      	strb	r3, [r7, #23]
      break;
 8009196:	e000      	b.n	800919a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8009198:	bf00      	nop
    }

    if(ret == HAL_OK)
 800919a:	7dfb      	ldrb	r3, [r7, #23]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d10a      	bne.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80091a0:	4b42      	ldr	r3, [pc, #264]	; (80092ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80091a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091ae:	493f      	ldr	r1, [pc, #252]	; (80092ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80091b0:	4313      	orrs	r3, r2
 80091b2:	654b      	str	r3, [r1, #84]	; 0x54
 80091b4:	e001      	b.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091b6:	7dfb      	ldrb	r3, [r7, #23]
 80091b8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d029      	beq.n	800921a <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d003      	beq.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 80091ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091d2:	d007      	beq.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80091d4:	e00f      	b.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091d6:	4b35      	ldr	r3, [pc, #212]	; (80092ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80091d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091da:	4a34      	ldr	r2, [pc, #208]	; (80092ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80091dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80091e2:	e00b      	b.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	3304      	adds	r3, #4
 80091e8:	2102      	movs	r1, #2
 80091ea:	4618      	mov	r0, r3
 80091ec:	f001 f90a 	bl	800a404 <RCCEx_PLL2_Config>
 80091f0:	4603      	mov	r3, r0
 80091f2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80091f4:	e002      	b.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 80091f6:	2301      	movs	r3, #1
 80091f8:	75fb      	strb	r3, [r7, #23]
      break;
 80091fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091fc:	7dfb      	ldrb	r3, [r7, #23]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d109      	bne.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009202:	4b2a      	ldr	r3, [pc, #168]	; (80092ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8009204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009206:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800920e:	4927      	ldr	r1, [pc, #156]	; (80092ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8009210:	4313      	orrs	r3, r2
 8009212:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009214:	e001      	b.n	800921a <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009216:	7dfb      	ldrb	r3, [r7, #23]
 8009218:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009222:	2b00      	cmp	r3, #0
 8009224:	d00a      	beq.n	800923c <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	3324      	adds	r3, #36	; 0x24
 800922a:	2102      	movs	r1, #2
 800922c:	4618      	mov	r0, r3
 800922e:	f001 f99b 	bl	800a568 <RCCEx_PLL3_Config>
 8009232:	4603      	mov	r3, r0
 8009234:	2b00      	cmp	r3, #0
 8009236:	d001      	beq.n	800923c <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 8009238:	2301      	movs	r3, #1
 800923a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009244:	2b00      	cmp	r3, #0
 8009246:	d035      	beq.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800924e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009252:	d017      	beq.n	8009284 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009254:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009258:	d811      	bhi.n	800927e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800925a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800925e:	d013      	beq.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8009260:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009264:	d80b      	bhi.n	800927e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8009266:	2b00      	cmp	r3, #0
 8009268:	d010      	beq.n	800928c <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 800926a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800926e:	d106      	bne.n	800927e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009270:	4b0e      	ldr	r3, [pc, #56]	; (80092ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8009272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009274:	4a0d      	ldr	r2, [pc, #52]	; (80092ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8009276:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800927a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800927c:	e007      	b.n	800928e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800927e:	2301      	movs	r3, #1
 8009280:	75fb      	strb	r3, [r7, #23]
      break;
 8009282:	e004      	b.n	800928e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8009284:	bf00      	nop
 8009286:	e002      	b.n	800928e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8009288:	bf00      	nop
 800928a:	e000      	b.n	800928e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800928c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800928e:	7dfb      	ldrb	r3, [r7, #23]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d10d      	bne.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009294:	4b05      	ldr	r3, [pc, #20]	; (80092ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8009296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009298:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092a2:	4902      	ldr	r1, [pc, #8]	; (80092ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80092a4:	4313      	orrs	r3, r2
 80092a6:	654b      	str	r3, [r1, #84]	; 0x54
 80092a8:	e004      	b.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80092aa:	bf00      	nop
 80092ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092b0:	7dfb      	ldrb	r3, [r7, #23]
 80092b2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d008      	beq.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80092c0:	4b30      	ldr	r3, [pc, #192]	; (8009384 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80092c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092cc:	492d      	ldr	r1, [pc, #180]	; (8009384 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80092ce:	4313      	orrs	r3, r2
 80092d0:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d008      	beq.n	80092f0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80092de:	4b29      	ldr	r3, [pc, #164]	; (8009384 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80092e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092e2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092ea:	4926      	ldr	r1, [pc, #152]	; (8009384 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80092ec:	4313      	orrs	r3, r2
 80092ee:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d008      	beq.n	800930e <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80092fc:	4b21      	ldr	r3, [pc, #132]	; (8009384 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80092fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009300:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009308:	491e      	ldr	r1, [pc, #120]	; (8009384 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800930a:	4313      	orrs	r3, r2
 800930c:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009316:	2b00      	cmp	r3, #0
 8009318:	d00d      	beq.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800931a:	4b1a      	ldr	r3, [pc, #104]	; (8009384 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800931c:	691b      	ldr	r3, [r3, #16]
 800931e:	4a19      	ldr	r2, [pc, #100]	; (8009384 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8009320:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009324:	6113      	str	r3, [r2, #16]
 8009326:	4b17      	ldr	r3, [pc, #92]	; (8009384 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8009328:	691a      	ldr	r2, [r3, #16]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009330:	4914      	ldr	r1, [pc, #80]	; (8009384 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8009332:	4313      	orrs	r3, r2
 8009334:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	2b00      	cmp	r3, #0
 800933c:	da08      	bge.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800933e:	4b11      	ldr	r3, [pc, #68]	; (8009384 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8009340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009342:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800934a:	490e      	ldr	r1, [pc, #56]	; (8009384 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800934c:	4313      	orrs	r3, r2
 800934e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009358:	2b00      	cmp	r3, #0
 800935a:	d009      	beq.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800935c:	4b09      	ldr	r3, [pc, #36]	; (8009384 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800935e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009360:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800936a:	4906      	ldr	r1, [pc, #24]	; (8009384 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800936c:	4313      	orrs	r3, r2
 800936e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8009370:	7dbb      	ldrb	r3, [r7, #22]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d101      	bne.n	800937a <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8009376:	2300      	movs	r3, #0
 8009378:	e000      	b.n	800937c <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 800937a:	2301      	movs	r3, #1
}
 800937c:	4618      	mov	r0, r3
 800937e:	3718      	adds	r7, #24
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}
 8009384:	58024400 	.word	0x58024400

08009388 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b090      	sub	sp, #64	; 0x40
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009396:	f040 8089 	bne.w	80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800939a:	4b91      	ldr	r3, [pc, #580]	; (80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800939c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800939e:	f003 0307 	and.w	r3, r3, #7
 80093a2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80093a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a6:	2b04      	cmp	r3, #4
 80093a8:	d87d      	bhi.n	80094a6 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 80093aa:	a201      	add	r2, pc, #4	; (adr r2, 80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80093ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093b0:	080093c5 	.word	0x080093c5
 80093b4:	080093e9 	.word	0x080093e9
 80093b8:	0800940d 	.word	0x0800940d
 80093bc:	080094a1 	.word	0x080094a1
 80093c0:	08009431 	.word	0x08009431
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80093c4:	4b86      	ldr	r3, [pc, #536]	; (80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80093d0:	d107      	bne.n	80093e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80093d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80093d6:	4618      	mov	r0, r3
 80093d8:	f000 fec2 	bl	800a160 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80093dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093de:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80093e0:	e3f4      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80093e2:	2300      	movs	r3, #0
 80093e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093e6:	e3f1      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80093e8:	4b7d      	ldr	r3, [pc, #500]	; (80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80093f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80093f4:	d107      	bne.n	8009406 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093f6:	f107 0318 	add.w	r3, r7, #24
 80093fa:	4618      	mov	r0, r3
 80093fc:	f000 fc08 	bl	8009c10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009400:	69bb      	ldr	r3, [r7, #24]
 8009402:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009404:	e3e2      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8009406:	2300      	movs	r3, #0
 8009408:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800940a:	e3df      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800940c:	4b74      	ldr	r3, [pc, #464]	; (80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009414:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009418:	d107      	bne.n	800942a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800941a:	f107 030c 	add.w	r3, r7, #12
 800941e:	4618      	mov	r0, r3
 8009420:	f000 fd4a 	bl	8009eb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009428:	e3d0      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800942a:	2300      	movs	r3, #0
 800942c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800942e:	e3cd      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009430:	4b6b      	ldr	r3, [pc, #428]	; (80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009434:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009438:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800943a:	4b69      	ldr	r3, [pc, #420]	; (80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f003 0304 	and.w	r3, r3, #4
 8009442:	2b04      	cmp	r3, #4
 8009444:	d10c      	bne.n	8009460 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8009446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009448:	2b00      	cmp	r3, #0
 800944a:	d109      	bne.n	8009460 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800944c:	4b64      	ldr	r3, [pc, #400]	; (80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	08db      	lsrs	r3, r3, #3
 8009452:	f003 0303 	and.w	r3, r3, #3
 8009456:	4a63      	ldr	r2, [pc, #396]	; (80095e4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8009458:	fa22 f303 	lsr.w	r3, r2, r3
 800945c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800945e:	e01e      	b.n	800949e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009460:	4b5f      	ldr	r3, [pc, #380]	; (80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009468:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800946c:	d106      	bne.n	800947c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800946e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009470:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009474:	d102      	bne.n	800947c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009476:	4b5c      	ldr	r3, [pc, #368]	; (80095e8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8009478:	63fb      	str	r3, [r7, #60]	; 0x3c
 800947a:	e010      	b.n	800949e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800947c:	4b58      	ldr	r3, [pc, #352]	; (80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009484:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009488:	d106      	bne.n	8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800948a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800948c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009490:	d102      	bne.n	8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009492:	4b56      	ldr	r3, [pc, #344]	; (80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8009494:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009496:	e002      	b.n	800949e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009498:	2300      	movs	r3, #0
 800949a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800949c:	e396      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800949e:	e395      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80094a0:	4b53      	ldr	r3, [pc, #332]	; (80095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80094a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094a4:	e392      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 80094a6:	2300      	movs	r3, #0
 80094a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094aa:	e38f      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094b2:	f040 809f 	bne.w	80095f4 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 80094b6:	4b4a      	ldr	r3, [pc, #296]	; (80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80094b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094ba:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80094be:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80094c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094c6:	d04d      	beq.n	8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 80094c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094ce:	f200 8084 	bhi.w	80095da <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80094d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d4:	2bc0      	cmp	r3, #192	; 0xc0
 80094d6:	d07d      	beq.n	80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 80094d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094da:	2bc0      	cmp	r3, #192	; 0xc0
 80094dc:	d87d      	bhi.n	80095da <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80094de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e0:	2b80      	cmp	r3, #128	; 0x80
 80094e2:	d02d      	beq.n	8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 80094e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e6:	2b80      	cmp	r3, #128	; 0x80
 80094e8:	d877      	bhi.n	80095da <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80094ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d003      	beq.n	80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 80094f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f2:	2b40      	cmp	r3, #64	; 0x40
 80094f4:	d012      	beq.n	800951c <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 80094f6:	e070      	b.n	80095da <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80094f8:	4b39      	ldr	r3, [pc, #228]	; (80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009500:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009504:	d107      	bne.n	8009516 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009506:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800950a:	4618      	mov	r0, r3
 800950c:	f000 fe28 	bl	800a160 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009512:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009514:	e35a      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8009516:	2300      	movs	r3, #0
 8009518:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800951a:	e357      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800951c:	4b30      	ldr	r3, [pc, #192]	; (80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009524:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009528:	d107      	bne.n	800953a <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800952a:	f107 0318 	add.w	r3, r7, #24
 800952e:	4618      	mov	r0, r3
 8009530:	f000 fb6e 	bl	8009c10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009534:	69bb      	ldr	r3, [r7, #24]
 8009536:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009538:	e348      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800953a:	2300      	movs	r3, #0
 800953c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800953e:	e345      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009540:	4b27      	ldr	r3, [pc, #156]	; (80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009548:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800954c:	d107      	bne.n	800955e <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800954e:	f107 030c 	add.w	r3, r7, #12
 8009552:	4618      	mov	r0, r3
 8009554:	f000 fcb0 	bl	8009eb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800955c:	e336      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800955e:	2300      	movs	r3, #0
 8009560:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009562:	e333      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009564:	4b1e      	ldr	r3, [pc, #120]	; (80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009568:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800956c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800956e:	4b1c      	ldr	r3, [pc, #112]	; (80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f003 0304 	and.w	r3, r3, #4
 8009576:	2b04      	cmp	r3, #4
 8009578:	d10c      	bne.n	8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 800957a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800957c:	2b00      	cmp	r3, #0
 800957e:	d109      	bne.n	8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009580:	4b17      	ldr	r3, [pc, #92]	; (80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	08db      	lsrs	r3, r3, #3
 8009586:	f003 0303 	and.w	r3, r3, #3
 800958a:	4a16      	ldr	r2, [pc, #88]	; (80095e4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800958c:	fa22 f303 	lsr.w	r3, r2, r3
 8009590:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009592:	e01e      	b.n	80095d2 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009594:	4b12      	ldr	r3, [pc, #72]	; (80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800959c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095a0:	d106      	bne.n	80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 80095a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80095a8:	d102      	bne.n	80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80095aa:	4b0f      	ldr	r3, [pc, #60]	; (80095e8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80095ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095ae:	e010      	b.n	80095d2 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80095b0:	4b0b      	ldr	r3, [pc, #44]	; (80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095bc:	d106      	bne.n	80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80095be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095c4:	d102      	bne.n	80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80095c6:	4b09      	ldr	r3, [pc, #36]	; (80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80095c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095ca:	e002      	b.n	80095d2 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80095cc:	2300      	movs	r3, #0
 80095ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80095d0:	e2fc      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80095d2:	e2fb      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80095d4:	4b06      	ldr	r3, [pc, #24]	; (80095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80095d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095d8:	e2f8      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 80095da:	2300      	movs	r3, #0
 80095dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095de:	e2f5      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80095e0:	58024400 	.word	0x58024400
 80095e4:	03d09000 	.word	0x03d09000
 80095e8:	003d0900 	.word	0x003d0900
 80095ec:	007a1200 	.word	0x007a1200
 80095f0:	00bb8000 	.word	0x00bb8000

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095fa:	f040 809c 	bne.w	8009736 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 80095fe:	4b9d      	ldr	r3, [pc, #628]	; (8009874 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009602:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8009606:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800960a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800960e:	d054      	beq.n	80096ba <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8009610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009612:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009616:	f200 808b 	bhi.w	8009730 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 800961a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800961c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009620:	f000 8083 	beq.w	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009626:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800962a:	f200 8081 	bhi.w	8009730 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 800962e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009630:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009634:	d02f      	beq.n	8009696 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8009636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009638:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800963c:	d878      	bhi.n	8009730 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 800963e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009640:	2b00      	cmp	r3, #0
 8009642:	d004      	beq.n	800964e <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8009644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009646:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800964a:	d012      	beq.n	8009672 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 800964c:	e070      	b.n	8009730 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800964e:	4b89      	ldr	r3, [pc, #548]	; (8009874 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009656:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800965a:	d107      	bne.n	800966c <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800965c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009660:	4618      	mov	r0, r3
 8009662:	f000 fd7d 	bl	800a160 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009668:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800966a:	e2af      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800966c:	2300      	movs	r3, #0
 800966e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009670:	e2ac      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009672:	4b80      	ldr	r3, [pc, #512]	; (8009874 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800967a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800967e:	d107      	bne.n	8009690 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009680:	f107 0318 	add.w	r3, r7, #24
 8009684:	4618      	mov	r0, r3
 8009686:	f000 fac3 	bl	8009c10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800968a:	69bb      	ldr	r3, [r7, #24]
 800968c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800968e:	e29d      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8009690:	2300      	movs	r3, #0
 8009692:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009694:	e29a      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009696:	4b77      	ldr	r3, [pc, #476]	; (8009874 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800969e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096a2:	d107      	bne.n	80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096a4:	f107 030c 	add.w	r3, r7, #12
 80096a8:	4618      	mov	r0, r3
 80096aa:	f000 fc05 	bl	8009eb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80096b2:	e28b      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80096b4:	2300      	movs	r3, #0
 80096b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096b8:	e288      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80096ba:	4b6e      	ldr	r3, [pc, #440]	; (8009874 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80096bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80096c2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80096c4:	4b6b      	ldr	r3, [pc, #428]	; (8009874 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f003 0304 	and.w	r3, r3, #4
 80096cc:	2b04      	cmp	r3, #4
 80096ce:	d10c      	bne.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x362>
 80096d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d109      	bne.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x362>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80096d6:	4b67      	ldr	r3, [pc, #412]	; (8009874 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	08db      	lsrs	r3, r3, #3
 80096dc:	f003 0303 	and.w	r3, r3, #3
 80096e0:	4a65      	ldr	r2, [pc, #404]	; (8009878 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 80096e2:	fa22 f303 	lsr.w	r3, r2, r3
 80096e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096e8:	e01e      	b.n	8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80096ea:	4b62      	ldr	r3, [pc, #392]	; (8009874 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096f6:	d106      	bne.n	8009706 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 80096f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80096fe:	d102      	bne.n	8009706 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009700:	4b5e      	ldr	r3, [pc, #376]	; (800987c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8009702:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009704:	e010      	b.n	8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009706:	4b5b      	ldr	r3, [pc, #364]	; (8009874 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800970e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009712:	d106      	bne.n	8009722 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8009714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009716:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800971a:	d102      	bne.n	8009722 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800971c:	4b58      	ldr	r3, [pc, #352]	; (8009880 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 800971e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009720:	e002      	b.n	8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009722:	2300      	movs	r3, #0
 8009724:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
 8009726:	e251      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8009728:	e250      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800972a:	4b56      	ldr	r3, [pc, #344]	; (8009884 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800972c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800972e:	e24d      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8009730:	2300      	movs	r3, #0
 8009732:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009734:	e24a      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800973c:	f040 80a7 	bne.w	800988e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8009740:	4b4c      	ldr	r3, [pc, #304]	; (8009874 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009744:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009748:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800974a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800974c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009750:	d055      	beq.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8009752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009754:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009758:	f200 8096 	bhi.w	8009888 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 800975c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800975e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009762:	f000 8084 	beq.w	800986e <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 8009766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009768:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800976c:	f200 808c 	bhi.w	8009888 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8009770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009772:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009776:	d030      	beq.n	80097da <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8009778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800977a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800977e:	f200 8083 	bhi.w	8009888 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8009782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009784:	2b00      	cmp	r3, #0
 8009786:	d004      	beq.n	8009792 <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 8009788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800978a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800978e:	d012      	beq.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 8009790:	e07a      	b.n	8009888 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009792:	4b38      	ldr	r3, [pc, #224]	; (8009874 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800979a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800979e:	d107      	bne.n	80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80097a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80097a4:	4618      	mov	r0, r3
 80097a6:	f000 fcdb 	bl	800a160 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80097aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80097ae:	e20d      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80097b0:	2300      	movs	r3, #0
 80097b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097b4:	e20a      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80097b6:	4b2f      	ldr	r3, [pc, #188]	; (8009874 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80097be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80097c2:	d107      	bne.n	80097d4 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097c4:	f107 0318 	add.w	r3, r7, #24
 80097c8:	4618      	mov	r0, r3
 80097ca:	f000 fa21 	bl	8009c10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80097ce:	69bb      	ldr	r3, [r7, #24]
 80097d0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80097d2:	e1fb      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80097d4:	2300      	movs	r3, #0
 80097d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097d8:	e1f8      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80097da:	4b26      	ldr	r3, [pc, #152]	; (8009874 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80097e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097e6:	d107      	bne.n	80097f8 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097e8:	f107 030c 	add.w	r3, r7, #12
 80097ec:	4618      	mov	r0, r3
 80097ee:	f000 fb63 	bl	8009eb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80097f6:	e1e9      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80097f8:	2300      	movs	r3, #0
 80097fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097fc:	e1e6      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80097fe:	4b1d      	ldr	r3, [pc, #116]	; (8009874 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009802:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009806:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009808:	4b1a      	ldr	r3, [pc, #104]	; (8009874 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f003 0304 	and.w	r3, r3, #4
 8009810:	2b04      	cmp	r3, #4
 8009812:	d10c      	bne.n	800982e <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8009814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009816:	2b00      	cmp	r3, #0
 8009818:	d109      	bne.n	800982e <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800981a:	4b16      	ldr	r3, [pc, #88]	; (8009874 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	08db      	lsrs	r3, r3, #3
 8009820:	f003 0303 	and.w	r3, r3, #3
 8009824:	4a14      	ldr	r2, [pc, #80]	; (8009878 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 8009826:	fa22 f303 	lsr.w	r3, r2, r3
 800982a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800982c:	e01e      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800982e:	4b11      	ldr	r3, [pc, #68]	; (8009874 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800983a:	d106      	bne.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
 800983c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800983e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009842:	d102      	bne.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009844:	4b0d      	ldr	r3, [pc, #52]	; (800987c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8009846:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009848:	e010      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800984a:	4b0a      	ldr	r3, [pc, #40]	; (8009874 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009852:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009856:	d106      	bne.n	8009866 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8009858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800985a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800985e:	d102      	bne.n	8009866 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009860:	4b07      	ldr	r3, [pc, #28]	; (8009880 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 8009862:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009864:	e002      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009866:	2300      	movs	r3, #0
 8009868:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800986a:	e1af      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800986c:	e1ae      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800986e:	4b05      	ldr	r3, [pc, #20]	; (8009884 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8009870:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009872:	e1ab      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8009874:	58024400 	.word	0x58024400
 8009878:	03d09000 	.word	0x03d09000
 800987c:	003d0900 	.word	0x003d0900
 8009880:	007a1200 	.word	0x007a1200
 8009884:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 8009888:	2300      	movs	r3, #0
 800988a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800988c:	e19e      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009894:	d173      	bne.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8009896:	4b9d      	ldr	r3, [pc, #628]	; (8009b0c <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800989a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800989e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80098a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80098a6:	d02f      	beq.n	8009908 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 80098a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80098ae:	d863      	bhi.n	8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80098b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d004      	beq.n	80098c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80098b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098bc:	d012      	beq.n	80098e4 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
 80098be:	e05b      	b.n	8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80098c0:	4b92      	ldr	r3, [pc, #584]	; (8009b0c <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80098c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80098cc:	d107      	bne.n	80098de <HAL_RCCEx_GetPeriphCLKFreq+0x556>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098ce:	f107 0318 	add.w	r3, r7, #24
 80098d2:	4618      	mov	r0, r3
 80098d4:	f000 f99c 	bl	8009c10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80098d8:	69bb      	ldr	r3, [r7, #24]
 80098da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80098dc:	e176      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80098de:	2300      	movs	r3, #0
 80098e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80098e2:	e173      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80098e4:	4b89      	ldr	r3, [pc, #548]	; (8009b0c <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80098ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098f0:	d107      	bne.n	8009902 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098f2:	f107 030c 	add.w	r3, r7, #12
 80098f6:	4618      	mov	r0, r3
 80098f8:	f000 fade 	bl	8009eb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009900:	e164      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8009902:	2300      	movs	r3, #0
 8009904:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009906:	e161      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009908:	4b80      	ldr	r3, [pc, #512]	; (8009b0c <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800990a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800990c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009910:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009912:	4b7e      	ldr	r3, [pc, #504]	; (8009b0c <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f003 0304 	and.w	r3, r3, #4
 800991a:	2b04      	cmp	r3, #4
 800991c:	d10c      	bne.n	8009938 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 800991e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009920:	2b00      	cmp	r3, #0
 8009922:	d109      	bne.n	8009938 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009924:	4b79      	ldr	r3, [pc, #484]	; (8009b0c <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	08db      	lsrs	r3, r3, #3
 800992a:	f003 0303 	and.w	r3, r3, #3
 800992e:	4a78      	ldr	r2, [pc, #480]	; (8009b10 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009930:	fa22 f303 	lsr.w	r3, r2, r3
 8009934:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009936:	e01e      	b.n	8009976 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009938:	4b74      	ldr	r3, [pc, #464]	; (8009b0c <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009944:	d106      	bne.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8009946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009948:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800994c:	d102      	bne.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800994e:	4b71      	ldr	r3, [pc, #452]	; (8009b14 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009950:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009952:	e010      	b.n	8009976 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009954:	4b6d      	ldr	r3, [pc, #436]	; (8009b0c <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800995c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009960:	d106      	bne.n	8009970 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8009962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009964:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009968:	d102      	bne.n	8009970 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800996a:	4b6b      	ldr	r3, [pc, #428]	; (8009b18 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800996c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800996e:	e002      	b.n	8009976 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009970:	2300      	movs	r3, #0
 8009972:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009974:	e12a      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8009976:	e129      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8009978:	2300      	movs	r3, #0
 800997a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800997c:	e126      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009984:	d133      	bne.n	80099ee <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8009986:	4b61      	ldr	r3, [pc, #388]	; (8009b0c <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800998a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800998e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009992:	2b00      	cmp	r3, #0
 8009994:	d004      	beq.n	80099a0 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8009996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800999c:	d012      	beq.n	80099c4 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 800999e:	e023      	b.n	80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80099a0:	4b5a      	ldr	r3, [pc, #360]	; (8009b0c <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80099ac:	d107      	bne.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80099ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80099b2:	4618      	mov	r0, r3
 80099b4:	f000 fbd4 	bl	800a160 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80099b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80099bc:	e106      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 80099be:	2300      	movs	r3, #0
 80099c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099c2:	e103      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80099c4:	4b51      	ldr	r3, [pc, #324]	; (8009b0c <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80099cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80099d0:	d107      	bne.n	80099e2 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099d2:	f107 0318 	add.w	r3, r7, #24
 80099d6:	4618      	mov	r0, r3
 80099d8:	f000 f91a 	bl	8009c10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80099dc:	6a3b      	ldr	r3, [r7, #32]
 80099de:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80099e0:	e0f4      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 80099e2:	2300      	movs	r3, #0
 80099e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099e6:	e0f1      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 80099e8:	2300      	movs	r3, #0
 80099ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099ec:	e0ee      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80099f4:	f040 809b 	bne.w	8009b2e <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80099f8:	4b44      	ldr	r3, [pc, #272]	; (8009b0c <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80099fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099fc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009a00:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a04:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8009a08:	f000 808b 	beq.w	8009b22 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8009a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a0e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8009a12:	f200 8089 	bhi.w	8009b28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8009a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009a1c:	d06c      	beq.n	8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8009a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009a24:	f200 8080 	bhi.w	8009b28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8009a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a2e:	d056      	beq.n	8009ade <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8009a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a36:	d877      	bhi.n	8009b28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8009a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a3a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009a3e:	d03b      	beq.n	8009ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8009a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a42:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009a46:	d86f      	bhi.n	8009b28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8009a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a4e:	d021      	beq.n	8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
 8009a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a56:	d867      	bhi.n	8009b28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8009a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d004      	beq.n	8009a68 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8009a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009a64:	d004      	beq.n	8009a70 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
 8009a66:	e05f      	b.n	8009b28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009a68:	f000 f8bc 	bl	8009be4 <HAL_RCCEx_GetD3PCLK1Freq>
 8009a6c:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8009a6e:	e0ad      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009a70:	4b26      	ldr	r3, [pc, #152]	; (8009b0c <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009a7c:	d107      	bne.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x706>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a7e:	f107 0318 	add.w	r3, r7, #24
 8009a82:	4618      	mov	r0, r3
 8009a84:	f000 f8c4 	bl	8009c10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009a88:	69fb      	ldr	r3, [r7, #28]
 8009a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009a8c:	e09e      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a92:	e09b      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009a94:	4b1d      	ldr	r3, [pc, #116]	; (8009b0c <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009aa0:	d107      	bne.n	8009ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009aa2:	f107 030c 	add.w	r3, r7, #12
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f000 fa06 	bl	8009eb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009ab0:	e08c      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ab6:	e089      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009ab8:	4b14      	ldr	r3, [pc, #80]	; (8009b0c <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f003 0304 	and.w	r3, r3, #4
 8009ac0:	2b04      	cmp	r3, #4
 8009ac2:	d109      	bne.n	8009ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009ac4:	4b11      	ldr	r3, [pc, #68]	; (8009b0c <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	08db      	lsrs	r3, r3, #3
 8009aca:	f003 0303 	and.w	r3, r3, #3
 8009ace:	4a10      	ldr	r2, [pc, #64]	; (8009b10 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8009ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009ad6:	e079      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009adc:	e076      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009ade:	4b0b      	ldr	r3, [pc, #44]	; (8009b0c <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009aea:	d102      	bne.n	8009af2 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
         {
          frequency = CSI_VALUE;
 8009aec:	4b09      	ldr	r3, [pc, #36]	; (8009b14 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009aee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009af0:	e06c      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8009af2:	2300      	movs	r3, #0
 8009af4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009af6:	e069      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009af8:	4b04      	ldr	r3, [pc, #16]	; (8009b0c <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b04:	d10a      	bne.n	8009b1c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          frequency = HSE_VALUE;
 8009b06:	4b04      	ldr	r3, [pc, #16]	; (8009b18 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8009b08:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009b0a:	e05f      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8009b0c:	58024400 	.word	0x58024400
 8009b10:	03d09000 	.word	0x03d09000
 8009b14:	003d0900 	.word	0x003d0900
 8009b18:	007a1200 	.word	0x007a1200
          frequency = 0;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b20:	e054      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009b22:	4b2d      	ldr	r3, [pc, #180]	; (8009bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8009b24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b26:	e051      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b2c:	e04e      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b34:	d148      	bne.n	8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8009b36:	4b29      	ldr	r3, [pc, #164]	; (8009bdc <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8009b38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009b3e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b46:	d02a      	beq.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8009b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b4e:	d838      	bhi.n	8009bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d004      	beq.n	8009b60 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
 8009b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b5c:	d00d      	beq.n	8009b7a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8009b5e:	e030      	b.n	8009bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009b60:	4b1e      	ldr	r3, [pc, #120]	; (8009bdc <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b6c:	d102      	bne.n	8009b74 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
         {
          frequency = HSE_VALUE;
 8009b6e:	4b1c      	ldr	r3, [pc, #112]	; (8009be0 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8009b70:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009b72:	e02b      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8009b74:	2300      	movs	r3, #0
 8009b76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b78:	e028      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009b7a:	4b18      	ldr	r3, [pc, #96]	; (8009bdc <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b86:	d107      	bne.n	8009b98 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f000 fae7 	bl	800a160 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b94:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009b96:	e019      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b9c:	e016      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009b9e:	4b0f      	ldr	r3, [pc, #60]	; (8009bdc <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ba6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009baa:	d107      	bne.n	8009bbc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009bac:	f107 0318 	add.w	r3, r7, #24
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f000 f82d 	bl	8009c10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009bb6:	69fb      	ldr	r3, [r7, #28]
 8009bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009bba:	e007      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009bc0:	e004      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009bc6:	e001      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else
    {
      frequency = 0;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8009bcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3740      	adds	r7, #64	; 0x40
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
 8009bd6:	bf00      	nop
 8009bd8:	00bb8000 	.word	0x00bb8000
 8009bdc:	58024400 	.word	0x58024400
 8009be0:	007a1200 	.word	0x007a1200

08009be4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8009be8:	f7fe fc24 	bl	8008434 <HAL_RCC_GetHCLKFreq>
 8009bec:	4602      	mov	r2, r0
 8009bee:	4b06      	ldr	r3, [pc, #24]	; (8009c08 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009bf0:	6a1b      	ldr	r3, [r3, #32]
 8009bf2:	091b      	lsrs	r3, r3, #4
 8009bf4:	f003 0307 	and.w	r3, r3, #7
 8009bf8:	4904      	ldr	r1, [pc, #16]	; (8009c0c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009bfa:	5ccb      	ldrb	r3, [r1, r3]
 8009bfc:	f003 031f 	and.w	r3, r3, #31
 8009c00:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	bd80      	pop	{r7, pc}
 8009c08:	58024400 	.word	0x58024400
 8009c0c:	08011c80 	.word	0x08011c80

08009c10 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b089      	sub	sp, #36	; 0x24
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009c18:	4ba1      	ldr	r3, [pc, #644]	; (8009ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c1c:	f003 0303 	and.w	r3, r3, #3
 8009c20:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009c22:	4b9f      	ldr	r3, [pc, #636]	; (8009ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c26:	0b1b      	lsrs	r3, r3, #12
 8009c28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c2c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009c2e:	4b9c      	ldr	r3, [pc, #624]	; (8009ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c32:	091b      	lsrs	r3, r3, #4
 8009c34:	f003 0301 	and.w	r3, r3, #1
 8009c38:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009c3a:	4b99      	ldr	r3, [pc, #612]	; (8009ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c3e:	08db      	lsrs	r3, r3, #3
 8009c40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009c44:	693a      	ldr	r2, [r7, #16]
 8009c46:	fb02 f303 	mul.w	r3, r2, r3
 8009c4a:	ee07 3a90 	vmov	s15, r3
 8009c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c52:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	f000 8111 	beq.w	8009e80 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009c5e:	69bb      	ldr	r3, [r7, #24]
 8009c60:	2b02      	cmp	r3, #2
 8009c62:	f000 8083 	beq.w	8009d6c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009c66:	69bb      	ldr	r3, [r7, #24]
 8009c68:	2b02      	cmp	r3, #2
 8009c6a:	f200 80a1 	bhi.w	8009db0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009c6e:	69bb      	ldr	r3, [r7, #24]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d003      	beq.n	8009c7c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009c74:	69bb      	ldr	r3, [r7, #24]
 8009c76:	2b01      	cmp	r3, #1
 8009c78:	d056      	beq.n	8009d28 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009c7a:	e099      	b.n	8009db0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c7c:	4b88      	ldr	r3, [pc, #544]	; (8009ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f003 0320 	and.w	r3, r3, #32
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d02d      	beq.n	8009ce4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009c88:	4b85      	ldr	r3, [pc, #532]	; (8009ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	08db      	lsrs	r3, r3, #3
 8009c8e:	f003 0303 	and.w	r3, r3, #3
 8009c92:	4a84      	ldr	r2, [pc, #528]	; (8009ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009c94:	fa22 f303 	lsr.w	r3, r2, r3
 8009c98:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	ee07 3a90 	vmov	s15, r3
 8009ca0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	ee07 3a90 	vmov	s15, r3
 8009caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cb2:	4b7b      	ldr	r3, [pc, #492]	; (8009ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cba:	ee07 3a90 	vmov	s15, r3
 8009cbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cc6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009cca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cde:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009ce2:	e087      	b.n	8009df4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	ee07 3a90 	vmov	s15, r3
 8009cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009eac <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009cf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cf6:	4b6a      	ldr	r3, [pc, #424]	; (8009ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cfe:	ee07 3a90 	vmov	s15, r3
 8009d02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d06:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d0a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d26:	e065      	b.n	8009df4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	ee07 3a90 	vmov	s15, r3
 8009d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d32:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009d36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d3a:	4b59      	ldr	r3, [pc, #356]	; (8009ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d42:	ee07 3a90 	vmov	s15, r3
 8009d46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d4e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d6a:	e043      	b.n	8009df4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	ee07 3a90 	vmov	s15, r3
 8009d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d76:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009d7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d7e:	4b48      	ldr	r3, [pc, #288]	; (8009ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d86:	ee07 3a90 	vmov	s15, r3
 8009d8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d92:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009da2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009daa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009dae:	e021      	b.n	8009df4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	ee07 3a90 	vmov	s15, r3
 8009db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009dbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dc2:	4b37      	ldr	r3, [pc, #220]	; (8009ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dca:	ee07 3a90 	vmov	s15, r3
 8009dce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dd6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009dda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009de2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009de6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009df2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009df4:	4b2a      	ldr	r3, [pc, #168]	; (8009ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009df8:	0a5b      	lsrs	r3, r3, #9
 8009dfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dfe:	ee07 3a90 	vmov	s15, r3
 8009e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e1a:	ee17 2a90 	vmov	r2, s15
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009e22:	4b1f      	ldr	r3, [pc, #124]	; (8009ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e26:	0c1b      	lsrs	r3, r3, #16
 8009e28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e2c:	ee07 3a90 	vmov	s15, r3
 8009e30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e48:	ee17 2a90 	vmov	r2, s15
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009e50:	4b13      	ldr	r3, [pc, #76]	; (8009ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e54:	0e1b      	lsrs	r3, r3, #24
 8009e56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e5a:	ee07 3a90 	vmov	s15, r3
 8009e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e76:	ee17 2a90 	vmov	r2, s15
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009e7e:	e008      	b.n	8009e92 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2200      	movs	r2, #0
 8009e84:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	609a      	str	r2, [r3, #8]
}
 8009e92:	bf00      	nop
 8009e94:	3724      	adds	r7, #36	; 0x24
 8009e96:	46bd      	mov	sp, r7
 8009e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9c:	4770      	bx	lr
 8009e9e:	bf00      	nop
 8009ea0:	58024400 	.word	0x58024400
 8009ea4:	03d09000 	.word	0x03d09000
 8009ea8:	46000000 	.word	0x46000000
 8009eac:	4c742400 	.word	0x4c742400
 8009eb0:	4a742400 	.word	0x4a742400
 8009eb4:	4af42400 	.word	0x4af42400

08009eb8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b089      	sub	sp, #36	; 0x24
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009ec0:	4ba1      	ldr	r3, [pc, #644]	; (800a148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ec4:	f003 0303 	and.w	r3, r3, #3
 8009ec8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009eca:	4b9f      	ldr	r3, [pc, #636]	; (800a148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ece:	0d1b      	lsrs	r3, r3, #20
 8009ed0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ed4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009ed6:	4b9c      	ldr	r3, [pc, #624]	; (800a148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eda:	0a1b      	lsrs	r3, r3, #8
 8009edc:	f003 0301 	and.w	r3, r3, #1
 8009ee0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009ee2:	4b99      	ldr	r3, [pc, #612]	; (800a148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ee6:	08db      	lsrs	r3, r3, #3
 8009ee8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009eec:	693a      	ldr	r2, [r7, #16]
 8009eee:	fb02 f303 	mul.w	r3, r2, r3
 8009ef2:	ee07 3a90 	vmov	s15, r3
 8009ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009efa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	f000 8111 	beq.w	800a128 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009f06:	69bb      	ldr	r3, [r7, #24]
 8009f08:	2b02      	cmp	r3, #2
 8009f0a:	f000 8083 	beq.w	800a014 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009f0e:	69bb      	ldr	r3, [r7, #24]
 8009f10:	2b02      	cmp	r3, #2
 8009f12:	f200 80a1 	bhi.w	800a058 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009f16:	69bb      	ldr	r3, [r7, #24]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d003      	beq.n	8009f24 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009f1c:	69bb      	ldr	r3, [r7, #24]
 8009f1e:	2b01      	cmp	r3, #1
 8009f20:	d056      	beq.n	8009fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009f22:	e099      	b.n	800a058 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f24:	4b88      	ldr	r3, [pc, #544]	; (800a148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f003 0320 	and.w	r3, r3, #32
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d02d      	beq.n	8009f8c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009f30:	4b85      	ldr	r3, [pc, #532]	; (800a148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	08db      	lsrs	r3, r3, #3
 8009f36:	f003 0303 	and.w	r3, r3, #3
 8009f3a:	4a84      	ldr	r2, [pc, #528]	; (800a14c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8009f40:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	ee07 3a90 	vmov	s15, r3
 8009f48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	ee07 3a90 	vmov	s15, r3
 8009f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f5a:	4b7b      	ldr	r3, [pc, #492]	; (800a148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f62:	ee07 3a90 	vmov	s15, r3
 8009f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f6e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a150 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f86:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009f8a:	e087      	b.n	800a09c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	ee07 3a90 	vmov	s15, r3
 8009f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f96:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a154 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f9e:	4b6a      	ldr	r3, [pc, #424]	; (800a148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fa6:	ee07 3a90 	vmov	s15, r3
 8009faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fae:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fb2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a150 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009fce:	e065      	b.n	800a09c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	ee07 3a90 	vmov	s15, r3
 8009fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fda:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a158 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fe2:	4b59      	ldr	r3, [pc, #356]	; (800a148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fea:	ee07 3a90 	vmov	s15, r3
 8009fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ff2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ff6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a150 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009ffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a002:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a00a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a00e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a012:	e043      	b.n	800a09c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	ee07 3a90 	vmov	s15, r3
 800a01a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a01e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a15c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a026:	4b48      	ldr	r3, [pc, #288]	; (800a148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a02a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a02e:	ee07 3a90 	vmov	s15, r3
 800a032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a036:	ed97 6a03 	vldr	s12, [r7, #12]
 800a03a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a150 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a03e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a046:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a04a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a04e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a052:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a056:	e021      	b.n	800a09c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	ee07 3a90 	vmov	s15, r3
 800a05e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a062:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a158 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a06a:	4b37      	ldr	r3, [pc, #220]	; (800a148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a06c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a06e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a072:	ee07 3a90 	vmov	s15, r3
 800a076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a07a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a07e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a150 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a08a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a08e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a092:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a096:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a09a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a09c:	4b2a      	ldr	r3, [pc, #168]	; (800a148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a09e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0a0:	0a5b      	lsrs	r3, r3, #9
 800a0a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0a6:	ee07 3a90 	vmov	s15, r3
 800a0aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a0b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a0b6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0c2:	ee17 2a90 	vmov	r2, s15
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a0ca:	4b1f      	ldr	r3, [pc, #124]	; (800a148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ce:	0c1b      	lsrs	r3, r3, #16
 800a0d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0d4:	ee07 3a90 	vmov	s15, r3
 800a0d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a0e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a0e4:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0f0:	ee17 2a90 	vmov	r2, s15
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a0f8:	4b13      	ldr	r3, [pc, #76]	; (800a148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0fc:	0e1b      	lsrs	r3, r3, #24
 800a0fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a102:	ee07 3a90 	vmov	s15, r3
 800a106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a10a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a10e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a112:	edd7 6a07 	vldr	s13, [r7, #28]
 800a116:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a11a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a11e:	ee17 2a90 	vmov	r2, s15
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a126:	e008      	b.n	800a13a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2200      	movs	r2, #0
 800a12c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2200      	movs	r2, #0
 800a132:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2200      	movs	r2, #0
 800a138:	609a      	str	r2, [r3, #8]
}
 800a13a:	bf00      	nop
 800a13c:	3724      	adds	r7, #36	; 0x24
 800a13e:	46bd      	mov	sp, r7
 800a140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a144:	4770      	bx	lr
 800a146:	bf00      	nop
 800a148:	58024400 	.word	0x58024400
 800a14c:	03d09000 	.word	0x03d09000
 800a150:	46000000 	.word	0x46000000
 800a154:	4c742400 	.word	0x4c742400
 800a158:	4a742400 	.word	0x4a742400
 800a15c:	4af42400 	.word	0x4af42400

0800a160 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800a160:	b480      	push	{r7}
 800a162:	b089      	sub	sp, #36	; 0x24
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a168:	4ba0      	ldr	r3, [pc, #640]	; (800a3ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a16a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a16c:	f003 0303 	and.w	r3, r3, #3
 800a170:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800a172:	4b9e      	ldr	r3, [pc, #632]	; (800a3ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a176:	091b      	lsrs	r3, r3, #4
 800a178:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a17c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a17e:	4b9b      	ldr	r3, [pc, #620]	; (800a3ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a182:	f003 0301 	and.w	r3, r3, #1
 800a186:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a188:	4b98      	ldr	r3, [pc, #608]	; (800a3ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a18a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a18c:	08db      	lsrs	r3, r3, #3
 800a18e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a192:	693a      	ldr	r2, [r7, #16]
 800a194:	fb02 f303 	mul.w	r3, r2, r3
 800a198:	ee07 3a90 	vmov	s15, r3
 800a19c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1a0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	f000 8111 	beq.w	800a3ce <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a1ac:	69bb      	ldr	r3, [r7, #24]
 800a1ae:	2b02      	cmp	r3, #2
 800a1b0:	f000 8083 	beq.w	800a2ba <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a1b4:	69bb      	ldr	r3, [r7, #24]
 800a1b6:	2b02      	cmp	r3, #2
 800a1b8:	f200 80a1 	bhi.w	800a2fe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a1bc:	69bb      	ldr	r3, [r7, #24]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d003      	beq.n	800a1ca <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a1c2:	69bb      	ldr	r3, [r7, #24]
 800a1c4:	2b01      	cmp	r3, #1
 800a1c6:	d056      	beq.n	800a276 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a1c8:	e099      	b.n	800a2fe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a1ca:	4b88      	ldr	r3, [pc, #544]	; (800a3ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f003 0320 	and.w	r3, r3, #32
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d02d      	beq.n	800a232 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a1d6:	4b85      	ldr	r3, [pc, #532]	; (800a3ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	08db      	lsrs	r3, r3, #3
 800a1dc:	f003 0303 	and.w	r3, r3, #3
 800a1e0:	4a83      	ldr	r2, [pc, #524]	; (800a3f0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a1e2:	fa22 f303 	lsr.w	r3, r2, r3
 800a1e6:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	ee07 3a90 	vmov	s15, r3
 800a1ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	ee07 3a90 	vmov	s15, r3
 800a1f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a200:	4b7a      	ldr	r3, [pc, #488]	; (800a3ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a208:	ee07 3a90 	vmov	s15, r3
 800a20c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a210:	ed97 6a03 	vldr	s12, [r7, #12]
 800a214:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a3f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a218:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a21c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a220:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a224:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a228:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a22c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a230:	e087      	b.n	800a342 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	ee07 3a90 	vmov	s15, r3
 800a238:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a23c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a3f8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a240:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a244:	4b69      	ldr	r3, [pc, #420]	; (800a3ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a24c:	ee07 3a90 	vmov	s15, r3
 800a250:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a254:	ed97 6a03 	vldr	s12, [r7, #12]
 800a258:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a3f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a25c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a260:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a264:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a268:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a26c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a270:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a274:	e065      	b.n	800a342 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	ee07 3a90 	vmov	s15, r3
 800a27c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a280:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a3fc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a284:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a288:	4b58      	ldr	r3, [pc, #352]	; (800a3ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a28a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a28c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a290:	ee07 3a90 	vmov	s15, r3
 800a294:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a298:	ed97 6a03 	vldr	s12, [r7, #12]
 800a29c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a3f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a2a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2b4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a2b8:	e043      	b.n	800a342 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	ee07 3a90 	vmov	s15, r3
 800a2c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2c4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a400 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a2c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2cc:	4b47      	ldr	r3, [pc, #284]	; (800a3ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2d4:	ee07 3a90 	vmov	s15, r3
 800a2d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2dc:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2e0:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a3f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a2e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2f8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a2fc:	e021      	b.n	800a342 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	ee07 3a90 	vmov	s15, r3
 800a304:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a308:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a3f8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a30c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a310:	4b36      	ldr	r3, [pc, #216]	; (800a3ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a318:	ee07 3a90 	vmov	s15, r3
 800a31c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a320:	ed97 6a03 	vldr	s12, [r7, #12]
 800a324:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a3f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a328:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a32c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a330:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a334:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a338:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a33c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a340:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800a342:	4b2a      	ldr	r3, [pc, #168]	; (800a3ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a346:	0a5b      	lsrs	r3, r3, #9
 800a348:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a34c:	ee07 3a90 	vmov	s15, r3
 800a350:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a354:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a358:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a35c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a360:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a364:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a368:	ee17 2a90 	vmov	r2, s15
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800a370:	4b1e      	ldr	r3, [pc, #120]	; (800a3ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a374:	0c1b      	lsrs	r3, r3, #16
 800a376:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a37a:	ee07 3a90 	vmov	s15, r3
 800a37e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a382:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a386:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a38a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a38e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a392:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a396:	ee17 2a90 	vmov	r2, s15
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800a39e:	4b13      	ldr	r3, [pc, #76]	; (800a3ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a3a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3a2:	0e1b      	lsrs	r3, r3, #24
 800a3a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3a8:	ee07 3a90 	vmov	s15, r3
 800a3ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a3b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a3b8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3c4:	ee17 2a90 	vmov	r2, s15
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a3cc:	e008      	b.n	800a3e0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	609a      	str	r2, [r3, #8]
}
 800a3e0:	bf00      	nop
 800a3e2:	3724      	adds	r7, #36	; 0x24
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ea:	4770      	bx	lr
 800a3ec:	58024400 	.word	0x58024400
 800a3f0:	03d09000 	.word	0x03d09000
 800a3f4:	46000000 	.word	0x46000000
 800a3f8:	4c742400 	.word	0x4c742400
 800a3fc:	4a742400 	.word	0x4a742400
 800a400:	4af42400 	.word	0x4af42400

0800a404 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b084      	sub	sp, #16
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
 800a40c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a40e:	2300      	movs	r3, #0
 800a410:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a412:	4b53      	ldr	r3, [pc, #332]	; (800a560 <RCCEx_PLL2_Config+0x15c>)
 800a414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a416:	f003 0303 	and.w	r3, r3, #3
 800a41a:	2b03      	cmp	r3, #3
 800a41c:	d101      	bne.n	800a422 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a41e:	2301      	movs	r3, #1
 800a420:	e099      	b.n	800a556 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a422:	4b4f      	ldr	r3, [pc, #316]	; (800a560 <RCCEx_PLL2_Config+0x15c>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	4a4e      	ldr	r2, [pc, #312]	; (800a560 <RCCEx_PLL2_Config+0x15c>)
 800a428:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a42c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a42e:	f7f8 f87f 	bl	8002530 <HAL_GetTick>
 800a432:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a434:	e008      	b.n	800a448 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a436:	f7f8 f87b 	bl	8002530 <HAL_GetTick>
 800a43a:	4602      	mov	r2, r0
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	1ad3      	subs	r3, r2, r3
 800a440:	2b02      	cmp	r3, #2
 800a442:	d901      	bls.n	800a448 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a444:	2303      	movs	r3, #3
 800a446:	e086      	b.n	800a556 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a448:	4b45      	ldr	r3, [pc, #276]	; (800a560 <RCCEx_PLL2_Config+0x15c>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a450:	2b00      	cmp	r3, #0
 800a452:	d1f0      	bne.n	800a436 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a454:	4b42      	ldr	r3, [pc, #264]	; (800a560 <RCCEx_PLL2_Config+0x15c>)
 800a456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a458:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	031b      	lsls	r3, r3, #12
 800a462:	493f      	ldr	r1, [pc, #252]	; (800a560 <RCCEx_PLL2_Config+0x15c>)
 800a464:	4313      	orrs	r3, r2
 800a466:	628b      	str	r3, [r1, #40]	; 0x28
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	685b      	ldr	r3, [r3, #4]
 800a46c:	3b01      	subs	r3, #1
 800a46e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	689b      	ldr	r3, [r3, #8]
 800a476:	3b01      	subs	r3, #1
 800a478:	025b      	lsls	r3, r3, #9
 800a47a:	b29b      	uxth	r3, r3
 800a47c:	431a      	orrs	r2, r3
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	68db      	ldr	r3, [r3, #12]
 800a482:	3b01      	subs	r3, #1
 800a484:	041b      	lsls	r3, r3, #16
 800a486:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a48a:	431a      	orrs	r2, r3
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	691b      	ldr	r3, [r3, #16]
 800a490:	3b01      	subs	r3, #1
 800a492:	061b      	lsls	r3, r3, #24
 800a494:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a498:	4931      	ldr	r1, [pc, #196]	; (800a560 <RCCEx_PLL2_Config+0x15c>)
 800a49a:	4313      	orrs	r3, r2
 800a49c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a49e:	4b30      	ldr	r3, [pc, #192]	; (800a560 <RCCEx_PLL2_Config+0x15c>)
 800a4a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	695b      	ldr	r3, [r3, #20]
 800a4aa:	492d      	ldr	r1, [pc, #180]	; (800a560 <RCCEx_PLL2_Config+0x15c>)
 800a4ac:	4313      	orrs	r3, r2
 800a4ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a4b0:	4b2b      	ldr	r3, [pc, #172]	; (800a560 <RCCEx_PLL2_Config+0x15c>)
 800a4b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4b4:	f023 0220 	bic.w	r2, r3, #32
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	699b      	ldr	r3, [r3, #24]
 800a4bc:	4928      	ldr	r1, [pc, #160]	; (800a560 <RCCEx_PLL2_Config+0x15c>)
 800a4be:	4313      	orrs	r3, r2
 800a4c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a4c2:	4b27      	ldr	r3, [pc, #156]	; (800a560 <RCCEx_PLL2_Config+0x15c>)
 800a4c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4c6:	4a26      	ldr	r2, [pc, #152]	; (800a560 <RCCEx_PLL2_Config+0x15c>)
 800a4c8:	f023 0310 	bic.w	r3, r3, #16
 800a4cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a4ce:	4b24      	ldr	r3, [pc, #144]	; (800a560 <RCCEx_PLL2_Config+0x15c>)
 800a4d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a4d2:	4b24      	ldr	r3, [pc, #144]	; (800a564 <RCCEx_PLL2_Config+0x160>)
 800a4d4:	4013      	ands	r3, r2
 800a4d6:	687a      	ldr	r2, [r7, #4]
 800a4d8:	69d2      	ldr	r2, [r2, #28]
 800a4da:	00d2      	lsls	r2, r2, #3
 800a4dc:	4920      	ldr	r1, [pc, #128]	; (800a560 <RCCEx_PLL2_Config+0x15c>)
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a4e2:	4b1f      	ldr	r3, [pc, #124]	; (800a560 <RCCEx_PLL2_Config+0x15c>)
 800a4e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e6:	4a1e      	ldr	r2, [pc, #120]	; (800a560 <RCCEx_PLL2_Config+0x15c>)
 800a4e8:	f043 0310 	orr.w	r3, r3, #16
 800a4ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d106      	bne.n	800a502 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a4f4:	4b1a      	ldr	r3, [pc, #104]	; (800a560 <RCCEx_PLL2_Config+0x15c>)
 800a4f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4f8:	4a19      	ldr	r2, [pc, #100]	; (800a560 <RCCEx_PLL2_Config+0x15c>)
 800a4fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a4fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a500:	e00f      	b.n	800a522 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	2b01      	cmp	r3, #1
 800a506:	d106      	bne.n	800a516 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a508:	4b15      	ldr	r3, [pc, #84]	; (800a560 <RCCEx_PLL2_Config+0x15c>)
 800a50a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a50c:	4a14      	ldr	r2, [pc, #80]	; (800a560 <RCCEx_PLL2_Config+0x15c>)
 800a50e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a512:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a514:	e005      	b.n	800a522 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a516:	4b12      	ldr	r3, [pc, #72]	; (800a560 <RCCEx_PLL2_Config+0x15c>)
 800a518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a51a:	4a11      	ldr	r2, [pc, #68]	; (800a560 <RCCEx_PLL2_Config+0x15c>)
 800a51c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a520:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a522:	4b0f      	ldr	r3, [pc, #60]	; (800a560 <RCCEx_PLL2_Config+0x15c>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	4a0e      	ldr	r2, [pc, #56]	; (800a560 <RCCEx_PLL2_Config+0x15c>)
 800a528:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a52c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a52e:	f7f7 ffff 	bl	8002530 <HAL_GetTick>
 800a532:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a534:	e008      	b.n	800a548 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a536:	f7f7 fffb 	bl	8002530 <HAL_GetTick>
 800a53a:	4602      	mov	r2, r0
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	1ad3      	subs	r3, r2, r3
 800a540:	2b02      	cmp	r3, #2
 800a542:	d901      	bls.n	800a548 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a544:	2303      	movs	r3, #3
 800a546:	e006      	b.n	800a556 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a548:	4b05      	ldr	r3, [pc, #20]	; (800a560 <RCCEx_PLL2_Config+0x15c>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a550:	2b00      	cmp	r3, #0
 800a552:	d0f0      	beq.n	800a536 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a554:	7bfb      	ldrb	r3, [r7, #15]
}
 800a556:	4618      	mov	r0, r3
 800a558:	3710      	adds	r7, #16
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}
 800a55e:	bf00      	nop
 800a560:	58024400 	.word	0x58024400
 800a564:	ffff0007 	.word	0xffff0007

0800a568 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b084      	sub	sp, #16
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a572:	2300      	movs	r3, #0
 800a574:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a576:	4b53      	ldr	r3, [pc, #332]	; (800a6c4 <RCCEx_PLL3_Config+0x15c>)
 800a578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a57a:	f003 0303 	and.w	r3, r3, #3
 800a57e:	2b03      	cmp	r3, #3
 800a580:	d101      	bne.n	800a586 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a582:	2301      	movs	r3, #1
 800a584:	e099      	b.n	800a6ba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a586:	4b4f      	ldr	r3, [pc, #316]	; (800a6c4 <RCCEx_PLL3_Config+0x15c>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	4a4e      	ldr	r2, [pc, #312]	; (800a6c4 <RCCEx_PLL3_Config+0x15c>)
 800a58c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a590:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a592:	f7f7 ffcd 	bl	8002530 <HAL_GetTick>
 800a596:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a598:	e008      	b.n	800a5ac <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a59a:	f7f7 ffc9 	bl	8002530 <HAL_GetTick>
 800a59e:	4602      	mov	r2, r0
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	1ad3      	subs	r3, r2, r3
 800a5a4:	2b02      	cmp	r3, #2
 800a5a6:	d901      	bls.n	800a5ac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a5a8:	2303      	movs	r3, #3
 800a5aa:	e086      	b.n	800a6ba <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a5ac:	4b45      	ldr	r3, [pc, #276]	; (800a6c4 <RCCEx_PLL3_Config+0x15c>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d1f0      	bne.n	800a59a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a5b8:	4b42      	ldr	r3, [pc, #264]	; (800a6c4 <RCCEx_PLL3_Config+0x15c>)
 800a5ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5bc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	051b      	lsls	r3, r3, #20
 800a5c6:	493f      	ldr	r1, [pc, #252]	; (800a6c4 <RCCEx_PLL3_Config+0x15c>)
 800a5c8:	4313      	orrs	r3, r2
 800a5ca:	628b      	str	r3, [r1, #40]	; 0x28
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	3b01      	subs	r3, #1
 800a5d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	689b      	ldr	r3, [r3, #8]
 800a5da:	3b01      	subs	r3, #1
 800a5dc:	025b      	lsls	r3, r3, #9
 800a5de:	b29b      	uxth	r3, r3
 800a5e0:	431a      	orrs	r2, r3
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	68db      	ldr	r3, [r3, #12]
 800a5e6:	3b01      	subs	r3, #1
 800a5e8:	041b      	lsls	r3, r3, #16
 800a5ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a5ee:	431a      	orrs	r2, r3
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	691b      	ldr	r3, [r3, #16]
 800a5f4:	3b01      	subs	r3, #1
 800a5f6:	061b      	lsls	r3, r3, #24
 800a5f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a5fc:	4931      	ldr	r1, [pc, #196]	; (800a6c4 <RCCEx_PLL3_Config+0x15c>)
 800a5fe:	4313      	orrs	r3, r2
 800a600:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a602:	4b30      	ldr	r3, [pc, #192]	; (800a6c4 <RCCEx_PLL3_Config+0x15c>)
 800a604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a606:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	695b      	ldr	r3, [r3, #20]
 800a60e:	492d      	ldr	r1, [pc, #180]	; (800a6c4 <RCCEx_PLL3_Config+0x15c>)
 800a610:	4313      	orrs	r3, r2
 800a612:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a614:	4b2b      	ldr	r3, [pc, #172]	; (800a6c4 <RCCEx_PLL3_Config+0x15c>)
 800a616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a618:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	699b      	ldr	r3, [r3, #24]
 800a620:	4928      	ldr	r1, [pc, #160]	; (800a6c4 <RCCEx_PLL3_Config+0x15c>)
 800a622:	4313      	orrs	r3, r2
 800a624:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a626:	4b27      	ldr	r3, [pc, #156]	; (800a6c4 <RCCEx_PLL3_Config+0x15c>)
 800a628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a62a:	4a26      	ldr	r2, [pc, #152]	; (800a6c4 <RCCEx_PLL3_Config+0x15c>)
 800a62c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a630:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a632:	4b24      	ldr	r3, [pc, #144]	; (800a6c4 <RCCEx_PLL3_Config+0x15c>)
 800a634:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a636:	4b24      	ldr	r3, [pc, #144]	; (800a6c8 <RCCEx_PLL3_Config+0x160>)
 800a638:	4013      	ands	r3, r2
 800a63a:	687a      	ldr	r2, [r7, #4]
 800a63c:	69d2      	ldr	r2, [r2, #28]
 800a63e:	00d2      	lsls	r2, r2, #3
 800a640:	4920      	ldr	r1, [pc, #128]	; (800a6c4 <RCCEx_PLL3_Config+0x15c>)
 800a642:	4313      	orrs	r3, r2
 800a644:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a646:	4b1f      	ldr	r3, [pc, #124]	; (800a6c4 <RCCEx_PLL3_Config+0x15c>)
 800a648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a64a:	4a1e      	ldr	r2, [pc, #120]	; (800a6c4 <RCCEx_PLL3_Config+0x15c>)
 800a64c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a650:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d106      	bne.n	800a666 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a658:	4b1a      	ldr	r3, [pc, #104]	; (800a6c4 <RCCEx_PLL3_Config+0x15c>)
 800a65a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a65c:	4a19      	ldr	r2, [pc, #100]	; (800a6c4 <RCCEx_PLL3_Config+0x15c>)
 800a65e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a662:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a664:	e00f      	b.n	800a686 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	2b01      	cmp	r3, #1
 800a66a:	d106      	bne.n	800a67a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a66c:	4b15      	ldr	r3, [pc, #84]	; (800a6c4 <RCCEx_PLL3_Config+0x15c>)
 800a66e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a670:	4a14      	ldr	r2, [pc, #80]	; (800a6c4 <RCCEx_PLL3_Config+0x15c>)
 800a672:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a676:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a678:	e005      	b.n	800a686 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a67a:	4b12      	ldr	r3, [pc, #72]	; (800a6c4 <RCCEx_PLL3_Config+0x15c>)
 800a67c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a67e:	4a11      	ldr	r2, [pc, #68]	; (800a6c4 <RCCEx_PLL3_Config+0x15c>)
 800a680:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a684:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a686:	4b0f      	ldr	r3, [pc, #60]	; (800a6c4 <RCCEx_PLL3_Config+0x15c>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	4a0e      	ldr	r2, [pc, #56]	; (800a6c4 <RCCEx_PLL3_Config+0x15c>)
 800a68c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a690:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a692:	f7f7 ff4d 	bl	8002530 <HAL_GetTick>
 800a696:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a698:	e008      	b.n	800a6ac <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a69a:	f7f7 ff49 	bl	8002530 <HAL_GetTick>
 800a69e:	4602      	mov	r2, r0
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	1ad3      	subs	r3, r2, r3
 800a6a4:	2b02      	cmp	r3, #2
 800a6a6:	d901      	bls.n	800a6ac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a6a8:	2303      	movs	r3, #3
 800a6aa:	e006      	b.n	800a6ba <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a6ac:	4b05      	ldr	r3, [pc, #20]	; (800a6c4 <RCCEx_PLL3_Config+0x15c>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d0f0      	beq.n	800a69a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a6b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3710      	adds	r7, #16
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}
 800a6c2:	bf00      	nop
 800a6c4:	58024400 	.word	0x58024400
 800a6c8:	ffff0007 	.word	0xffff0007

0800a6cc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b084      	sub	sp, #16
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d101      	bne.n	800a6de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a6da:	2301      	movs	r3, #1
 800a6dc:	e0f1      	b.n	800a8c2 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4a78      	ldr	r2, [pc, #480]	; (800a8cc <HAL_SPI_Init+0x200>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d00f      	beq.n	800a70e <HAL_SPI_Init+0x42>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	4a77      	ldr	r2, [pc, #476]	; (800a8d0 <HAL_SPI_Init+0x204>)
 800a6f4:	4293      	cmp	r3, r2
 800a6f6:	d00a      	beq.n	800a70e <HAL_SPI_Init+0x42>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	4a75      	ldr	r2, [pc, #468]	; (800a8d4 <HAL_SPI_Init+0x208>)
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d005      	beq.n	800a70e <HAL_SPI_Init+0x42>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	68db      	ldr	r3, [r3, #12]
 800a706:	2b0f      	cmp	r3, #15
 800a708:	d901      	bls.n	800a70e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a70a:	2301      	movs	r3, #1
 800a70c:	e0d9      	b.n	800a8c2 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f000 ff82 	bl	800b618 <SPI_GetPacketSize>
 800a714:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	4a6c      	ldr	r2, [pc, #432]	; (800a8cc <HAL_SPI_Init+0x200>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d00c      	beq.n	800a73a <HAL_SPI_Init+0x6e>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	4a6a      	ldr	r2, [pc, #424]	; (800a8d0 <HAL_SPI_Init+0x204>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d007      	beq.n	800a73a <HAL_SPI_Init+0x6e>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	4a69      	ldr	r2, [pc, #420]	; (800a8d4 <HAL_SPI_Init+0x208>)
 800a730:	4293      	cmp	r3, r2
 800a732:	d002      	beq.n	800a73a <HAL_SPI_Init+0x6e>
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	2b08      	cmp	r3, #8
 800a738:	d811      	bhi.n	800a75e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a73e:	4a63      	ldr	r2, [pc, #396]	; (800a8cc <HAL_SPI_Init+0x200>)
 800a740:	4293      	cmp	r3, r2
 800a742:	d009      	beq.n	800a758 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	4a61      	ldr	r2, [pc, #388]	; (800a8d0 <HAL_SPI_Init+0x204>)
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d004      	beq.n	800a758 <HAL_SPI_Init+0x8c>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	4a60      	ldr	r2, [pc, #384]	; (800a8d4 <HAL_SPI_Init+0x208>)
 800a754:	4293      	cmp	r3, r2
 800a756:	d104      	bne.n	800a762 <HAL_SPI_Init+0x96>
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2b10      	cmp	r3, #16
 800a75c:	d901      	bls.n	800a762 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a75e:	2301      	movs	r3, #1
 800a760:	e0af      	b.n	800a8c2 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a768:	b2db      	uxtb	r3, r3
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d106      	bne.n	800a77c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2200      	movs	r2, #0
 800a772:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f7f7 fb1c 	bl	8001db4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2202      	movs	r2, #2
 800a780:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	681a      	ldr	r2, [r3, #0]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f022 0201 	bic.w	r2, r2, #1
 800a792:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	689b      	ldr	r3, [r3, #8]
 800a79a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800a79e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	699b      	ldr	r3, [r3, #24]
 800a7a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a7a8:	d119      	bne.n	800a7de <HAL_SPI_Init+0x112>
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	685b      	ldr	r3, [r3, #4]
 800a7ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a7b2:	d103      	bne.n	800a7bc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d008      	beq.n	800a7ce <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d10c      	bne.n	800a7de <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a7c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a7cc:	d107      	bne.n	800a7de <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	681a      	ldr	r2, [r3, #0]
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a7dc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	69da      	ldr	r2, [r3, #28]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7e6:	431a      	orrs	r2, r3
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	431a      	orrs	r2, r3
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7f0:	ea42 0103 	orr.w	r1, r2, r3
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	68da      	ldr	r2, [r3, #12]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	430a      	orrs	r2, r1
 800a7fe:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a808:	431a      	orrs	r2, r3
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a80e:	431a      	orrs	r2, r3
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	699b      	ldr	r3, [r3, #24]
 800a814:	431a      	orrs	r2, r3
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	691b      	ldr	r3, [r3, #16]
 800a81a:	431a      	orrs	r2, r3
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	695b      	ldr	r3, [r3, #20]
 800a820:	431a      	orrs	r2, r3
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6a1b      	ldr	r3, [r3, #32]
 800a826:	431a      	orrs	r2, r3
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	685b      	ldr	r3, [r3, #4]
 800a82c:	431a      	orrs	r2, r3
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a832:	431a      	orrs	r2, r3
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	689b      	ldr	r3, [r3, #8]
 800a838:	431a      	orrs	r2, r3
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a83e:	ea42 0103 	orr.w	r1, r2, r3
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	430a      	orrs	r2, r1
 800a84c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	685b      	ldr	r3, [r3, #4]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d113      	bne.n	800a87e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	689b      	ldr	r3, [r3, #8]
 800a85c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a868:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	689b      	ldr	r3, [r3, #8]
 800a870:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a87c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f022 0201 	bic.w	r2, r2, #1
 800a88c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	685b      	ldr	r3, [r3, #4]
 800a892:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a896:	2b00      	cmp	r3, #0
 800a898:	d00a      	beq.n	800a8b0 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	68db      	ldr	r3, [r3, #12]
 800a8a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	430a      	orrs	r2, r1
 800a8ae:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2201      	movs	r2, #1
 800a8bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800a8c0:	2300      	movs	r3, #0
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3710      	adds	r7, #16
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}
 800a8ca:	bf00      	nop
 800a8cc:	40013000 	.word	0x40013000
 800a8d0:	40003800 	.word	0x40003800
 800a8d4:	40003c00 	.word	0x40003c00

0800a8d8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b08a      	sub	sp, #40	; 0x28
 800a8dc:	af02      	add	r7, sp, #8
 800a8de:	60f8      	str	r0, [r7, #12]
 800a8e0:	60b9      	str	r1, [r7, #8]
 800a8e2:	603b      	str	r3, [r7, #0]
 800a8e4:	4613      	mov	r3, r2
 800a8e6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	3320      	adds	r3, #32
 800a8ee:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a8fa:	2b01      	cmp	r3, #1
 800a8fc:	d101      	bne.n	800a902 <HAL_SPI_Transmit+0x2a>
 800a8fe:	2302      	movs	r3, #2
 800a900:	e1d7      	b.n	800acb2 <HAL_SPI_Transmit+0x3da>
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	2201      	movs	r2, #1
 800a906:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a90a:	f7f7 fe11 	bl	8002530 <HAL_GetTick>
 800a90e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a916:	b2db      	uxtb	r3, r3
 800a918:	2b01      	cmp	r3, #1
 800a91a:	d007      	beq.n	800a92c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800a91c:	2302      	movs	r3, #2
 800a91e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	2200      	movs	r2, #0
 800a924:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a928:	7efb      	ldrb	r3, [r7, #27]
 800a92a:	e1c2      	b.n	800acb2 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d002      	beq.n	800a938 <HAL_SPI_Transmit+0x60>
 800a932:	88fb      	ldrh	r3, [r7, #6]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d107      	bne.n	800a948 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800a938:	2301      	movs	r3, #1
 800a93a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	2200      	movs	r2, #0
 800a940:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a944:	7efb      	ldrb	r3, [r7, #27]
 800a946:	e1b4      	b.n	800acb2 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	2203      	movs	r2, #3
 800a94c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	2200      	movs	r2, #0
 800a954:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	68ba      	ldr	r2, [r7, #8]
 800a95c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	88fa      	ldrh	r2, [r7, #6]
 800a962:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	88fa      	ldrh	r2, [r7, #6]
 800a96a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	2200      	movs	r2, #0
 800a972:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2200      	movs	r2, #0
 800a978:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	2200      	movs	r2, #0
 800a980:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	2200      	movs	r2, #0
 800a988:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	2200      	movs	r2, #0
 800a98e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	689b      	ldr	r3, [r3, #8]
 800a994:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800a998:	d107      	bne.n	800a9aa <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	681a      	ldr	r2, [r3, #0]
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a9a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	685a      	ldr	r2, [r3, #4]
 800a9b0:	4b96      	ldr	r3, [pc, #600]	; (800ac0c <HAL_SPI_Transmit+0x334>)
 800a9b2:	4013      	ands	r3, r2
 800a9b4:	88f9      	ldrh	r1, [r7, #6]
 800a9b6:	68fa      	ldr	r2, [r7, #12]
 800a9b8:	6812      	ldr	r2, [r2, #0]
 800a9ba:	430b      	orrs	r3, r1
 800a9bc:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	681a      	ldr	r2, [r3, #0]
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f042 0201 	orr.w	r2, r2, #1
 800a9cc:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	685b      	ldr	r3, [r3, #4]
 800a9d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a9d6:	d107      	bne.n	800a9e8 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	681a      	ldr	r2, [r3, #0]
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a9e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	68db      	ldr	r3, [r3, #12]
 800a9ec:	2b0f      	cmp	r3, #15
 800a9ee:	d947      	bls.n	800aa80 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a9f0:	e03f      	b.n	800aa72 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	695b      	ldr	r3, [r3, #20]
 800a9f8:	f003 0302 	and.w	r3, r3, #2
 800a9fc:	2b02      	cmp	r3, #2
 800a9fe:	d114      	bne.n	800aa2a <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	6812      	ldr	r2, [r2, #0]
 800aa0a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa10:	1d1a      	adds	r2, r3, #4
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aa1c:	b29b      	uxth	r3, r3
 800aa1e:	3b01      	subs	r3, #1
 800aa20:	b29a      	uxth	r2, r3
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800aa28:	e023      	b.n	800aa72 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aa2a:	f7f7 fd81 	bl	8002530 <HAL_GetTick>
 800aa2e:	4602      	mov	r2, r0
 800aa30:	697b      	ldr	r3, [r7, #20]
 800aa32:	1ad3      	subs	r3, r2, r3
 800aa34:	683a      	ldr	r2, [r7, #0]
 800aa36:	429a      	cmp	r2, r3
 800aa38:	d803      	bhi.n	800aa42 <HAL_SPI_Transmit+0x16a>
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa40:	d102      	bne.n	800aa48 <HAL_SPI_Transmit+0x170>
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d114      	bne.n	800aa72 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800aa48:	68f8      	ldr	r0, [r7, #12]
 800aa4a:	f000 fd17 	bl	800b47c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	2200      	movs	r2, #0
 800aa52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa5c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	2201      	movs	r2, #1
 800aa6a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800aa6e:	2303      	movs	r3, #3
 800aa70:	e11f      	b.n	800acb2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aa78:	b29b      	uxth	r3, r3
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d1b9      	bne.n	800a9f2 <HAL_SPI_Transmit+0x11a>
 800aa7e:	e0f2      	b.n	800ac66 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	68db      	ldr	r3, [r3, #12]
 800aa84:	2b07      	cmp	r3, #7
 800aa86:	f240 80e7 	bls.w	800ac58 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800aa8a:	e05d      	b.n	800ab48 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	695b      	ldr	r3, [r3, #20]
 800aa92:	f003 0302 	and.w	r3, r3, #2
 800aa96:	2b02      	cmp	r3, #2
 800aa98:	d132      	bne.n	800ab00 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aaa0:	b29b      	uxth	r3, r3
 800aaa2:	2b01      	cmp	r3, #1
 800aaa4:	d918      	bls.n	800aad8 <HAL_SPI_Transmit+0x200>
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d014      	beq.n	800aad8 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	6812      	ldr	r2, [r2, #0]
 800aab8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aabe:	1d1a      	adds	r2, r3, #4
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aaca:	b29b      	uxth	r3, r3
 800aacc:	3b02      	subs	r3, #2
 800aace:	b29a      	uxth	r2, r3
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800aad6:	e037      	b.n	800ab48 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aadc:	881a      	ldrh	r2, [r3, #0]
 800aade:	69fb      	ldr	r3, [r7, #28]
 800aae0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aae6:	1c9a      	adds	r2, r3, #2
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aaf2:	b29b      	uxth	r3, r3
 800aaf4:	3b01      	subs	r3, #1
 800aaf6:	b29a      	uxth	r2, r3
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800aafe:	e023      	b.n	800ab48 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ab00:	f7f7 fd16 	bl	8002530 <HAL_GetTick>
 800ab04:	4602      	mov	r2, r0
 800ab06:	697b      	ldr	r3, [r7, #20]
 800ab08:	1ad3      	subs	r3, r2, r3
 800ab0a:	683a      	ldr	r2, [r7, #0]
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	d803      	bhi.n	800ab18 <HAL_SPI_Transmit+0x240>
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab16:	d102      	bne.n	800ab1e <HAL_SPI_Transmit+0x246>
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d114      	bne.n	800ab48 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ab1e:	68f8      	ldr	r0, [r7, #12]
 800ab20:	f000 fcac 	bl	800b47c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	2200      	movs	r2, #0
 800ab28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab32:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	2201      	movs	r2, #1
 800ab40:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ab44:	2303      	movs	r3, #3
 800ab46:	e0b4      	b.n	800acb2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ab4e:	b29b      	uxth	r3, r3
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d19b      	bne.n	800aa8c <HAL_SPI_Transmit+0x1b4>
 800ab54:	e087      	b.n	800ac66 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	695b      	ldr	r3, [r3, #20]
 800ab5c:	f003 0302 	and.w	r3, r3, #2
 800ab60:	2b02      	cmp	r3, #2
 800ab62:	d155      	bne.n	800ac10 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ab6a:	b29b      	uxth	r3, r3
 800ab6c:	2b03      	cmp	r3, #3
 800ab6e:	d918      	bls.n	800aba2 <HAL_SPI_Transmit+0x2ca>
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab74:	2b40      	cmp	r3, #64	; 0x40
 800ab76:	d914      	bls.n	800aba2 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	6812      	ldr	r2, [r2, #0]
 800ab82:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab88:	1d1a      	adds	r2, r3, #4
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ab94:	b29b      	uxth	r3, r3
 800ab96:	3b04      	subs	r3, #4
 800ab98:	b29a      	uxth	r2, r3
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800aba0:	e05a      	b.n	800ac58 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aba8:	b29b      	uxth	r3, r3
 800abaa:	2b01      	cmp	r3, #1
 800abac:	d917      	bls.n	800abde <HAL_SPI_Transmit+0x306>
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d013      	beq.n	800abde <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abba:	881a      	ldrh	r2, [r3, #0]
 800abbc:	69fb      	ldr	r3, [r7, #28]
 800abbe:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abc4:	1c9a      	adds	r2, r3, #2
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800abd0:	b29b      	uxth	r3, r3
 800abd2:	3b02      	subs	r3, #2
 800abd4:	b29a      	uxth	r2, r3
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800abdc:	e03c      	b.n	800ac58 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	3320      	adds	r3, #32
 800abe8:	7812      	ldrb	r2, [r2, #0]
 800abea:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abf0:	1c5a      	adds	r2, r3, #1
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800abfc:	b29b      	uxth	r3, r3
 800abfe:	3b01      	subs	r3, #1
 800ac00:	b29a      	uxth	r2, r3
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ac08:	e026      	b.n	800ac58 <HAL_SPI_Transmit+0x380>
 800ac0a:	bf00      	nop
 800ac0c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ac10:	f7f7 fc8e 	bl	8002530 <HAL_GetTick>
 800ac14:	4602      	mov	r2, r0
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	1ad3      	subs	r3, r2, r3
 800ac1a:	683a      	ldr	r2, [r7, #0]
 800ac1c:	429a      	cmp	r2, r3
 800ac1e:	d803      	bhi.n	800ac28 <HAL_SPI_Transmit+0x350>
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac26:	d102      	bne.n	800ac2e <HAL_SPI_Transmit+0x356>
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d114      	bne.n	800ac58 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ac2e:	68f8      	ldr	r0, [r7, #12]
 800ac30:	f000 fc24 	bl	800b47c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	2200      	movs	r2, #0
 800ac38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac42:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	2201      	movs	r2, #1
 800ac50:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ac54:	2303      	movs	r3, #3
 800ac56:	e02c      	b.n	800acb2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ac5e:	b29b      	uxth	r3, r3
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	f47f af78 	bne.w	800ab56 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	9300      	str	r3, [sp, #0]
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	2108      	movs	r1, #8
 800ac70:	68f8      	ldr	r0, [r7, #12]
 800ac72:	f000 fca3 	bl	800b5bc <SPI_WaitOnFlagUntilTimeout>
 800ac76:	4603      	mov	r3, r0
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d007      	beq.n	800ac8c <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac82:	f043 0220 	orr.w	r2, r3, #32
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ac8c:	68f8      	ldr	r0, [r7, #12]
 800ac8e:	f000 fbf5 	bl	800b47c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	2200      	movs	r2, #0
 800ac96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	2201      	movs	r2, #1
 800ac9e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d001      	beq.n	800acb0 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800acac:	2301      	movs	r3, #1
 800acae:	e000      	b.n	800acb2 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800acb0:	7efb      	ldrb	r3, [r7, #27]
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	3720      	adds	r7, #32
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}
 800acba:	bf00      	nop

0800acbc <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b086      	sub	sp, #24
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	60f8      	str	r0, [r7, #12]
 800acc4:	60b9      	str	r1, [r7, #8]
 800acc6:	4613      	mov	r3, r2
 800acc8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800acca:	2300      	movs	r3, #0
 800accc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	689b      	ldr	r3, [r3, #8]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d110      	bne.n	800acf8 <HAL_SPI_Receive_DMA+0x3c>
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	685b      	ldr	r3, [r3, #4]
 800acda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800acde:	d10b      	bne.n	800acf8 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	2204      	movs	r2, #4
 800ace4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800ace8:	88fb      	ldrh	r3, [r7, #6]
 800acea:	68ba      	ldr	r2, [r7, #8]
 800acec:	68b9      	ldr	r1, [r7, #8]
 800acee:	68f8      	ldr	r0, [r7, #12]
 800acf0:	f000 f940 	bl	800af74 <HAL_SPI_TransmitReceive_DMA>
 800acf4:	4603      	mov	r3, r0
 800acf6:	e130      	b.n	800af5a <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800acfe:	2b01      	cmp	r3, #1
 800ad00:	d101      	bne.n	800ad06 <HAL_SPI_Receive_DMA+0x4a>
 800ad02:	2302      	movs	r3, #2
 800ad04:	e129      	b.n	800af5a <HAL_SPI_Receive_DMA+0x29e>
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	2201      	movs	r2, #1
 800ad0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ad14:	b2db      	uxtb	r3, r3
 800ad16:	2b01      	cmp	r3, #1
 800ad18:	d007      	beq.n	800ad2a <HAL_SPI_Receive_DMA+0x6e>
  {
    errorcode = HAL_BUSY;
 800ad1a:	2302      	movs	r3, #2
 800ad1c:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	2200      	movs	r2, #0
 800ad22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ad26:	7dfb      	ldrb	r3, [r7, #23]
 800ad28:	e117      	b.n	800af5a <HAL_SPI_Receive_DMA+0x29e>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d002      	beq.n	800ad36 <HAL_SPI_Receive_DMA+0x7a>
 800ad30:	88fb      	ldrh	r3, [r7, #6]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d107      	bne.n	800ad46 <HAL_SPI_Receive_DMA+0x8a>
  {
    errorcode = HAL_ERROR;
 800ad36:	2301      	movs	r3, #1
 800ad38:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ad42:	7dfb      	ldrb	r3, [r7, #23]
 800ad44:	e109      	b.n	800af5a <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	2204      	movs	r2, #4
 800ad4a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	2200      	movs	r2, #0
 800ad52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	68ba      	ldr	r2, [r7, #8]
 800ad5a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	88fa      	ldrh	r2, [r7, #6]
 800ad60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	88fa      	ldrh	r2, [r7, #6]
 800ad68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	2200      	movs	r2, #0
 800ad76:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	2200      	movs	r2, #0
 800ad84:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	689b      	ldr	r3, [r3, #8]
 800ad8c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800ad90:	d107      	bne.n	800ada2 <HAL_SPI_Receive_DMA+0xe6>
  {
    SPI_1LINE_RX(hspi);
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	681a      	ldr	r2, [r3, #0]
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ada0:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	68db      	ldr	r3, [r3, #12]
 800ada6:	2b0f      	cmp	r3, #15
 800ada8:	d905      	bls.n	800adb6 <HAL_SPI_Receive_DMA+0xfa>
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800adae:	699b      	ldr	r3, [r3, #24]
 800adb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800adb4:	d10f      	bne.n	800add6 <HAL_SPI_Receive_DMA+0x11a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800adba:	2b07      	cmp	r3, #7
 800adbc:	d913      	bls.n	800ade6 <HAL_SPI_Receive_DMA+0x12a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800adc2:	699b      	ldr	r3, [r3, #24]
 800adc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800adc8:	d00d      	beq.n	800ade6 <HAL_SPI_Receive_DMA+0x12a>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800adce:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800add0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800add4:	d007      	beq.n	800ade6 <HAL_SPI_Receive_DMA+0x12a>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 800add6:	2301      	movs	r3, #1
 800add8:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	2200      	movs	r2, #0
 800adde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ade2:	7dfb      	ldrb	r3, [r7, #23]
 800ade4:	e0b9      	b.n	800af5a <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	689a      	ldr	r2, [r3, #8]
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800adf4:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	68db      	ldr	r3, [r3, #12]
 800adfa:	2b07      	cmp	r3, #7
 800adfc:	d820      	bhi.n	800ae40 <HAL_SPI_Receive_DMA+0x184>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae02:	699b      	ldr	r3, [r3, #24]
 800ae04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae08:	d109      	bne.n	800ae1e <HAL_SPI_Receive_DMA+0x162>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ae10:	b29b      	uxth	r3, r3
 800ae12:	3301      	adds	r3, #1
 800ae14:	105b      	asrs	r3, r3, #1
 800ae16:	b29a      	uxth	r2, r3
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae22:	699b      	ldr	r3, [r3, #24]
 800ae24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ae28:	d11e      	bne.n	800ae68 <HAL_SPI_Receive_DMA+0x1ac>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ae30:	b29b      	uxth	r3, r3
 800ae32:	3303      	adds	r3, #3
 800ae34:	109b      	asrs	r3, r3, #2
 800ae36:	b29a      	uxth	r2, r3
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ae3e:	e013      	b.n	800ae68 <HAL_SPI_Receive_DMA+0x1ac>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	68db      	ldr	r3, [r3, #12]
 800ae44:	2b0f      	cmp	r3, #15
 800ae46:	d80f      	bhi.n	800ae68 <HAL_SPI_Receive_DMA+0x1ac>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae4c:	699b      	ldr	r3, [r3, #24]
 800ae4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ae52:	d109      	bne.n	800ae68 <HAL_SPI_Receive_DMA+0x1ac>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ae5a:	b29b      	uxth	r3, r3
 800ae5c:	3301      	adds	r3, #1
 800ae5e:	105b      	asrs	r3, r3, #1
 800ae60:	b29a      	uxth	r2, r3
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae6c:	4a3d      	ldr	r2, [pc, #244]	; (800af64 <HAL_SPI_Receive_DMA+0x2a8>)
 800ae6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae74:	4a3c      	ldr	r2, [pc, #240]	; (800af68 <HAL_SPI_Receive_DMA+0x2ac>)
 800ae76:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae7c:	4a3b      	ldr	r2, [pc, #236]	; (800af6c <HAL_SPI_Receive_DMA+0x2b0>)
 800ae7e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae84:	2200      	movs	r2, #0
 800ae86:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	3330      	adds	r3, #48	; 0x30
 800ae92:	4619      	mov	r1, r3
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae98:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800aea0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800aea2:	f7f9 fde1 	bl	8004a68 <HAL_DMA_Start_IT>
 800aea6:	4603      	mov	r3, r0
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d013      	beq.n	800aed4 <HAL_SPI_Receive_DMA+0x218>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aeb2:	f043 0210 	orr.w	r2, r3, #16
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	2200      	movs	r2, #0
 800aec0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	2201      	movs	r2, #1
 800aec8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 800aecc:	2301      	movs	r3, #1
 800aece:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 800aed0:	7dfb      	ldrb	r3, [r7, #23]
 800aed2:	e042      	b.n	800af5a <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aed8:	69db      	ldr	r3, [r3, #28]
 800aeda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aede:	d108      	bne.n	800aef2 <HAL_SPI_Receive_DMA+0x236>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	6859      	ldr	r1, [r3, #4]
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	681a      	ldr	r2, [r3, #0]
 800aeea:	4b21      	ldr	r3, [pc, #132]	; (800af70 <HAL_SPI_Receive_DMA+0x2b4>)
 800aeec:	400b      	ands	r3, r1
 800aeee:	6053      	str	r3, [r2, #4]
 800aef0:	e009      	b.n	800af06 <HAL_SPI_Receive_DMA+0x24a>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	685a      	ldr	r2, [r3, #4]
 800aef8:	4b1d      	ldr	r3, [pc, #116]	; (800af70 <HAL_SPI_Receive_DMA+0x2b4>)
 800aefa:	4013      	ands	r3, r2
 800aefc:	88f9      	ldrh	r1, [r7, #6]
 800aefe:	68fa      	ldr	r2, [r7, #12]
 800af00:	6812      	ldr	r2, [r2, #0]
 800af02:	430b      	orrs	r3, r1
 800af04:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	689a      	ldr	r2, [r3, #8]
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800af14:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	691a      	ldr	r2, [r3, #16]
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 800af24:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	681a      	ldr	r2, [r3, #0]
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f042 0201 	orr.w	r2, r2, #1
 800af34:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	685b      	ldr	r3, [r3, #4]
 800af3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af3e:	d107      	bne.n	800af50 <HAL_SPI_Receive_DMA+0x294>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	681a      	ldr	r2, [r3, #0]
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800af4e:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	2200      	movs	r2, #0
 800af54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 800af58:	7dfb      	ldrb	r3, [r7, #23]
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3718      	adds	r7, #24
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}
 800af62:	bf00      	nop
 800af64:	0800b3fd 	.word	0x0800b3fd
 800af68:	0800b371 	.word	0x0800b371
 800af6c:	0800b435 	.word	0x0800b435
 800af70:	ffff0000 	.word	0xffff0000

0800af74 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b086      	sub	sp, #24
 800af78:	af00      	add	r7, sp, #0
 800af7a:	60f8      	str	r0, [r7, #12]
 800af7c:	60b9      	str	r1, [r7, #8]
 800af7e:	607a      	str	r2, [r7, #4]
 800af80:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800af82:	2300      	movs	r3, #0
 800af84:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800af8c:	2b01      	cmp	r3, #1
 800af8e:	d101      	bne.n	800af94 <HAL_SPI_TransmitReceive_DMA+0x20>
 800af90:	2302      	movs	r3, #2
 800af92:	e1b4      	b.n	800b2fe <HAL_SPI_TransmitReceive_DMA+0x38a>
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	2201      	movs	r2, #1
 800af98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init temporary variables */
  tmp_state   = hspi->State;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800afa2:	75bb      	strb	r3, [r7, #22]
  tmp_mode    = hspi->Init.Mode;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	685b      	ldr	r3, [r3, #4]
 800afa8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800afaa:	7dbb      	ldrb	r3, [r7, #22]
 800afac:	2b01      	cmp	r3, #1
 800afae:	d012      	beq.n	800afd6 <HAL_SPI_TransmitReceive_DMA+0x62>
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800afb6:	d106      	bne.n	800afc6 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d102      	bne.n	800afc6 <HAL_SPI_TransmitReceive_DMA+0x52>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800afc0:	7dbb      	ldrb	r3, [r7, #22]
 800afc2:	2b04      	cmp	r3, #4
 800afc4:	d007      	beq.n	800afd6 <HAL_SPI_TransmitReceive_DMA+0x62>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800afc6:	2302      	movs	r3, #2
 800afc8:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	2200      	movs	r2, #0
 800afce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800afd2:	7dfb      	ldrb	r3, [r7, #23]
 800afd4:	e193      	b.n	800b2fe <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d005      	beq.n	800afe8 <HAL_SPI_TransmitReceive_DMA+0x74>
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d002      	beq.n	800afe8 <HAL_SPI_TransmitReceive_DMA+0x74>
 800afe2:	887b      	ldrh	r3, [r7, #2]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d107      	bne.n	800aff8 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    errorcode = HAL_ERROR;
 800afe8:	2301      	movs	r3, #1
 800afea:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	2200      	movs	r2, #0
 800aff0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800aff4:	7dfb      	ldrb	r3, [r7, #23]
 800aff6:	e182      	b.n	800b2fe <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800affe:	b2db      	uxtb	r3, r3
 800b000:	2b04      	cmp	r3, #4
 800b002:	d003      	beq.n	800b00c <HAL_SPI_TransmitReceive_DMA+0x98>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	2205      	movs	r2, #5
 800b008:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	2200      	movs	r2, #0
 800b010:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	68ba      	ldr	r2, [r7, #8]
 800b018:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	887a      	ldrh	r2, [r7, #2]
 800b01e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	887a      	ldrh	r2, [r7, #2]
 800b026:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	687a      	ldr	r2, [r7, #4]
 800b02e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	887a      	ldrh	r2, [r7, #2]
 800b034:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	887a      	ldrh	r2, [r7, #2]
 800b03c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	2200      	movs	r2, #0
 800b044:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	2200      	movs	r2, #0
 800b04a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	689a      	ldr	r2, [r3, #8]
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800b05a:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	68db      	ldr	r3, [r3, #12]
 800b060:	2b0f      	cmp	r3, #15
 800b062:	d905      	bls.n	800b070 <HAL_SPI_TransmitReceive_DMA+0xfc>
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b068:	699b      	ldr	r3, [r3, #24]
 800b06a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b06e:	d10f      	bne.n	800b090 <HAL_SPI_TransmitReceive_DMA+0x11c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800b074:	2b07      	cmp	r3, #7
 800b076:	d913      	bls.n	800b0a0 <HAL_SPI_TransmitReceive_DMA+0x12c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b07c:	699b      	ldr	r3, [r3, #24]
 800b07e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b082:	d00d      	beq.n	800b0a0 <HAL_SPI_TransmitReceive_DMA+0x12c>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b088:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800b08a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b08e:	d007      	beq.n	800b0a0 <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 800b090:	2301      	movs	r3, #1
 800b092:	75fb      	strb	r3, [r7, #23]
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	2200      	movs	r2, #0
 800b098:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b09c:	7dfb      	ldrb	r3, [r7, #23]
 800b09e:	e12e      	b.n	800b2fe <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	68db      	ldr	r3, [r3, #12]
 800b0a4:	2b07      	cmp	r3, #7
 800b0a6:	d840      	bhi.n	800b12a <HAL_SPI_TransmitReceive_DMA+0x1b6>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b0ac:	699b      	ldr	r3, [r3, #24]
 800b0ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b0b2:	d109      	bne.n	800b0c8 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b0ba:	b29b      	uxth	r3, r3
 800b0bc:	3301      	adds	r3, #1
 800b0be:	105b      	asrs	r3, r3, #1
 800b0c0:	b29a      	uxth	r2, r3
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b0cc:	699b      	ldr	r3, [r3, #24]
 800b0ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b0d2:	d109      	bne.n	800b0e8 <HAL_SPI_TransmitReceive_DMA+0x174>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b0da:	b29b      	uxth	r3, r3
 800b0dc:	3303      	adds	r3, #3
 800b0de:	109b      	asrs	r3, r3, #2
 800b0e0:	b29a      	uxth	r2, r3
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b0ec:	699b      	ldr	r3, [r3, #24]
 800b0ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b0f2:	d109      	bne.n	800b108 <HAL_SPI_TransmitReceive_DMA+0x194>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b0fa:	b29b      	uxth	r3, r3
 800b0fc:	3301      	adds	r3, #1
 800b0fe:	105b      	asrs	r3, r3, #1
 800b100:	b29a      	uxth	r2, r3
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b10c:	699b      	ldr	r3, [r3, #24]
 800b10e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b112:	d12e      	bne.n	800b172 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b11a:	b29b      	uxth	r3, r3
 800b11c:	3303      	adds	r3, #3
 800b11e:	109b      	asrs	r3, r3, #2
 800b120:	b29a      	uxth	r2, r3
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b128:	e023      	b.n	800b172 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	68db      	ldr	r3, [r3, #12]
 800b12e:	2b0f      	cmp	r3, #15
 800b130:	d81f      	bhi.n	800b172 <HAL_SPI_TransmitReceive_DMA+0x1fe>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b136:	699b      	ldr	r3, [r3, #24]
 800b138:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b13c:	d109      	bne.n	800b152 <HAL_SPI_TransmitReceive_DMA+0x1de>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b144:	b29b      	uxth	r3, r3
 800b146:	3301      	adds	r3, #1
 800b148:	105b      	asrs	r3, r3, #1
 800b14a:	b29a      	uxth	r2, r3
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b156:	699b      	ldr	r3, [r3, #24]
 800b158:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b15c:	d109      	bne.n	800b172 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b164:	b29b      	uxth	r3, r3
 800b166:	3301      	adds	r3, #1
 800b168:	105b      	asrs	r3, r3, #1
 800b16a:	b29a      	uxth	r2, r3
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b178:	b2db      	uxtb	r3, r3
 800b17a:	2b04      	cmp	r3, #4
 800b17c:	d108      	bne.n	800b190 <HAL_SPI_TransmitReceive_DMA+0x21c>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b182:	4a61      	ldr	r2, [pc, #388]	; (800b308 <HAL_SPI_TransmitReceive_DMA+0x394>)
 800b184:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b18a:	4a60      	ldr	r2, [pc, #384]	; (800b30c <HAL_SPI_TransmitReceive_DMA+0x398>)
 800b18c:	63da      	str	r2, [r3, #60]	; 0x3c
 800b18e:	e007      	b.n	800b1a0 <HAL_SPI_TransmitReceive_DMA+0x22c>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b194:	4a5e      	ldr	r2, [pc, #376]	; (800b310 <HAL_SPI_TransmitReceive_DMA+0x39c>)
 800b196:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b19c:	4a5d      	ldr	r2, [pc, #372]	; (800b314 <HAL_SPI_TransmitReceive_DMA+0x3a0>)
 800b19e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1a4:	4a5c      	ldr	r2, [pc, #368]	; (800b318 <HAL_SPI_TransmitReceive_DMA+0x3a4>)
 800b1a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	3330      	adds	r3, #48	; 0x30
 800b1ba:	4619      	mov	r1, r3
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b1c0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b1c8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800b1ca:	f7f9 fc4d 	bl	8004a68 <HAL_DMA_Start_IT>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d013      	beq.n	800b1fc <HAL_SPI_TransmitReceive_DMA+0x288>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b1da:	f043 0210 	orr.w	r2, r3, #16
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 800b1f8:	7dfb      	ldrb	r3, [r7, #23]
 800b1fa:	e080      	b.n	800b2fe <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	689a      	ldr	r2, [r3, #8]
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b20a:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b210:	2200      	movs	r2, #0
 800b212:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b218:	2200      	movs	r2, #0
 800b21a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b220:	2200      	movs	r2, #0
 800b222:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b228:	2200      	movs	r2, #0
 800b22a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b234:	4619      	mov	r1, r3
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	3320      	adds	r3, #32
 800b23c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b244:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800b246:	f7f9 fc0f 	bl	8004a68 <HAL_DMA_Start_IT>
 800b24a:	4603      	mov	r3, r0
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d013      	beq.n	800b278 <HAL_SPI_TransmitReceive_DMA+0x304>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b256:	f043 0210 	orr.w	r2, r3, #16
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	2200      	movs	r2, #0
 800b264:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	2201      	movs	r2, #1
 800b26c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 800b270:	2301      	movs	r3, #1
 800b272:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 800b274:	7dfb      	ldrb	r3, [r7, #23]
 800b276:	e042      	b.n	800b2fe <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b27c:	69db      	ldr	r3, [r3, #28]
 800b27e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b282:	d108      	bne.n	800b296 <HAL_SPI_TransmitReceive_DMA+0x322>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	6859      	ldr	r1, [r3, #4]
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	681a      	ldr	r2, [r3, #0]
 800b28e:	4b23      	ldr	r3, [pc, #140]	; (800b31c <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 800b290:	400b      	ands	r3, r1
 800b292:	6053      	str	r3, [r2, #4]
 800b294:	e009      	b.n	800b2aa <HAL_SPI_TransmitReceive_DMA+0x336>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	685a      	ldr	r2, [r3, #4]
 800b29c:	4b1f      	ldr	r3, [pc, #124]	; (800b31c <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 800b29e:	4013      	ands	r3, r2
 800b2a0:	8879      	ldrh	r1, [r7, #2]
 800b2a2:	68fa      	ldr	r2, [r7, #12]
 800b2a4:	6812      	ldr	r2, [r2, #0]
 800b2a6:	430b      	orrs	r3, r1
 800b2a8:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	689a      	ldr	r2, [r3, #8]
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b2b8:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	691a      	ldr	r2, [r3, #16]
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f442 7258 	orr.w	r2, r2, #864	; 0x360
 800b2c8:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	681a      	ldr	r2, [r3, #0]
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f042 0201 	orr.w	r2, r2, #1
 800b2d8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	685b      	ldr	r3, [r3, #4]
 800b2de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b2e2:	d107      	bne.n	800b2f4 <HAL_SPI_TransmitReceive_DMA+0x380>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	681a      	ldr	r2, [r3, #0]
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b2f2:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 800b2fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	3718      	adds	r7, #24
 800b302:	46bd      	mov	sp, r7
 800b304:	bd80      	pop	{r7, pc}
 800b306:	bf00      	nop
 800b308:	0800b3fd 	.word	0x0800b3fd
 800b30c:	0800b371 	.word	0x0800b371
 800b310:	0800b419 	.word	0x0800b419
 800b314:	0800b3b7 	.word	0x0800b3b7
 800b318:	0800b435 	.word	0x0800b435
 800b31c:	ffff0000 	.word	0xffff0000

0800b320 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b320:	b480      	push	{r7}
 800b322:	b083      	sub	sp, #12
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800b328:	bf00      	nop
 800b32a:	370c      	adds	r7, #12
 800b32c:	46bd      	mov	sp, r7
 800b32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b332:	4770      	bx	lr

0800b334 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b334:	b480      	push	{r7}
 800b336:	b083      	sub	sp, #12
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800b33c:	bf00      	nop
 800b33e:	370c      	adds	r7, #12
 800b340:	46bd      	mov	sp, r7
 800b342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b346:	4770      	bx	lr

0800b348 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b348:	b480      	push	{r7}
 800b34a:	b083      	sub	sp, #12
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800b350:	bf00      	nop
 800b352:	370c      	adds	r7, #12
 800b354:	46bd      	mov	sp, r7
 800b356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35a:	4770      	bx	lr

0800b35c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800b35c:	b480      	push	{r7}
 800b35e:	b083      	sub	sp, #12
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800b364:	bf00      	nop
 800b366:	370c      	adds	r7, #12
 800b368:	46bd      	mov	sp, r7
 800b36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36e:	4770      	bx	lr

0800b370 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b084      	sub	sp, #16
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b37c:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b384:	b2db      	uxtb	r3, r3
 800b386:	2b07      	cmp	r3, #7
 800b388:	d011      	beq.n	800b3ae <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b38e:	69db      	ldr	r3, [r3, #28]
 800b390:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b394:	d103      	bne.n	800b39e <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800b396:	68f8      	ldr	r0, [r7, #12]
 800b398:	f7f6 fbce 	bl	8001b38 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800b39c:	e007      	b.n	800b3ae <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	691a      	ldr	r2, [r3, #16]
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	f042 0208 	orr.w	r2, r2, #8
 800b3ac:	611a      	str	r2, [r3, #16]
}
 800b3ae:	bf00      	nop
 800b3b0:	3710      	adds	r7, #16
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}

0800b3b6 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b3b6:	b580      	push	{r7, lr}
 800b3b8:	b084      	sub	sp, #16
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3c2:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b3ca:	b2db      	uxtb	r3, r3
 800b3cc:	2b07      	cmp	r3, #7
 800b3ce:	d011      	beq.n	800b3f4 <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b3d4:	69db      	ldr	r3, [r3, #28]
 800b3d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3da:	d103      	bne.n	800b3e4 <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 800b3dc:	68f8      	ldr	r0, [r7, #12]
 800b3de:	f7ff ff9f 	bl	800b320 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800b3e2:	e007      	b.n	800b3f4 <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	691a      	ldr	r2, [r3, #16]
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f042 0208 	orr.w	r2, r2, #8
 800b3f2:	611a      	str	r2, [r3, #16]
}
 800b3f4:	bf00      	nop
 800b3f6:	3710      	adds	r7, #16
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}

0800b3fc <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b084      	sub	sp, #16
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b408:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800b40a:	68f8      	ldr	r0, [r7, #12]
 800b40c:	f7ff ff92 	bl	800b334 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b410:	bf00      	nop
 800b412:	3710      	adds	r7, #16
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}

0800b418 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b084      	sub	sp, #16
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b424:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800b426:	68f8      	ldr	r0, [r7, #12]
 800b428:	f7ff ff8e 	bl	800b348 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b42c:	bf00      	nop
 800b42e:	3710      	adds	r7, #16
 800b430:	46bd      	mov	sp, r7
 800b432:	bd80      	pop	{r7, pc}

0800b434 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b084      	sub	sp, #16
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b440:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f7fb fa40 	bl	80068c8 <HAL_DMA_GetError>
 800b448:	4603      	mov	r3, r0
 800b44a:	2b02      	cmp	r3, #2
 800b44c:	d011      	beq.n	800b472 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800b44e:	68f8      	ldr	r0, [r7, #12]
 800b450:	f000 f814 	bl	800b47c <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b45a:	f043 0210 	orr.w	r2, r3, #16
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	2201      	movs	r2, #1
 800b468:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800b46c:	68f8      	ldr	r0, [r7, #12]
 800b46e:	f7ff ff75 	bl	800b35c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800b472:	bf00      	nop
 800b474:	3710      	adds	r7, #16
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}
	...

0800b47c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800b47c:	b480      	push	{r7}
 800b47e:	b085      	sub	sp, #20
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	695b      	ldr	r3, [r3, #20]
 800b48a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	699a      	ldr	r2, [r3, #24]
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f042 0208 	orr.w	r2, r2, #8
 800b49a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	699a      	ldr	r2, [r3, #24]
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f042 0210 	orr.w	r2, r2, #16
 800b4aa:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	681a      	ldr	r2, [r3, #0]
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f022 0201 	bic.w	r2, r2, #1
 800b4ba:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	6919      	ldr	r1, [r3, #16]
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681a      	ldr	r2, [r3, #0]
 800b4c6:	4b3c      	ldr	r3, [pc, #240]	; (800b5b8 <SPI_CloseTransfer+0x13c>)
 800b4c8:	400b      	ands	r3, r1
 800b4ca:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	689a      	ldr	r2, [r3, #8]
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800b4da:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b4e2:	b2db      	uxtb	r3, r3
 800b4e4:	2b04      	cmp	r3, #4
 800b4e6:	d014      	beq.n	800b512 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	f003 0320 	and.w	r3, r3, #32
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d00f      	beq.n	800b512 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b4f8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	699a      	ldr	r2, [r3, #24]
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f042 0220 	orr.w	r2, r2, #32
 800b510:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b518:	b2db      	uxtb	r3, r3
 800b51a:	2b03      	cmp	r3, #3
 800b51c:	d014      	beq.n	800b548 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b524:	2b00      	cmp	r3, #0
 800b526:	d00f      	beq.n	800b548 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b52e:	f043 0204 	orr.w	r2, r3, #4
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	699a      	ldr	r2, [r3, #24]
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b546:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d00f      	beq.n	800b572 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b558:	f043 0201 	orr.w	r2, r3, #1
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	699a      	ldr	r2, [r3, #24]
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b570:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d00f      	beq.n	800b59c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b582:	f043 0208 	orr.w	r2, r3, #8
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	699a      	ldr	r2, [r3, #24]
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b59a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2200      	movs	r2, #0
 800b5a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800b5ac:	bf00      	nop
 800b5ae:	3714      	adds	r7, #20
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b6:	4770      	bx	lr
 800b5b8:	fffffc90 	.word	0xfffffc90

0800b5bc <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b084      	sub	sp, #16
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	60f8      	str	r0, [r7, #12]
 800b5c4:	60b9      	str	r1, [r7, #8]
 800b5c6:	603b      	str	r3, [r7, #0]
 800b5c8:	4613      	mov	r3, r2
 800b5ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b5cc:	e010      	b.n	800b5f0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b5ce:	f7f6 ffaf 	bl	8002530 <HAL_GetTick>
 800b5d2:	4602      	mov	r2, r0
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	1ad3      	subs	r3, r2, r3
 800b5d8:	69ba      	ldr	r2, [r7, #24]
 800b5da:	429a      	cmp	r2, r3
 800b5dc:	d803      	bhi.n	800b5e6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800b5de:	69bb      	ldr	r3, [r7, #24]
 800b5e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b5e4:	d102      	bne.n	800b5ec <SPI_WaitOnFlagUntilTimeout+0x30>
 800b5e6:	69bb      	ldr	r3, [r7, #24]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d101      	bne.n	800b5f0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800b5ec:	2303      	movs	r3, #3
 800b5ee:	e00f      	b.n	800b610 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	695a      	ldr	r2, [r3, #20]
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	4013      	ands	r3, r2
 800b5fa:	68ba      	ldr	r2, [r7, #8]
 800b5fc:	429a      	cmp	r2, r3
 800b5fe:	bf0c      	ite	eq
 800b600:	2301      	moveq	r3, #1
 800b602:	2300      	movne	r3, #0
 800b604:	b2db      	uxtb	r3, r3
 800b606:	461a      	mov	r2, r3
 800b608:	79fb      	ldrb	r3, [r7, #7]
 800b60a:	429a      	cmp	r2, r3
 800b60c:	d0df      	beq.n	800b5ce <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800b60e:	2300      	movs	r3, #0
}
 800b610:	4618      	mov	r0, r3
 800b612:	3710      	adds	r7, #16
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}

0800b618 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800b618:	b480      	push	{r7}
 800b61a:	b085      	sub	sp, #20
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b624:	095b      	lsrs	r3, r3, #5
 800b626:	3301      	adds	r3, #1
 800b628:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	68db      	ldr	r3, [r3, #12]
 800b62e:	3301      	adds	r3, #1
 800b630:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	3307      	adds	r3, #7
 800b636:	08db      	lsrs	r3, r3, #3
 800b638:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	68fa      	ldr	r2, [r7, #12]
 800b63e:	fb02 f303 	mul.w	r3, r2, r3
}
 800b642:	4618      	mov	r0, r3
 800b644:	3714      	adds	r7, #20
 800b646:	46bd      	mov	sp, r7
 800b648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64c:	4770      	bx	lr

0800b64e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b64e:	b580      	push	{r7, lr}
 800b650:	b082      	sub	sp, #8
 800b652:	af00      	add	r7, sp, #0
 800b654:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d101      	bne.n	800b660 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b65c:	2301      	movs	r3, #1
 800b65e:	e049      	b.n	800b6f4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b666:	b2db      	uxtb	r3, r3
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d106      	bne.n	800b67a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2200      	movs	r2, #0
 800b670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f7f6 fca9 	bl	8001fcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2202      	movs	r2, #2
 800b67e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681a      	ldr	r2, [r3, #0]
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	3304      	adds	r3, #4
 800b68a:	4619      	mov	r1, r3
 800b68c:	4610      	mov	r0, r2
 800b68e:	f000 fd71 	bl	800c174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2201      	movs	r2, #1
 800b696:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2201      	movs	r2, #1
 800b69e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2201      	movs	r2, #1
 800b6a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2201      	movs	r2, #1
 800b6ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2201      	movs	r2, #1
 800b6b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2201      	movs	r2, #1
 800b6be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2201      	movs	r2, #1
 800b6c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2201      	movs	r2, #1
 800b6ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2201      	movs	r2, #1
 800b6d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2201      	movs	r2, #1
 800b6de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2201      	movs	r2, #1
 800b6e6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2201      	movs	r2, #1
 800b6ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b6f2:	2300      	movs	r3, #0
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	3708      	adds	r7, #8
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}

0800b6fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b085      	sub	sp, #20
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b70a:	b2db      	uxtb	r3, r3
 800b70c:	2b01      	cmp	r3, #1
 800b70e:	d001      	beq.n	800b714 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b710:	2301      	movs	r3, #1
 800b712:	e054      	b.n	800b7be <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2202      	movs	r2, #2
 800b718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	68da      	ldr	r2, [r3, #12]
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	f042 0201 	orr.w	r2, r2, #1
 800b72a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	4a26      	ldr	r2, [pc, #152]	; (800b7cc <HAL_TIM_Base_Start_IT+0xd0>)
 800b732:	4293      	cmp	r3, r2
 800b734:	d022      	beq.n	800b77c <HAL_TIM_Base_Start_IT+0x80>
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b73e:	d01d      	beq.n	800b77c <HAL_TIM_Base_Start_IT+0x80>
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	4a22      	ldr	r2, [pc, #136]	; (800b7d0 <HAL_TIM_Base_Start_IT+0xd4>)
 800b746:	4293      	cmp	r3, r2
 800b748:	d018      	beq.n	800b77c <HAL_TIM_Base_Start_IT+0x80>
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	4a21      	ldr	r2, [pc, #132]	; (800b7d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800b750:	4293      	cmp	r3, r2
 800b752:	d013      	beq.n	800b77c <HAL_TIM_Base_Start_IT+0x80>
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	4a1f      	ldr	r2, [pc, #124]	; (800b7d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800b75a:	4293      	cmp	r3, r2
 800b75c:	d00e      	beq.n	800b77c <HAL_TIM_Base_Start_IT+0x80>
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	4a1e      	ldr	r2, [pc, #120]	; (800b7dc <HAL_TIM_Base_Start_IT+0xe0>)
 800b764:	4293      	cmp	r3, r2
 800b766:	d009      	beq.n	800b77c <HAL_TIM_Base_Start_IT+0x80>
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	4a1c      	ldr	r2, [pc, #112]	; (800b7e0 <HAL_TIM_Base_Start_IT+0xe4>)
 800b76e:	4293      	cmp	r3, r2
 800b770:	d004      	beq.n	800b77c <HAL_TIM_Base_Start_IT+0x80>
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	4a1b      	ldr	r2, [pc, #108]	; (800b7e4 <HAL_TIM_Base_Start_IT+0xe8>)
 800b778:	4293      	cmp	r3, r2
 800b77a:	d115      	bne.n	800b7a8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	689a      	ldr	r2, [r3, #8]
 800b782:	4b19      	ldr	r3, [pc, #100]	; (800b7e8 <HAL_TIM_Base_Start_IT+0xec>)
 800b784:	4013      	ands	r3, r2
 800b786:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	2b06      	cmp	r3, #6
 800b78c:	d015      	beq.n	800b7ba <HAL_TIM_Base_Start_IT+0xbe>
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b794:	d011      	beq.n	800b7ba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	681a      	ldr	r2, [r3, #0]
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f042 0201 	orr.w	r2, r2, #1
 800b7a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7a6:	e008      	b.n	800b7ba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	681a      	ldr	r2, [r3, #0]
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	f042 0201 	orr.w	r2, r2, #1
 800b7b6:	601a      	str	r2, [r3, #0]
 800b7b8:	e000      	b.n	800b7bc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b7bc:	2300      	movs	r3, #0
}
 800b7be:	4618      	mov	r0, r3
 800b7c0:	3714      	adds	r7, #20
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c8:	4770      	bx	lr
 800b7ca:	bf00      	nop
 800b7cc:	40010000 	.word	0x40010000
 800b7d0:	40000400 	.word	0x40000400
 800b7d4:	40000800 	.word	0x40000800
 800b7d8:	40000c00 	.word	0x40000c00
 800b7dc:	40010400 	.word	0x40010400
 800b7e0:	40001800 	.word	0x40001800
 800b7e4:	40014000 	.word	0x40014000
 800b7e8:	00010007 	.word	0x00010007

0800b7ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b082      	sub	sp, #8
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d101      	bne.n	800b7fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	e049      	b.n	800b892 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b804:	b2db      	uxtb	r3, r3
 800b806:	2b00      	cmp	r3, #0
 800b808:	d106      	bne.n	800b818 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2200      	movs	r2, #0
 800b80e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f000 f841 	bl	800b89a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2202      	movs	r2, #2
 800b81c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681a      	ldr	r2, [r3, #0]
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	3304      	adds	r3, #4
 800b828:	4619      	mov	r1, r3
 800b82a:	4610      	mov	r0, r2
 800b82c:	f000 fca2 	bl	800c174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2201      	movs	r2, #1
 800b834:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2201      	movs	r2, #1
 800b83c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2201      	movs	r2, #1
 800b844:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2201      	movs	r2, #1
 800b84c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2201      	movs	r2, #1
 800b854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2201      	movs	r2, #1
 800b85c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2201      	movs	r2, #1
 800b864:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2201      	movs	r2, #1
 800b86c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2201      	movs	r2, #1
 800b874:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2201      	movs	r2, #1
 800b87c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2201      	movs	r2, #1
 800b884:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2201      	movs	r2, #1
 800b88c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b890:	2300      	movs	r3, #0
}
 800b892:	4618      	mov	r0, r3
 800b894:	3708      	adds	r7, #8
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}

0800b89a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b89a:	b480      	push	{r7}
 800b89c:	b083      	sub	sp, #12
 800b89e:	af00      	add	r7, sp, #0
 800b8a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b8a2:	bf00      	nop
 800b8a4:	370c      	adds	r7, #12
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ac:	4770      	bx	lr
	...

0800b8b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b084      	sub	sp, #16
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
 800b8b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d109      	bne.n	800b8d4 <HAL_TIM_PWM_Start+0x24>
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b8c6:	b2db      	uxtb	r3, r3
 800b8c8:	2b01      	cmp	r3, #1
 800b8ca:	bf14      	ite	ne
 800b8cc:	2301      	movne	r3, #1
 800b8ce:	2300      	moveq	r3, #0
 800b8d0:	b2db      	uxtb	r3, r3
 800b8d2:	e03c      	b.n	800b94e <HAL_TIM_PWM_Start+0x9e>
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	2b04      	cmp	r3, #4
 800b8d8:	d109      	bne.n	800b8ee <HAL_TIM_PWM_Start+0x3e>
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b8e0:	b2db      	uxtb	r3, r3
 800b8e2:	2b01      	cmp	r3, #1
 800b8e4:	bf14      	ite	ne
 800b8e6:	2301      	movne	r3, #1
 800b8e8:	2300      	moveq	r3, #0
 800b8ea:	b2db      	uxtb	r3, r3
 800b8ec:	e02f      	b.n	800b94e <HAL_TIM_PWM_Start+0x9e>
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	2b08      	cmp	r3, #8
 800b8f2:	d109      	bne.n	800b908 <HAL_TIM_PWM_Start+0x58>
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b8fa:	b2db      	uxtb	r3, r3
 800b8fc:	2b01      	cmp	r3, #1
 800b8fe:	bf14      	ite	ne
 800b900:	2301      	movne	r3, #1
 800b902:	2300      	moveq	r3, #0
 800b904:	b2db      	uxtb	r3, r3
 800b906:	e022      	b.n	800b94e <HAL_TIM_PWM_Start+0x9e>
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	2b0c      	cmp	r3, #12
 800b90c:	d109      	bne.n	800b922 <HAL_TIM_PWM_Start+0x72>
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b914:	b2db      	uxtb	r3, r3
 800b916:	2b01      	cmp	r3, #1
 800b918:	bf14      	ite	ne
 800b91a:	2301      	movne	r3, #1
 800b91c:	2300      	moveq	r3, #0
 800b91e:	b2db      	uxtb	r3, r3
 800b920:	e015      	b.n	800b94e <HAL_TIM_PWM_Start+0x9e>
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	2b10      	cmp	r3, #16
 800b926:	d109      	bne.n	800b93c <HAL_TIM_PWM_Start+0x8c>
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b92e:	b2db      	uxtb	r3, r3
 800b930:	2b01      	cmp	r3, #1
 800b932:	bf14      	ite	ne
 800b934:	2301      	movne	r3, #1
 800b936:	2300      	moveq	r3, #0
 800b938:	b2db      	uxtb	r3, r3
 800b93a:	e008      	b.n	800b94e <HAL_TIM_PWM_Start+0x9e>
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b942:	b2db      	uxtb	r3, r3
 800b944:	2b01      	cmp	r3, #1
 800b946:	bf14      	ite	ne
 800b948:	2301      	movne	r3, #1
 800b94a:	2300      	moveq	r3, #0
 800b94c:	b2db      	uxtb	r3, r3
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d001      	beq.n	800b956 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b952:	2301      	movs	r3, #1
 800b954:	e0a1      	b.n	800ba9a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d104      	bne.n	800b966 <HAL_TIM_PWM_Start+0xb6>
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2202      	movs	r2, #2
 800b960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b964:	e023      	b.n	800b9ae <HAL_TIM_PWM_Start+0xfe>
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	2b04      	cmp	r3, #4
 800b96a:	d104      	bne.n	800b976 <HAL_TIM_PWM_Start+0xc6>
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2202      	movs	r2, #2
 800b970:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b974:	e01b      	b.n	800b9ae <HAL_TIM_PWM_Start+0xfe>
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	2b08      	cmp	r3, #8
 800b97a:	d104      	bne.n	800b986 <HAL_TIM_PWM_Start+0xd6>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2202      	movs	r2, #2
 800b980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b984:	e013      	b.n	800b9ae <HAL_TIM_PWM_Start+0xfe>
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	2b0c      	cmp	r3, #12
 800b98a:	d104      	bne.n	800b996 <HAL_TIM_PWM_Start+0xe6>
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2202      	movs	r2, #2
 800b990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b994:	e00b      	b.n	800b9ae <HAL_TIM_PWM_Start+0xfe>
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	2b10      	cmp	r3, #16
 800b99a:	d104      	bne.n	800b9a6 <HAL_TIM_PWM_Start+0xf6>
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2202      	movs	r2, #2
 800b9a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b9a4:	e003      	b.n	800b9ae <HAL_TIM_PWM_Start+0xfe>
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2202      	movs	r2, #2
 800b9aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	2201      	movs	r2, #1
 800b9b4:	6839      	ldr	r1, [r7, #0]
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f000 ffea 	bl	800c990 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	4a38      	ldr	r2, [pc, #224]	; (800baa4 <HAL_TIM_PWM_Start+0x1f4>)
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	d013      	beq.n	800b9ee <HAL_TIM_PWM_Start+0x13e>
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	4a37      	ldr	r2, [pc, #220]	; (800baa8 <HAL_TIM_PWM_Start+0x1f8>)
 800b9cc:	4293      	cmp	r3, r2
 800b9ce:	d00e      	beq.n	800b9ee <HAL_TIM_PWM_Start+0x13e>
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	4a35      	ldr	r2, [pc, #212]	; (800baac <HAL_TIM_PWM_Start+0x1fc>)
 800b9d6:	4293      	cmp	r3, r2
 800b9d8:	d009      	beq.n	800b9ee <HAL_TIM_PWM_Start+0x13e>
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	4a34      	ldr	r2, [pc, #208]	; (800bab0 <HAL_TIM_PWM_Start+0x200>)
 800b9e0:	4293      	cmp	r3, r2
 800b9e2:	d004      	beq.n	800b9ee <HAL_TIM_PWM_Start+0x13e>
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	4a32      	ldr	r2, [pc, #200]	; (800bab4 <HAL_TIM_PWM_Start+0x204>)
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	d101      	bne.n	800b9f2 <HAL_TIM_PWM_Start+0x142>
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	e000      	b.n	800b9f4 <HAL_TIM_PWM_Start+0x144>
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d007      	beq.n	800ba08 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ba06:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	4a25      	ldr	r2, [pc, #148]	; (800baa4 <HAL_TIM_PWM_Start+0x1f4>)
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	d022      	beq.n	800ba58 <HAL_TIM_PWM_Start+0x1a8>
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba1a:	d01d      	beq.n	800ba58 <HAL_TIM_PWM_Start+0x1a8>
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	4a25      	ldr	r2, [pc, #148]	; (800bab8 <HAL_TIM_PWM_Start+0x208>)
 800ba22:	4293      	cmp	r3, r2
 800ba24:	d018      	beq.n	800ba58 <HAL_TIM_PWM_Start+0x1a8>
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	4a24      	ldr	r2, [pc, #144]	; (800babc <HAL_TIM_PWM_Start+0x20c>)
 800ba2c:	4293      	cmp	r3, r2
 800ba2e:	d013      	beq.n	800ba58 <HAL_TIM_PWM_Start+0x1a8>
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	4a22      	ldr	r2, [pc, #136]	; (800bac0 <HAL_TIM_PWM_Start+0x210>)
 800ba36:	4293      	cmp	r3, r2
 800ba38:	d00e      	beq.n	800ba58 <HAL_TIM_PWM_Start+0x1a8>
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	4a1a      	ldr	r2, [pc, #104]	; (800baa8 <HAL_TIM_PWM_Start+0x1f8>)
 800ba40:	4293      	cmp	r3, r2
 800ba42:	d009      	beq.n	800ba58 <HAL_TIM_PWM_Start+0x1a8>
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	4a1e      	ldr	r2, [pc, #120]	; (800bac4 <HAL_TIM_PWM_Start+0x214>)
 800ba4a:	4293      	cmp	r3, r2
 800ba4c:	d004      	beq.n	800ba58 <HAL_TIM_PWM_Start+0x1a8>
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	4a16      	ldr	r2, [pc, #88]	; (800baac <HAL_TIM_PWM_Start+0x1fc>)
 800ba54:	4293      	cmp	r3, r2
 800ba56:	d115      	bne.n	800ba84 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	689a      	ldr	r2, [r3, #8]
 800ba5e:	4b1a      	ldr	r3, [pc, #104]	; (800bac8 <HAL_TIM_PWM_Start+0x218>)
 800ba60:	4013      	ands	r3, r2
 800ba62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	2b06      	cmp	r3, #6
 800ba68:	d015      	beq.n	800ba96 <HAL_TIM_PWM_Start+0x1e6>
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba70:	d011      	beq.n	800ba96 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	681a      	ldr	r2, [r3, #0]
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	f042 0201 	orr.w	r2, r2, #1
 800ba80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba82:	e008      	b.n	800ba96 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	681a      	ldr	r2, [r3, #0]
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f042 0201 	orr.w	r2, r2, #1
 800ba92:	601a      	str	r2, [r3, #0]
 800ba94:	e000      	b.n	800ba98 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba96:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ba98:	2300      	movs	r3, #0
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	3710      	adds	r7, #16
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}
 800baa2:	bf00      	nop
 800baa4:	40010000 	.word	0x40010000
 800baa8:	40010400 	.word	0x40010400
 800baac:	40014000 	.word	0x40014000
 800bab0:	40014400 	.word	0x40014400
 800bab4:	40014800 	.word	0x40014800
 800bab8:	40000400 	.word	0x40000400
 800babc:	40000800 	.word	0x40000800
 800bac0:	40000c00 	.word	0x40000c00
 800bac4:	40001800 	.word	0x40001800
 800bac8:	00010007 	.word	0x00010007

0800bacc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b082      	sub	sp, #8
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	691b      	ldr	r3, [r3, #16]
 800bada:	f003 0302 	and.w	r3, r3, #2
 800bade:	2b02      	cmp	r3, #2
 800bae0:	d122      	bne.n	800bb28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	68db      	ldr	r3, [r3, #12]
 800bae8:	f003 0302 	and.w	r3, r3, #2
 800baec:	2b02      	cmp	r3, #2
 800baee:	d11b      	bne.n	800bb28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	f06f 0202 	mvn.w	r2, #2
 800baf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2201      	movs	r2, #1
 800bafe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	699b      	ldr	r3, [r3, #24]
 800bb06:	f003 0303 	and.w	r3, r3, #3
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d003      	beq.n	800bb16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f000 fb12 	bl	800c138 <HAL_TIM_IC_CaptureCallback>
 800bb14:	e005      	b.n	800bb22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f000 fb04 	bl	800c124 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f000 fb15 	bl	800c14c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2200      	movs	r2, #0
 800bb26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	691b      	ldr	r3, [r3, #16]
 800bb2e:	f003 0304 	and.w	r3, r3, #4
 800bb32:	2b04      	cmp	r3, #4
 800bb34:	d122      	bne.n	800bb7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	68db      	ldr	r3, [r3, #12]
 800bb3c:	f003 0304 	and.w	r3, r3, #4
 800bb40:	2b04      	cmp	r3, #4
 800bb42:	d11b      	bne.n	800bb7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f06f 0204 	mvn.w	r2, #4
 800bb4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2202      	movs	r2, #2
 800bb52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	699b      	ldr	r3, [r3, #24]
 800bb5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d003      	beq.n	800bb6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	f000 fae8 	bl	800c138 <HAL_TIM_IC_CaptureCallback>
 800bb68:	e005      	b.n	800bb76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f000 fada 	bl	800c124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	f000 faeb 	bl	800c14c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2200      	movs	r2, #0
 800bb7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	691b      	ldr	r3, [r3, #16]
 800bb82:	f003 0308 	and.w	r3, r3, #8
 800bb86:	2b08      	cmp	r3, #8
 800bb88:	d122      	bne.n	800bbd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	68db      	ldr	r3, [r3, #12]
 800bb90:	f003 0308 	and.w	r3, r3, #8
 800bb94:	2b08      	cmp	r3, #8
 800bb96:	d11b      	bne.n	800bbd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f06f 0208 	mvn.w	r2, #8
 800bba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2204      	movs	r2, #4
 800bba6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	69db      	ldr	r3, [r3, #28]
 800bbae:	f003 0303 	and.w	r3, r3, #3
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d003      	beq.n	800bbbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	f000 fabe 	bl	800c138 <HAL_TIM_IC_CaptureCallback>
 800bbbc:	e005      	b.n	800bbca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bbbe:	6878      	ldr	r0, [r7, #4]
 800bbc0:	f000 fab0 	bl	800c124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	f000 fac1 	bl	800c14c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2200      	movs	r2, #0
 800bbce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	691b      	ldr	r3, [r3, #16]
 800bbd6:	f003 0310 	and.w	r3, r3, #16
 800bbda:	2b10      	cmp	r3, #16
 800bbdc:	d122      	bne.n	800bc24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	68db      	ldr	r3, [r3, #12]
 800bbe4:	f003 0310 	and.w	r3, r3, #16
 800bbe8:	2b10      	cmp	r3, #16
 800bbea:	d11b      	bne.n	800bc24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	f06f 0210 	mvn.w	r2, #16
 800bbf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2208      	movs	r2, #8
 800bbfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	69db      	ldr	r3, [r3, #28]
 800bc02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d003      	beq.n	800bc12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f000 fa94 	bl	800c138 <HAL_TIM_IC_CaptureCallback>
 800bc10:	e005      	b.n	800bc1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	f000 fa86 	bl	800c124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f000 fa97 	bl	800c14c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2200      	movs	r2, #0
 800bc22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	691b      	ldr	r3, [r3, #16]
 800bc2a:	f003 0301 	and.w	r3, r3, #1
 800bc2e:	2b01      	cmp	r3, #1
 800bc30:	d10e      	bne.n	800bc50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	68db      	ldr	r3, [r3, #12]
 800bc38:	f003 0301 	and.w	r3, r3, #1
 800bc3c:	2b01      	cmp	r3, #1
 800bc3e:	d107      	bne.n	800bc50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f06f 0201 	mvn.w	r2, #1
 800bc48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f7f5 ffd2 	bl	8001bf4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	691b      	ldr	r3, [r3, #16]
 800bc56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc5a:	2b80      	cmp	r3, #128	; 0x80
 800bc5c:	d10e      	bne.n	800bc7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	68db      	ldr	r3, [r3, #12]
 800bc64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc68:	2b80      	cmp	r3, #128	; 0x80
 800bc6a:	d107      	bne.n	800bc7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bc74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f000 ff48 	bl	800cb0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	691b      	ldr	r3, [r3, #16]
 800bc82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc8a:	d10e      	bne.n	800bcaa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	68db      	ldr	r3, [r3, #12]
 800bc92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc96:	2b80      	cmp	r3, #128	; 0x80
 800bc98:	d107      	bne.n	800bcaa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bca2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	f000 ff3b 	bl	800cb20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	691b      	ldr	r3, [r3, #16]
 800bcb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcb4:	2b40      	cmp	r3, #64	; 0x40
 800bcb6:	d10e      	bne.n	800bcd6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	68db      	ldr	r3, [r3, #12]
 800bcbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcc2:	2b40      	cmp	r3, #64	; 0x40
 800bcc4:	d107      	bne.n	800bcd6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bcce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	f000 fa45 	bl	800c160 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	691b      	ldr	r3, [r3, #16]
 800bcdc:	f003 0320 	and.w	r3, r3, #32
 800bce0:	2b20      	cmp	r3, #32
 800bce2:	d10e      	bne.n	800bd02 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	68db      	ldr	r3, [r3, #12]
 800bcea:	f003 0320 	and.w	r3, r3, #32
 800bcee:	2b20      	cmp	r3, #32
 800bcf0:	d107      	bne.n	800bd02 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	f06f 0220 	mvn.w	r2, #32
 800bcfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bcfc:	6878      	ldr	r0, [r7, #4]
 800bcfe:	f000 fefb 	bl	800caf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bd02:	bf00      	nop
 800bd04:	3708      	adds	r7, #8
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}
	...

0800bd0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b086      	sub	sp, #24
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	60f8      	str	r0, [r7, #12]
 800bd14:	60b9      	str	r1, [r7, #8]
 800bd16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bd18:	2300      	movs	r3, #0
 800bd1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd22:	2b01      	cmp	r3, #1
 800bd24:	d101      	bne.n	800bd2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bd26:	2302      	movs	r3, #2
 800bd28:	e0ff      	b.n	800bf2a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	2201      	movs	r2, #1
 800bd2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2b14      	cmp	r3, #20
 800bd36:	f200 80f0 	bhi.w	800bf1a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bd3a:	a201      	add	r2, pc, #4	; (adr r2, 800bd40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bd3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd40:	0800bd95 	.word	0x0800bd95
 800bd44:	0800bf1b 	.word	0x0800bf1b
 800bd48:	0800bf1b 	.word	0x0800bf1b
 800bd4c:	0800bf1b 	.word	0x0800bf1b
 800bd50:	0800bdd5 	.word	0x0800bdd5
 800bd54:	0800bf1b 	.word	0x0800bf1b
 800bd58:	0800bf1b 	.word	0x0800bf1b
 800bd5c:	0800bf1b 	.word	0x0800bf1b
 800bd60:	0800be17 	.word	0x0800be17
 800bd64:	0800bf1b 	.word	0x0800bf1b
 800bd68:	0800bf1b 	.word	0x0800bf1b
 800bd6c:	0800bf1b 	.word	0x0800bf1b
 800bd70:	0800be57 	.word	0x0800be57
 800bd74:	0800bf1b 	.word	0x0800bf1b
 800bd78:	0800bf1b 	.word	0x0800bf1b
 800bd7c:	0800bf1b 	.word	0x0800bf1b
 800bd80:	0800be99 	.word	0x0800be99
 800bd84:	0800bf1b 	.word	0x0800bf1b
 800bd88:	0800bf1b 	.word	0x0800bf1b
 800bd8c:	0800bf1b 	.word	0x0800bf1b
 800bd90:	0800bed9 	.word	0x0800bed9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	68b9      	ldr	r1, [r7, #8]
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f000 fa84 	bl	800c2a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	699a      	ldr	r2, [r3, #24]
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	f042 0208 	orr.w	r2, r2, #8
 800bdae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	699a      	ldr	r2, [r3, #24]
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f022 0204 	bic.w	r2, r2, #4
 800bdbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	6999      	ldr	r1, [r3, #24]
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	691a      	ldr	r2, [r3, #16]
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	430a      	orrs	r2, r1
 800bdd0:	619a      	str	r2, [r3, #24]
      break;
 800bdd2:	e0a5      	b.n	800bf20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	68b9      	ldr	r1, [r7, #8]
 800bdda:	4618      	mov	r0, r3
 800bddc:	f000 faf4 	bl	800c3c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	699a      	ldr	r2, [r3, #24]
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bdee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	699a      	ldr	r2, [r3, #24]
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bdfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	6999      	ldr	r1, [r3, #24]
 800be06:	68bb      	ldr	r3, [r7, #8]
 800be08:	691b      	ldr	r3, [r3, #16]
 800be0a:	021a      	lsls	r2, r3, #8
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	430a      	orrs	r2, r1
 800be12:	619a      	str	r2, [r3, #24]
      break;
 800be14:	e084      	b.n	800bf20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	68b9      	ldr	r1, [r7, #8]
 800be1c:	4618      	mov	r0, r3
 800be1e:	f000 fb5d 	bl	800c4dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	69da      	ldr	r2, [r3, #28]
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	f042 0208 	orr.w	r2, r2, #8
 800be30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	69da      	ldr	r2, [r3, #28]
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	f022 0204 	bic.w	r2, r2, #4
 800be40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	69d9      	ldr	r1, [r3, #28]
 800be48:	68bb      	ldr	r3, [r7, #8]
 800be4a:	691a      	ldr	r2, [r3, #16]
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	430a      	orrs	r2, r1
 800be52:	61da      	str	r2, [r3, #28]
      break;
 800be54:	e064      	b.n	800bf20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	68b9      	ldr	r1, [r7, #8]
 800be5c:	4618      	mov	r0, r3
 800be5e:	f000 fbc5 	bl	800c5ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	69da      	ldr	r2, [r3, #28]
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800be70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	69da      	ldr	r2, [r3, #28]
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800be80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	69d9      	ldr	r1, [r3, #28]
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	691b      	ldr	r3, [r3, #16]
 800be8c:	021a      	lsls	r2, r3, #8
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	430a      	orrs	r2, r1
 800be94:	61da      	str	r2, [r3, #28]
      break;
 800be96:	e043      	b.n	800bf20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	68b9      	ldr	r1, [r7, #8]
 800be9e:	4618      	mov	r0, r3
 800bea0:	f000 fc0e 	bl	800c6c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f042 0208 	orr.w	r2, r2, #8
 800beb2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	f022 0204 	bic.w	r2, r2, #4
 800bec2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	691a      	ldr	r2, [r3, #16]
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	430a      	orrs	r2, r1
 800bed4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bed6:	e023      	b.n	800bf20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	68b9      	ldr	r1, [r7, #8]
 800bede:	4618      	mov	r0, r3
 800bee0:	f000 fc52 	bl	800c788 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bef2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bf02:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	691b      	ldr	r3, [r3, #16]
 800bf0e:	021a      	lsls	r2, r3, #8
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	430a      	orrs	r2, r1
 800bf16:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bf18:	e002      	b.n	800bf20 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	75fb      	strb	r3, [r7, #23]
      break;
 800bf1e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	2200      	movs	r2, #0
 800bf24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bf28:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	3718      	adds	r7, #24
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}
 800bf32:	bf00      	nop

0800bf34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b084      	sub	sp, #16
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
 800bf3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf48:	2b01      	cmp	r3, #1
 800bf4a:	d101      	bne.n	800bf50 <HAL_TIM_ConfigClockSource+0x1c>
 800bf4c:	2302      	movs	r3, #2
 800bf4e:	e0dc      	b.n	800c10a <HAL_TIM_ConfigClockSource+0x1d6>
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2201      	movs	r2, #1
 800bf54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2202      	movs	r2, #2
 800bf5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	689b      	ldr	r3, [r3, #8]
 800bf66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bf68:	68ba      	ldr	r2, [r7, #8]
 800bf6a:	4b6a      	ldr	r3, [pc, #424]	; (800c114 <HAL_TIM_ConfigClockSource+0x1e0>)
 800bf6c:	4013      	ands	r3, r2
 800bf6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bf76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	68ba      	ldr	r2, [r7, #8]
 800bf7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	4a64      	ldr	r2, [pc, #400]	; (800c118 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bf86:	4293      	cmp	r3, r2
 800bf88:	f000 80a9 	beq.w	800c0de <HAL_TIM_ConfigClockSource+0x1aa>
 800bf8c:	4a62      	ldr	r2, [pc, #392]	; (800c118 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bf8e:	4293      	cmp	r3, r2
 800bf90:	f200 80ae 	bhi.w	800c0f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf94:	4a61      	ldr	r2, [pc, #388]	; (800c11c <HAL_TIM_ConfigClockSource+0x1e8>)
 800bf96:	4293      	cmp	r3, r2
 800bf98:	f000 80a1 	beq.w	800c0de <HAL_TIM_ConfigClockSource+0x1aa>
 800bf9c:	4a5f      	ldr	r2, [pc, #380]	; (800c11c <HAL_TIM_ConfigClockSource+0x1e8>)
 800bf9e:	4293      	cmp	r3, r2
 800bfa0:	f200 80a6 	bhi.w	800c0f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bfa4:	4a5e      	ldr	r2, [pc, #376]	; (800c120 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bfa6:	4293      	cmp	r3, r2
 800bfa8:	f000 8099 	beq.w	800c0de <HAL_TIM_ConfigClockSource+0x1aa>
 800bfac:	4a5c      	ldr	r2, [pc, #368]	; (800c120 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bfae:	4293      	cmp	r3, r2
 800bfb0:	f200 809e 	bhi.w	800c0f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bfb4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bfb8:	f000 8091 	beq.w	800c0de <HAL_TIM_ConfigClockSource+0x1aa>
 800bfbc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bfc0:	f200 8096 	bhi.w	800c0f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bfc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bfc8:	f000 8089 	beq.w	800c0de <HAL_TIM_ConfigClockSource+0x1aa>
 800bfcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bfd0:	f200 808e 	bhi.w	800c0f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bfd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bfd8:	d03e      	beq.n	800c058 <HAL_TIM_ConfigClockSource+0x124>
 800bfda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bfde:	f200 8087 	bhi.w	800c0f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bfe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfe6:	f000 8086 	beq.w	800c0f6 <HAL_TIM_ConfigClockSource+0x1c2>
 800bfea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfee:	d87f      	bhi.n	800c0f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bff0:	2b70      	cmp	r3, #112	; 0x70
 800bff2:	d01a      	beq.n	800c02a <HAL_TIM_ConfigClockSource+0xf6>
 800bff4:	2b70      	cmp	r3, #112	; 0x70
 800bff6:	d87b      	bhi.n	800c0f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bff8:	2b60      	cmp	r3, #96	; 0x60
 800bffa:	d050      	beq.n	800c09e <HAL_TIM_ConfigClockSource+0x16a>
 800bffc:	2b60      	cmp	r3, #96	; 0x60
 800bffe:	d877      	bhi.n	800c0f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c000:	2b50      	cmp	r3, #80	; 0x50
 800c002:	d03c      	beq.n	800c07e <HAL_TIM_ConfigClockSource+0x14a>
 800c004:	2b50      	cmp	r3, #80	; 0x50
 800c006:	d873      	bhi.n	800c0f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c008:	2b40      	cmp	r3, #64	; 0x40
 800c00a:	d058      	beq.n	800c0be <HAL_TIM_ConfigClockSource+0x18a>
 800c00c:	2b40      	cmp	r3, #64	; 0x40
 800c00e:	d86f      	bhi.n	800c0f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c010:	2b30      	cmp	r3, #48	; 0x30
 800c012:	d064      	beq.n	800c0de <HAL_TIM_ConfigClockSource+0x1aa>
 800c014:	2b30      	cmp	r3, #48	; 0x30
 800c016:	d86b      	bhi.n	800c0f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c018:	2b20      	cmp	r3, #32
 800c01a:	d060      	beq.n	800c0de <HAL_TIM_ConfigClockSource+0x1aa>
 800c01c:	2b20      	cmp	r3, #32
 800c01e:	d867      	bhi.n	800c0f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c020:	2b00      	cmp	r3, #0
 800c022:	d05c      	beq.n	800c0de <HAL_TIM_ConfigClockSource+0x1aa>
 800c024:	2b10      	cmp	r3, #16
 800c026:	d05a      	beq.n	800c0de <HAL_TIM_ConfigClockSource+0x1aa>
 800c028:	e062      	b.n	800c0f0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6818      	ldr	r0, [r3, #0]
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	6899      	ldr	r1, [r3, #8]
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	685a      	ldr	r2, [r3, #4]
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	68db      	ldr	r3, [r3, #12]
 800c03a:	f000 fc89 	bl	800c950 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	689b      	ldr	r3, [r3, #8]
 800c044:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c04c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	68ba      	ldr	r2, [r7, #8]
 800c054:	609a      	str	r2, [r3, #8]
      break;
 800c056:	e04f      	b.n	800c0f8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6818      	ldr	r0, [r3, #0]
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	6899      	ldr	r1, [r3, #8]
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	685a      	ldr	r2, [r3, #4]
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	68db      	ldr	r3, [r3, #12]
 800c068:	f000 fc72 	bl	800c950 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	689a      	ldr	r2, [r3, #8]
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c07a:	609a      	str	r2, [r3, #8]
      break;
 800c07c:	e03c      	b.n	800c0f8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	6818      	ldr	r0, [r3, #0]
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	6859      	ldr	r1, [r3, #4]
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	68db      	ldr	r3, [r3, #12]
 800c08a:	461a      	mov	r2, r3
 800c08c:	f000 fbe2 	bl	800c854 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	2150      	movs	r1, #80	; 0x50
 800c096:	4618      	mov	r0, r3
 800c098:	f000 fc3c 	bl	800c914 <TIM_ITRx_SetConfig>
      break;
 800c09c:	e02c      	b.n	800c0f8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6818      	ldr	r0, [r3, #0]
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	6859      	ldr	r1, [r3, #4]
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	68db      	ldr	r3, [r3, #12]
 800c0aa:	461a      	mov	r2, r3
 800c0ac:	f000 fc01 	bl	800c8b2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	2160      	movs	r1, #96	; 0x60
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	f000 fc2c 	bl	800c914 <TIM_ITRx_SetConfig>
      break;
 800c0bc:	e01c      	b.n	800c0f8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6818      	ldr	r0, [r3, #0]
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	6859      	ldr	r1, [r3, #4]
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	68db      	ldr	r3, [r3, #12]
 800c0ca:	461a      	mov	r2, r3
 800c0cc:	f000 fbc2 	bl	800c854 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	2140      	movs	r1, #64	; 0x40
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f000 fc1c 	bl	800c914 <TIM_ITRx_SetConfig>
      break;
 800c0dc:	e00c      	b.n	800c0f8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681a      	ldr	r2, [r3, #0]
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	4619      	mov	r1, r3
 800c0e8:	4610      	mov	r0, r2
 800c0ea:	f000 fc13 	bl	800c914 <TIM_ITRx_SetConfig>
      break;
 800c0ee:	e003      	b.n	800c0f8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c0f0:	2301      	movs	r3, #1
 800c0f2:	73fb      	strb	r3, [r7, #15]
      break;
 800c0f4:	e000      	b.n	800c0f8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c0f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2201      	movs	r2, #1
 800c0fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2200      	movs	r2, #0
 800c104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c108:	7bfb      	ldrb	r3, [r7, #15]
}
 800c10a:	4618      	mov	r0, r3
 800c10c:	3710      	adds	r7, #16
 800c10e:	46bd      	mov	sp, r7
 800c110:	bd80      	pop	{r7, pc}
 800c112:	bf00      	nop
 800c114:	ffceff88 	.word	0xffceff88
 800c118:	00100040 	.word	0x00100040
 800c11c:	00100030 	.word	0x00100030
 800c120:	00100020 	.word	0x00100020

0800c124 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c124:	b480      	push	{r7}
 800c126:	b083      	sub	sp, #12
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c12c:	bf00      	nop
 800c12e:	370c      	adds	r7, #12
 800c130:	46bd      	mov	sp, r7
 800c132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c136:	4770      	bx	lr

0800c138 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c138:	b480      	push	{r7}
 800c13a:	b083      	sub	sp, #12
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c140:	bf00      	nop
 800c142:	370c      	adds	r7, #12
 800c144:	46bd      	mov	sp, r7
 800c146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14a:	4770      	bx	lr

0800c14c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c14c:	b480      	push	{r7}
 800c14e:	b083      	sub	sp, #12
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c154:	bf00      	nop
 800c156:	370c      	adds	r7, #12
 800c158:	46bd      	mov	sp, r7
 800c15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15e:	4770      	bx	lr

0800c160 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c160:	b480      	push	{r7}
 800c162:	b083      	sub	sp, #12
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c168:	bf00      	nop
 800c16a:	370c      	adds	r7, #12
 800c16c:	46bd      	mov	sp, r7
 800c16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c172:	4770      	bx	lr

0800c174 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c174:	b480      	push	{r7}
 800c176:	b085      	sub	sp, #20
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
 800c17c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	4a40      	ldr	r2, [pc, #256]	; (800c288 <TIM_Base_SetConfig+0x114>)
 800c188:	4293      	cmp	r3, r2
 800c18a:	d013      	beq.n	800c1b4 <TIM_Base_SetConfig+0x40>
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c192:	d00f      	beq.n	800c1b4 <TIM_Base_SetConfig+0x40>
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	4a3d      	ldr	r2, [pc, #244]	; (800c28c <TIM_Base_SetConfig+0x118>)
 800c198:	4293      	cmp	r3, r2
 800c19a:	d00b      	beq.n	800c1b4 <TIM_Base_SetConfig+0x40>
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	4a3c      	ldr	r2, [pc, #240]	; (800c290 <TIM_Base_SetConfig+0x11c>)
 800c1a0:	4293      	cmp	r3, r2
 800c1a2:	d007      	beq.n	800c1b4 <TIM_Base_SetConfig+0x40>
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	4a3b      	ldr	r2, [pc, #236]	; (800c294 <TIM_Base_SetConfig+0x120>)
 800c1a8:	4293      	cmp	r3, r2
 800c1aa:	d003      	beq.n	800c1b4 <TIM_Base_SetConfig+0x40>
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	4a3a      	ldr	r2, [pc, #232]	; (800c298 <TIM_Base_SetConfig+0x124>)
 800c1b0:	4293      	cmp	r3, r2
 800c1b2:	d108      	bne.n	800c1c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c1ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	685b      	ldr	r3, [r3, #4]
 800c1c0:	68fa      	ldr	r2, [r7, #12]
 800c1c2:	4313      	orrs	r3, r2
 800c1c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	4a2f      	ldr	r2, [pc, #188]	; (800c288 <TIM_Base_SetConfig+0x114>)
 800c1ca:	4293      	cmp	r3, r2
 800c1cc:	d01f      	beq.n	800c20e <TIM_Base_SetConfig+0x9a>
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c1d4:	d01b      	beq.n	800c20e <TIM_Base_SetConfig+0x9a>
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	4a2c      	ldr	r2, [pc, #176]	; (800c28c <TIM_Base_SetConfig+0x118>)
 800c1da:	4293      	cmp	r3, r2
 800c1dc:	d017      	beq.n	800c20e <TIM_Base_SetConfig+0x9a>
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	4a2b      	ldr	r2, [pc, #172]	; (800c290 <TIM_Base_SetConfig+0x11c>)
 800c1e2:	4293      	cmp	r3, r2
 800c1e4:	d013      	beq.n	800c20e <TIM_Base_SetConfig+0x9a>
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	4a2a      	ldr	r2, [pc, #168]	; (800c294 <TIM_Base_SetConfig+0x120>)
 800c1ea:	4293      	cmp	r3, r2
 800c1ec:	d00f      	beq.n	800c20e <TIM_Base_SetConfig+0x9a>
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	4a29      	ldr	r2, [pc, #164]	; (800c298 <TIM_Base_SetConfig+0x124>)
 800c1f2:	4293      	cmp	r3, r2
 800c1f4:	d00b      	beq.n	800c20e <TIM_Base_SetConfig+0x9a>
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	4a28      	ldr	r2, [pc, #160]	; (800c29c <TIM_Base_SetConfig+0x128>)
 800c1fa:	4293      	cmp	r3, r2
 800c1fc:	d007      	beq.n	800c20e <TIM_Base_SetConfig+0x9a>
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	4a27      	ldr	r2, [pc, #156]	; (800c2a0 <TIM_Base_SetConfig+0x12c>)
 800c202:	4293      	cmp	r3, r2
 800c204:	d003      	beq.n	800c20e <TIM_Base_SetConfig+0x9a>
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	4a26      	ldr	r2, [pc, #152]	; (800c2a4 <TIM_Base_SetConfig+0x130>)
 800c20a:	4293      	cmp	r3, r2
 800c20c:	d108      	bne.n	800c220 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c214:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	68db      	ldr	r3, [r3, #12]
 800c21a:	68fa      	ldr	r2, [r7, #12]
 800c21c:	4313      	orrs	r3, r2
 800c21e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	695b      	ldr	r3, [r3, #20]
 800c22a:	4313      	orrs	r3, r2
 800c22c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	68fa      	ldr	r2, [r7, #12]
 800c232:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	689a      	ldr	r2, [r3, #8]
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	681a      	ldr	r2, [r3, #0]
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	4a10      	ldr	r2, [pc, #64]	; (800c288 <TIM_Base_SetConfig+0x114>)
 800c248:	4293      	cmp	r3, r2
 800c24a:	d00f      	beq.n	800c26c <TIM_Base_SetConfig+0xf8>
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	4a12      	ldr	r2, [pc, #72]	; (800c298 <TIM_Base_SetConfig+0x124>)
 800c250:	4293      	cmp	r3, r2
 800c252:	d00b      	beq.n	800c26c <TIM_Base_SetConfig+0xf8>
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	4a11      	ldr	r2, [pc, #68]	; (800c29c <TIM_Base_SetConfig+0x128>)
 800c258:	4293      	cmp	r3, r2
 800c25a:	d007      	beq.n	800c26c <TIM_Base_SetConfig+0xf8>
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	4a10      	ldr	r2, [pc, #64]	; (800c2a0 <TIM_Base_SetConfig+0x12c>)
 800c260:	4293      	cmp	r3, r2
 800c262:	d003      	beq.n	800c26c <TIM_Base_SetConfig+0xf8>
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	4a0f      	ldr	r2, [pc, #60]	; (800c2a4 <TIM_Base_SetConfig+0x130>)
 800c268:	4293      	cmp	r3, r2
 800c26a:	d103      	bne.n	800c274 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	691a      	ldr	r2, [r3, #16]
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2201      	movs	r2, #1
 800c278:	615a      	str	r2, [r3, #20]
}
 800c27a:	bf00      	nop
 800c27c:	3714      	adds	r7, #20
 800c27e:	46bd      	mov	sp, r7
 800c280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c284:	4770      	bx	lr
 800c286:	bf00      	nop
 800c288:	40010000 	.word	0x40010000
 800c28c:	40000400 	.word	0x40000400
 800c290:	40000800 	.word	0x40000800
 800c294:	40000c00 	.word	0x40000c00
 800c298:	40010400 	.word	0x40010400
 800c29c:	40014000 	.word	0x40014000
 800c2a0:	40014400 	.word	0x40014400
 800c2a4:	40014800 	.word	0x40014800

0800c2a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c2a8:	b480      	push	{r7}
 800c2aa:	b087      	sub	sp, #28
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
 800c2b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	6a1b      	ldr	r3, [r3, #32]
 800c2b6:	f023 0201 	bic.w	r2, r3, #1
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6a1b      	ldr	r3, [r3, #32]
 800c2c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	685b      	ldr	r3, [r3, #4]
 800c2c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	699b      	ldr	r3, [r3, #24]
 800c2ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c2d0:	68fa      	ldr	r2, [r7, #12]
 800c2d2:	4b37      	ldr	r3, [pc, #220]	; (800c3b0 <TIM_OC1_SetConfig+0x108>)
 800c2d4:	4013      	ands	r3, r2
 800c2d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	f023 0303 	bic.w	r3, r3, #3
 800c2de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	68fa      	ldr	r2, [r7, #12]
 800c2e6:	4313      	orrs	r3, r2
 800c2e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c2ea:	697b      	ldr	r3, [r7, #20]
 800c2ec:	f023 0302 	bic.w	r3, r3, #2
 800c2f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	689b      	ldr	r3, [r3, #8]
 800c2f6:	697a      	ldr	r2, [r7, #20]
 800c2f8:	4313      	orrs	r3, r2
 800c2fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	4a2d      	ldr	r2, [pc, #180]	; (800c3b4 <TIM_OC1_SetConfig+0x10c>)
 800c300:	4293      	cmp	r3, r2
 800c302:	d00f      	beq.n	800c324 <TIM_OC1_SetConfig+0x7c>
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	4a2c      	ldr	r2, [pc, #176]	; (800c3b8 <TIM_OC1_SetConfig+0x110>)
 800c308:	4293      	cmp	r3, r2
 800c30a:	d00b      	beq.n	800c324 <TIM_OC1_SetConfig+0x7c>
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	4a2b      	ldr	r2, [pc, #172]	; (800c3bc <TIM_OC1_SetConfig+0x114>)
 800c310:	4293      	cmp	r3, r2
 800c312:	d007      	beq.n	800c324 <TIM_OC1_SetConfig+0x7c>
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	4a2a      	ldr	r2, [pc, #168]	; (800c3c0 <TIM_OC1_SetConfig+0x118>)
 800c318:	4293      	cmp	r3, r2
 800c31a:	d003      	beq.n	800c324 <TIM_OC1_SetConfig+0x7c>
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	4a29      	ldr	r2, [pc, #164]	; (800c3c4 <TIM_OC1_SetConfig+0x11c>)
 800c320:	4293      	cmp	r3, r2
 800c322:	d10c      	bne.n	800c33e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c324:	697b      	ldr	r3, [r7, #20]
 800c326:	f023 0308 	bic.w	r3, r3, #8
 800c32a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	68db      	ldr	r3, [r3, #12]
 800c330:	697a      	ldr	r2, [r7, #20]
 800c332:	4313      	orrs	r3, r2
 800c334:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c336:	697b      	ldr	r3, [r7, #20]
 800c338:	f023 0304 	bic.w	r3, r3, #4
 800c33c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	4a1c      	ldr	r2, [pc, #112]	; (800c3b4 <TIM_OC1_SetConfig+0x10c>)
 800c342:	4293      	cmp	r3, r2
 800c344:	d00f      	beq.n	800c366 <TIM_OC1_SetConfig+0xbe>
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	4a1b      	ldr	r2, [pc, #108]	; (800c3b8 <TIM_OC1_SetConfig+0x110>)
 800c34a:	4293      	cmp	r3, r2
 800c34c:	d00b      	beq.n	800c366 <TIM_OC1_SetConfig+0xbe>
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	4a1a      	ldr	r2, [pc, #104]	; (800c3bc <TIM_OC1_SetConfig+0x114>)
 800c352:	4293      	cmp	r3, r2
 800c354:	d007      	beq.n	800c366 <TIM_OC1_SetConfig+0xbe>
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	4a19      	ldr	r2, [pc, #100]	; (800c3c0 <TIM_OC1_SetConfig+0x118>)
 800c35a:	4293      	cmp	r3, r2
 800c35c:	d003      	beq.n	800c366 <TIM_OC1_SetConfig+0xbe>
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	4a18      	ldr	r2, [pc, #96]	; (800c3c4 <TIM_OC1_SetConfig+0x11c>)
 800c362:	4293      	cmp	r3, r2
 800c364:	d111      	bne.n	800c38a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c366:	693b      	ldr	r3, [r7, #16]
 800c368:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c36c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c36e:	693b      	ldr	r3, [r7, #16]
 800c370:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c374:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	695b      	ldr	r3, [r3, #20]
 800c37a:	693a      	ldr	r2, [r7, #16]
 800c37c:	4313      	orrs	r3, r2
 800c37e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	699b      	ldr	r3, [r3, #24]
 800c384:	693a      	ldr	r2, [r7, #16]
 800c386:	4313      	orrs	r3, r2
 800c388:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	693a      	ldr	r2, [r7, #16]
 800c38e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	68fa      	ldr	r2, [r7, #12]
 800c394:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	685a      	ldr	r2, [r3, #4]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	697a      	ldr	r2, [r7, #20]
 800c3a2:	621a      	str	r2, [r3, #32]
}
 800c3a4:	bf00      	nop
 800c3a6:	371c      	adds	r7, #28
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ae:	4770      	bx	lr
 800c3b0:	fffeff8f 	.word	0xfffeff8f
 800c3b4:	40010000 	.word	0x40010000
 800c3b8:	40010400 	.word	0x40010400
 800c3bc:	40014000 	.word	0x40014000
 800c3c0:	40014400 	.word	0x40014400
 800c3c4:	40014800 	.word	0x40014800

0800c3c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c3c8:	b480      	push	{r7}
 800c3ca:	b087      	sub	sp, #28
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
 800c3d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6a1b      	ldr	r3, [r3, #32]
 800c3d6:	f023 0210 	bic.w	r2, r3, #16
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	6a1b      	ldr	r3, [r3, #32]
 800c3e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	685b      	ldr	r3, [r3, #4]
 800c3e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	699b      	ldr	r3, [r3, #24]
 800c3ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c3f0:	68fa      	ldr	r2, [r7, #12]
 800c3f2:	4b34      	ldr	r3, [pc, #208]	; (800c4c4 <TIM_OC2_SetConfig+0xfc>)
 800c3f4:	4013      	ands	r3, r2
 800c3f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c3fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	021b      	lsls	r3, r3, #8
 800c406:	68fa      	ldr	r2, [r7, #12]
 800c408:	4313      	orrs	r3, r2
 800c40a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c40c:	697b      	ldr	r3, [r7, #20]
 800c40e:	f023 0320 	bic.w	r3, r3, #32
 800c412:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	689b      	ldr	r3, [r3, #8]
 800c418:	011b      	lsls	r3, r3, #4
 800c41a:	697a      	ldr	r2, [r7, #20]
 800c41c:	4313      	orrs	r3, r2
 800c41e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	4a29      	ldr	r2, [pc, #164]	; (800c4c8 <TIM_OC2_SetConfig+0x100>)
 800c424:	4293      	cmp	r3, r2
 800c426:	d003      	beq.n	800c430 <TIM_OC2_SetConfig+0x68>
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	4a28      	ldr	r2, [pc, #160]	; (800c4cc <TIM_OC2_SetConfig+0x104>)
 800c42c:	4293      	cmp	r3, r2
 800c42e:	d10d      	bne.n	800c44c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c430:	697b      	ldr	r3, [r7, #20]
 800c432:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c436:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	68db      	ldr	r3, [r3, #12]
 800c43c:	011b      	lsls	r3, r3, #4
 800c43e:	697a      	ldr	r2, [r7, #20]
 800c440:	4313      	orrs	r3, r2
 800c442:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c444:	697b      	ldr	r3, [r7, #20]
 800c446:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c44a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	4a1e      	ldr	r2, [pc, #120]	; (800c4c8 <TIM_OC2_SetConfig+0x100>)
 800c450:	4293      	cmp	r3, r2
 800c452:	d00f      	beq.n	800c474 <TIM_OC2_SetConfig+0xac>
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	4a1d      	ldr	r2, [pc, #116]	; (800c4cc <TIM_OC2_SetConfig+0x104>)
 800c458:	4293      	cmp	r3, r2
 800c45a:	d00b      	beq.n	800c474 <TIM_OC2_SetConfig+0xac>
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	4a1c      	ldr	r2, [pc, #112]	; (800c4d0 <TIM_OC2_SetConfig+0x108>)
 800c460:	4293      	cmp	r3, r2
 800c462:	d007      	beq.n	800c474 <TIM_OC2_SetConfig+0xac>
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	4a1b      	ldr	r2, [pc, #108]	; (800c4d4 <TIM_OC2_SetConfig+0x10c>)
 800c468:	4293      	cmp	r3, r2
 800c46a:	d003      	beq.n	800c474 <TIM_OC2_SetConfig+0xac>
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	4a1a      	ldr	r2, [pc, #104]	; (800c4d8 <TIM_OC2_SetConfig+0x110>)
 800c470:	4293      	cmp	r3, r2
 800c472:	d113      	bne.n	800c49c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c474:	693b      	ldr	r3, [r7, #16]
 800c476:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c47a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c47c:	693b      	ldr	r3, [r7, #16]
 800c47e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c482:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	695b      	ldr	r3, [r3, #20]
 800c488:	009b      	lsls	r3, r3, #2
 800c48a:	693a      	ldr	r2, [r7, #16]
 800c48c:	4313      	orrs	r3, r2
 800c48e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	699b      	ldr	r3, [r3, #24]
 800c494:	009b      	lsls	r3, r3, #2
 800c496:	693a      	ldr	r2, [r7, #16]
 800c498:	4313      	orrs	r3, r2
 800c49a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	693a      	ldr	r2, [r7, #16]
 800c4a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	68fa      	ldr	r2, [r7, #12]
 800c4a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	685a      	ldr	r2, [r3, #4]
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	697a      	ldr	r2, [r7, #20]
 800c4b4:	621a      	str	r2, [r3, #32]
}
 800c4b6:	bf00      	nop
 800c4b8:	371c      	adds	r7, #28
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c0:	4770      	bx	lr
 800c4c2:	bf00      	nop
 800c4c4:	feff8fff 	.word	0xfeff8fff
 800c4c8:	40010000 	.word	0x40010000
 800c4cc:	40010400 	.word	0x40010400
 800c4d0:	40014000 	.word	0x40014000
 800c4d4:	40014400 	.word	0x40014400
 800c4d8:	40014800 	.word	0x40014800

0800c4dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c4dc:	b480      	push	{r7}
 800c4de:	b087      	sub	sp, #28
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
 800c4e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	6a1b      	ldr	r3, [r3, #32]
 800c4ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6a1b      	ldr	r3, [r3, #32]
 800c4f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	685b      	ldr	r3, [r3, #4]
 800c4fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	69db      	ldr	r3, [r3, #28]
 800c502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c504:	68fa      	ldr	r2, [r7, #12]
 800c506:	4b33      	ldr	r3, [pc, #204]	; (800c5d4 <TIM_OC3_SetConfig+0xf8>)
 800c508:	4013      	ands	r3, r2
 800c50a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	f023 0303 	bic.w	r3, r3, #3
 800c512:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	68fa      	ldr	r2, [r7, #12]
 800c51a:	4313      	orrs	r3, r2
 800c51c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c51e:	697b      	ldr	r3, [r7, #20]
 800c520:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c524:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	689b      	ldr	r3, [r3, #8]
 800c52a:	021b      	lsls	r3, r3, #8
 800c52c:	697a      	ldr	r2, [r7, #20]
 800c52e:	4313      	orrs	r3, r2
 800c530:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	4a28      	ldr	r2, [pc, #160]	; (800c5d8 <TIM_OC3_SetConfig+0xfc>)
 800c536:	4293      	cmp	r3, r2
 800c538:	d003      	beq.n	800c542 <TIM_OC3_SetConfig+0x66>
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	4a27      	ldr	r2, [pc, #156]	; (800c5dc <TIM_OC3_SetConfig+0x100>)
 800c53e:	4293      	cmp	r3, r2
 800c540:	d10d      	bne.n	800c55e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c542:	697b      	ldr	r3, [r7, #20]
 800c544:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c548:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	68db      	ldr	r3, [r3, #12]
 800c54e:	021b      	lsls	r3, r3, #8
 800c550:	697a      	ldr	r2, [r7, #20]
 800c552:	4313      	orrs	r3, r2
 800c554:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c55c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	4a1d      	ldr	r2, [pc, #116]	; (800c5d8 <TIM_OC3_SetConfig+0xfc>)
 800c562:	4293      	cmp	r3, r2
 800c564:	d00f      	beq.n	800c586 <TIM_OC3_SetConfig+0xaa>
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	4a1c      	ldr	r2, [pc, #112]	; (800c5dc <TIM_OC3_SetConfig+0x100>)
 800c56a:	4293      	cmp	r3, r2
 800c56c:	d00b      	beq.n	800c586 <TIM_OC3_SetConfig+0xaa>
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	4a1b      	ldr	r2, [pc, #108]	; (800c5e0 <TIM_OC3_SetConfig+0x104>)
 800c572:	4293      	cmp	r3, r2
 800c574:	d007      	beq.n	800c586 <TIM_OC3_SetConfig+0xaa>
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	4a1a      	ldr	r2, [pc, #104]	; (800c5e4 <TIM_OC3_SetConfig+0x108>)
 800c57a:	4293      	cmp	r3, r2
 800c57c:	d003      	beq.n	800c586 <TIM_OC3_SetConfig+0xaa>
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	4a19      	ldr	r2, [pc, #100]	; (800c5e8 <TIM_OC3_SetConfig+0x10c>)
 800c582:	4293      	cmp	r3, r2
 800c584:	d113      	bne.n	800c5ae <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c586:	693b      	ldr	r3, [r7, #16]
 800c588:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c58c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c58e:	693b      	ldr	r3, [r7, #16]
 800c590:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c594:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	695b      	ldr	r3, [r3, #20]
 800c59a:	011b      	lsls	r3, r3, #4
 800c59c:	693a      	ldr	r2, [r7, #16]
 800c59e:	4313      	orrs	r3, r2
 800c5a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	699b      	ldr	r3, [r3, #24]
 800c5a6:	011b      	lsls	r3, r3, #4
 800c5a8:	693a      	ldr	r2, [r7, #16]
 800c5aa:	4313      	orrs	r3, r2
 800c5ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	693a      	ldr	r2, [r7, #16]
 800c5b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	68fa      	ldr	r2, [r7, #12]
 800c5b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	685a      	ldr	r2, [r3, #4]
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	697a      	ldr	r2, [r7, #20]
 800c5c6:	621a      	str	r2, [r3, #32]
}
 800c5c8:	bf00      	nop
 800c5ca:	371c      	adds	r7, #28
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d2:	4770      	bx	lr
 800c5d4:	fffeff8f 	.word	0xfffeff8f
 800c5d8:	40010000 	.word	0x40010000
 800c5dc:	40010400 	.word	0x40010400
 800c5e0:	40014000 	.word	0x40014000
 800c5e4:	40014400 	.word	0x40014400
 800c5e8:	40014800 	.word	0x40014800

0800c5ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	b087      	sub	sp, #28
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
 800c5f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6a1b      	ldr	r3, [r3, #32]
 800c5fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	6a1b      	ldr	r3, [r3, #32]
 800c606:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	685b      	ldr	r3, [r3, #4]
 800c60c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	69db      	ldr	r3, [r3, #28]
 800c612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c614:	68fa      	ldr	r2, [r7, #12]
 800c616:	4b24      	ldr	r3, [pc, #144]	; (800c6a8 <TIM_OC4_SetConfig+0xbc>)
 800c618:	4013      	ands	r3, r2
 800c61a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c622:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	021b      	lsls	r3, r3, #8
 800c62a:	68fa      	ldr	r2, [r7, #12]
 800c62c:	4313      	orrs	r3, r2
 800c62e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c630:	693b      	ldr	r3, [r7, #16]
 800c632:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c636:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	689b      	ldr	r3, [r3, #8]
 800c63c:	031b      	lsls	r3, r3, #12
 800c63e:	693a      	ldr	r2, [r7, #16]
 800c640:	4313      	orrs	r3, r2
 800c642:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	4a19      	ldr	r2, [pc, #100]	; (800c6ac <TIM_OC4_SetConfig+0xc0>)
 800c648:	4293      	cmp	r3, r2
 800c64a:	d00f      	beq.n	800c66c <TIM_OC4_SetConfig+0x80>
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	4a18      	ldr	r2, [pc, #96]	; (800c6b0 <TIM_OC4_SetConfig+0xc4>)
 800c650:	4293      	cmp	r3, r2
 800c652:	d00b      	beq.n	800c66c <TIM_OC4_SetConfig+0x80>
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	4a17      	ldr	r2, [pc, #92]	; (800c6b4 <TIM_OC4_SetConfig+0xc8>)
 800c658:	4293      	cmp	r3, r2
 800c65a:	d007      	beq.n	800c66c <TIM_OC4_SetConfig+0x80>
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	4a16      	ldr	r2, [pc, #88]	; (800c6b8 <TIM_OC4_SetConfig+0xcc>)
 800c660:	4293      	cmp	r3, r2
 800c662:	d003      	beq.n	800c66c <TIM_OC4_SetConfig+0x80>
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	4a15      	ldr	r2, [pc, #84]	; (800c6bc <TIM_OC4_SetConfig+0xd0>)
 800c668:	4293      	cmp	r3, r2
 800c66a:	d109      	bne.n	800c680 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c66c:	697b      	ldr	r3, [r7, #20]
 800c66e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c672:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	695b      	ldr	r3, [r3, #20]
 800c678:	019b      	lsls	r3, r3, #6
 800c67a:	697a      	ldr	r2, [r7, #20]
 800c67c:	4313      	orrs	r3, r2
 800c67e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	697a      	ldr	r2, [r7, #20]
 800c684:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	68fa      	ldr	r2, [r7, #12]
 800c68a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	685a      	ldr	r2, [r3, #4]
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	693a      	ldr	r2, [r7, #16]
 800c698:	621a      	str	r2, [r3, #32]
}
 800c69a:	bf00      	nop
 800c69c:	371c      	adds	r7, #28
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a4:	4770      	bx	lr
 800c6a6:	bf00      	nop
 800c6a8:	feff8fff 	.word	0xfeff8fff
 800c6ac:	40010000 	.word	0x40010000
 800c6b0:	40010400 	.word	0x40010400
 800c6b4:	40014000 	.word	0x40014000
 800c6b8:	40014400 	.word	0x40014400
 800c6bc:	40014800 	.word	0x40014800

0800c6c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c6c0:	b480      	push	{r7}
 800c6c2:	b087      	sub	sp, #28
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
 800c6c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6a1b      	ldr	r3, [r3, #32]
 800c6ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	6a1b      	ldr	r3, [r3, #32]
 800c6da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	685b      	ldr	r3, [r3, #4]
 800c6e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c6e8:	68fa      	ldr	r2, [r7, #12]
 800c6ea:	4b21      	ldr	r3, [pc, #132]	; (800c770 <TIM_OC5_SetConfig+0xb0>)
 800c6ec:	4013      	ands	r3, r2
 800c6ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	68fa      	ldr	r2, [r7, #12]
 800c6f6:	4313      	orrs	r3, r2
 800c6f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c6fa:	693b      	ldr	r3, [r7, #16]
 800c6fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c700:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	689b      	ldr	r3, [r3, #8]
 800c706:	041b      	lsls	r3, r3, #16
 800c708:	693a      	ldr	r2, [r7, #16]
 800c70a:	4313      	orrs	r3, r2
 800c70c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	4a18      	ldr	r2, [pc, #96]	; (800c774 <TIM_OC5_SetConfig+0xb4>)
 800c712:	4293      	cmp	r3, r2
 800c714:	d00f      	beq.n	800c736 <TIM_OC5_SetConfig+0x76>
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	4a17      	ldr	r2, [pc, #92]	; (800c778 <TIM_OC5_SetConfig+0xb8>)
 800c71a:	4293      	cmp	r3, r2
 800c71c:	d00b      	beq.n	800c736 <TIM_OC5_SetConfig+0x76>
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	4a16      	ldr	r2, [pc, #88]	; (800c77c <TIM_OC5_SetConfig+0xbc>)
 800c722:	4293      	cmp	r3, r2
 800c724:	d007      	beq.n	800c736 <TIM_OC5_SetConfig+0x76>
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	4a15      	ldr	r2, [pc, #84]	; (800c780 <TIM_OC5_SetConfig+0xc0>)
 800c72a:	4293      	cmp	r3, r2
 800c72c:	d003      	beq.n	800c736 <TIM_OC5_SetConfig+0x76>
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	4a14      	ldr	r2, [pc, #80]	; (800c784 <TIM_OC5_SetConfig+0xc4>)
 800c732:	4293      	cmp	r3, r2
 800c734:	d109      	bne.n	800c74a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c736:	697b      	ldr	r3, [r7, #20]
 800c738:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c73c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	695b      	ldr	r3, [r3, #20]
 800c742:	021b      	lsls	r3, r3, #8
 800c744:	697a      	ldr	r2, [r7, #20]
 800c746:	4313      	orrs	r3, r2
 800c748:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	697a      	ldr	r2, [r7, #20]
 800c74e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	68fa      	ldr	r2, [r7, #12]
 800c754:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	685a      	ldr	r2, [r3, #4]
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	693a      	ldr	r2, [r7, #16]
 800c762:	621a      	str	r2, [r3, #32]
}
 800c764:	bf00      	nop
 800c766:	371c      	adds	r7, #28
 800c768:	46bd      	mov	sp, r7
 800c76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76e:	4770      	bx	lr
 800c770:	fffeff8f 	.word	0xfffeff8f
 800c774:	40010000 	.word	0x40010000
 800c778:	40010400 	.word	0x40010400
 800c77c:	40014000 	.word	0x40014000
 800c780:	40014400 	.word	0x40014400
 800c784:	40014800 	.word	0x40014800

0800c788 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c788:	b480      	push	{r7}
 800c78a:	b087      	sub	sp, #28
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
 800c790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	6a1b      	ldr	r3, [r3, #32]
 800c796:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6a1b      	ldr	r3, [r3, #32]
 800c7a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	685b      	ldr	r3, [r3, #4]
 800c7a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c7b0:	68fa      	ldr	r2, [r7, #12]
 800c7b2:	4b22      	ldr	r3, [pc, #136]	; (800c83c <TIM_OC6_SetConfig+0xb4>)
 800c7b4:	4013      	ands	r3, r2
 800c7b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	021b      	lsls	r3, r3, #8
 800c7be:	68fa      	ldr	r2, [r7, #12]
 800c7c0:	4313      	orrs	r3, r2
 800c7c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c7c4:	693b      	ldr	r3, [r7, #16]
 800c7c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c7ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	689b      	ldr	r3, [r3, #8]
 800c7d0:	051b      	lsls	r3, r3, #20
 800c7d2:	693a      	ldr	r2, [r7, #16]
 800c7d4:	4313      	orrs	r3, r2
 800c7d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	4a19      	ldr	r2, [pc, #100]	; (800c840 <TIM_OC6_SetConfig+0xb8>)
 800c7dc:	4293      	cmp	r3, r2
 800c7de:	d00f      	beq.n	800c800 <TIM_OC6_SetConfig+0x78>
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	4a18      	ldr	r2, [pc, #96]	; (800c844 <TIM_OC6_SetConfig+0xbc>)
 800c7e4:	4293      	cmp	r3, r2
 800c7e6:	d00b      	beq.n	800c800 <TIM_OC6_SetConfig+0x78>
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	4a17      	ldr	r2, [pc, #92]	; (800c848 <TIM_OC6_SetConfig+0xc0>)
 800c7ec:	4293      	cmp	r3, r2
 800c7ee:	d007      	beq.n	800c800 <TIM_OC6_SetConfig+0x78>
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	4a16      	ldr	r2, [pc, #88]	; (800c84c <TIM_OC6_SetConfig+0xc4>)
 800c7f4:	4293      	cmp	r3, r2
 800c7f6:	d003      	beq.n	800c800 <TIM_OC6_SetConfig+0x78>
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	4a15      	ldr	r2, [pc, #84]	; (800c850 <TIM_OC6_SetConfig+0xc8>)
 800c7fc:	4293      	cmp	r3, r2
 800c7fe:	d109      	bne.n	800c814 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c800:	697b      	ldr	r3, [r7, #20]
 800c802:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c806:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	695b      	ldr	r3, [r3, #20]
 800c80c:	029b      	lsls	r3, r3, #10
 800c80e:	697a      	ldr	r2, [r7, #20]
 800c810:	4313      	orrs	r3, r2
 800c812:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	697a      	ldr	r2, [r7, #20]
 800c818:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	68fa      	ldr	r2, [r7, #12]
 800c81e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	685a      	ldr	r2, [r3, #4]
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	693a      	ldr	r2, [r7, #16]
 800c82c:	621a      	str	r2, [r3, #32]
}
 800c82e:	bf00      	nop
 800c830:	371c      	adds	r7, #28
 800c832:	46bd      	mov	sp, r7
 800c834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c838:	4770      	bx	lr
 800c83a:	bf00      	nop
 800c83c:	feff8fff 	.word	0xfeff8fff
 800c840:	40010000 	.word	0x40010000
 800c844:	40010400 	.word	0x40010400
 800c848:	40014000 	.word	0x40014000
 800c84c:	40014400 	.word	0x40014400
 800c850:	40014800 	.word	0x40014800

0800c854 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c854:	b480      	push	{r7}
 800c856:	b087      	sub	sp, #28
 800c858:	af00      	add	r7, sp, #0
 800c85a:	60f8      	str	r0, [r7, #12]
 800c85c:	60b9      	str	r1, [r7, #8]
 800c85e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	6a1b      	ldr	r3, [r3, #32]
 800c864:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	6a1b      	ldr	r3, [r3, #32]
 800c86a:	f023 0201 	bic.w	r2, r3, #1
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	699b      	ldr	r3, [r3, #24]
 800c876:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c878:	693b      	ldr	r3, [r7, #16]
 800c87a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c87e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	011b      	lsls	r3, r3, #4
 800c884:	693a      	ldr	r2, [r7, #16]
 800c886:	4313      	orrs	r3, r2
 800c888:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c88a:	697b      	ldr	r3, [r7, #20]
 800c88c:	f023 030a 	bic.w	r3, r3, #10
 800c890:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c892:	697a      	ldr	r2, [r7, #20]
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	4313      	orrs	r3, r2
 800c898:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	693a      	ldr	r2, [r7, #16]
 800c89e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	697a      	ldr	r2, [r7, #20]
 800c8a4:	621a      	str	r2, [r3, #32]
}
 800c8a6:	bf00      	nop
 800c8a8:	371c      	adds	r7, #28
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b0:	4770      	bx	lr

0800c8b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c8b2:	b480      	push	{r7}
 800c8b4:	b087      	sub	sp, #28
 800c8b6:	af00      	add	r7, sp, #0
 800c8b8:	60f8      	str	r0, [r7, #12]
 800c8ba:	60b9      	str	r1, [r7, #8]
 800c8bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	6a1b      	ldr	r3, [r3, #32]
 800c8c2:	f023 0210 	bic.w	r2, r3, #16
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	699b      	ldr	r3, [r3, #24]
 800c8ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	6a1b      	ldr	r3, [r3, #32]
 800c8d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c8d6:	697b      	ldr	r3, [r7, #20]
 800c8d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c8dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	031b      	lsls	r3, r3, #12
 800c8e2:	697a      	ldr	r2, [r7, #20]
 800c8e4:	4313      	orrs	r3, r2
 800c8e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c8e8:	693b      	ldr	r3, [r7, #16]
 800c8ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c8ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	011b      	lsls	r3, r3, #4
 800c8f4:	693a      	ldr	r2, [r7, #16]
 800c8f6:	4313      	orrs	r3, r2
 800c8f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	697a      	ldr	r2, [r7, #20]
 800c8fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	693a      	ldr	r2, [r7, #16]
 800c904:	621a      	str	r2, [r3, #32]
}
 800c906:	bf00      	nop
 800c908:	371c      	adds	r7, #28
 800c90a:	46bd      	mov	sp, r7
 800c90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c910:	4770      	bx	lr
	...

0800c914 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c914:	b480      	push	{r7}
 800c916:	b085      	sub	sp, #20
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
 800c91c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	689b      	ldr	r3, [r3, #8]
 800c922:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c924:	68fa      	ldr	r2, [r7, #12]
 800c926:	4b09      	ldr	r3, [pc, #36]	; (800c94c <TIM_ITRx_SetConfig+0x38>)
 800c928:	4013      	ands	r3, r2
 800c92a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c92c:	683a      	ldr	r2, [r7, #0]
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	4313      	orrs	r3, r2
 800c932:	f043 0307 	orr.w	r3, r3, #7
 800c936:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	68fa      	ldr	r2, [r7, #12]
 800c93c:	609a      	str	r2, [r3, #8]
}
 800c93e:	bf00      	nop
 800c940:	3714      	adds	r7, #20
 800c942:	46bd      	mov	sp, r7
 800c944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c948:	4770      	bx	lr
 800c94a:	bf00      	nop
 800c94c:	ffcfff8f 	.word	0xffcfff8f

0800c950 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c950:	b480      	push	{r7}
 800c952:	b087      	sub	sp, #28
 800c954:	af00      	add	r7, sp, #0
 800c956:	60f8      	str	r0, [r7, #12]
 800c958:	60b9      	str	r1, [r7, #8]
 800c95a:	607a      	str	r2, [r7, #4]
 800c95c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	689b      	ldr	r3, [r3, #8]
 800c962:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c96a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	021a      	lsls	r2, r3, #8
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	431a      	orrs	r2, r3
 800c974:	68bb      	ldr	r3, [r7, #8]
 800c976:	4313      	orrs	r3, r2
 800c978:	697a      	ldr	r2, [r7, #20]
 800c97a:	4313      	orrs	r3, r2
 800c97c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	697a      	ldr	r2, [r7, #20]
 800c982:	609a      	str	r2, [r3, #8]
}
 800c984:	bf00      	nop
 800c986:	371c      	adds	r7, #28
 800c988:	46bd      	mov	sp, r7
 800c98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98e:	4770      	bx	lr

0800c990 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c990:	b480      	push	{r7}
 800c992:	b087      	sub	sp, #28
 800c994:	af00      	add	r7, sp, #0
 800c996:	60f8      	str	r0, [r7, #12]
 800c998:	60b9      	str	r1, [r7, #8]
 800c99a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c99c:	68bb      	ldr	r3, [r7, #8]
 800c99e:	f003 031f 	and.w	r3, r3, #31
 800c9a2:	2201      	movs	r2, #1
 800c9a4:	fa02 f303 	lsl.w	r3, r2, r3
 800c9a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	6a1a      	ldr	r2, [r3, #32]
 800c9ae:	697b      	ldr	r3, [r7, #20]
 800c9b0:	43db      	mvns	r3, r3
 800c9b2:	401a      	ands	r2, r3
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	6a1a      	ldr	r2, [r3, #32]
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	f003 031f 	and.w	r3, r3, #31
 800c9c2:	6879      	ldr	r1, [r7, #4]
 800c9c4:	fa01 f303 	lsl.w	r3, r1, r3
 800c9c8:	431a      	orrs	r2, r3
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	621a      	str	r2, [r3, #32]
}
 800c9ce:	bf00      	nop
 800c9d0:	371c      	adds	r7, #28
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d8:	4770      	bx	lr
	...

0800c9dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c9dc:	b480      	push	{r7}
 800c9de:	b085      	sub	sp, #20
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
 800c9e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c9ec:	2b01      	cmp	r3, #1
 800c9ee:	d101      	bne.n	800c9f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c9f0:	2302      	movs	r3, #2
 800c9f2:	e06d      	b.n	800cad0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2201      	movs	r2, #1
 800c9f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2202      	movs	r2, #2
 800ca00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	685b      	ldr	r3, [r3, #4]
 800ca0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	689b      	ldr	r3, [r3, #8]
 800ca12:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	4a30      	ldr	r2, [pc, #192]	; (800cadc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ca1a:	4293      	cmp	r3, r2
 800ca1c:	d004      	beq.n	800ca28 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	4a2f      	ldr	r2, [pc, #188]	; (800cae0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ca24:	4293      	cmp	r3, r2
 800ca26:	d108      	bne.n	800ca3a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ca2e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	685b      	ldr	r3, [r3, #4]
 800ca34:	68fa      	ldr	r2, [r7, #12]
 800ca36:	4313      	orrs	r3, r2
 800ca38:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca40:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	68fa      	ldr	r2, [r7, #12]
 800ca48:	4313      	orrs	r3, r2
 800ca4a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	68fa      	ldr	r2, [r7, #12]
 800ca52:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	4a20      	ldr	r2, [pc, #128]	; (800cadc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ca5a:	4293      	cmp	r3, r2
 800ca5c:	d022      	beq.n	800caa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca66:	d01d      	beq.n	800caa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	4a1d      	ldr	r2, [pc, #116]	; (800cae4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ca6e:	4293      	cmp	r3, r2
 800ca70:	d018      	beq.n	800caa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	4a1c      	ldr	r2, [pc, #112]	; (800cae8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ca78:	4293      	cmp	r3, r2
 800ca7a:	d013      	beq.n	800caa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	4a1a      	ldr	r2, [pc, #104]	; (800caec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ca82:	4293      	cmp	r3, r2
 800ca84:	d00e      	beq.n	800caa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	4a15      	ldr	r2, [pc, #84]	; (800cae0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ca8c:	4293      	cmp	r3, r2
 800ca8e:	d009      	beq.n	800caa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	4a16      	ldr	r2, [pc, #88]	; (800caf0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ca96:	4293      	cmp	r3, r2
 800ca98:	d004      	beq.n	800caa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	4a15      	ldr	r2, [pc, #84]	; (800caf4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800caa0:	4293      	cmp	r3, r2
 800caa2:	d10c      	bne.n	800cabe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800caaa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	689b      	ldr	r3, [r3, #8]
 800cab0:	68ba      	ldr	r2, [r7, #8]
 800cab2:	4313      	orrs	r3, r2
 800cab4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	68ba      	ldr	r2, [r7, #8]
 800cabc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	2201      	movs	r2, #1
 800cac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	2200      	movs	r2, #0
 800caca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cace:	2300      	movs	r3, #0
}
 800cad0:	4618      	mov	r0, r3
 800cad2:	3714      	adds	r7, #20
 800cad4:	46bd      	mov	sp, r7
 800cad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cada:	4770      	bx	lr
 800cadc:	40010000 	.word	0x40010000
 800cae0:	40010400 	.word	0x40010400
 800cae4:	40000400 	.word	0x40000400
 800cae8:	40000800 	.word	0x40000800
 800caec:	40000c00 	.word	0x40000c00
 800caf0:	40001800 	.word	0x40001800
 800caf4:	40014000 	.word	0x40014000

0800caf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800caf8:	b480      	push	{r7}
 800cafa:	b083      	sub	sp, #12
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cb00:	bf00      	nop
 800cb02:	370c      	adds	r7, #12
 800cb04:	46bd      	mov	sp, r7
 800cb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0a:	4770      	bx	lr

0800cb0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cb0c:	b480      	push	{r7}
 800cb0e:	b083      	sub	sp, #12
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cb14:	bf00      	nop
 800cb16:	370c      	adds	r7, #12
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1e:	4770      	bx	lr

0800cb20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cb20:	b480      	push	{r7}
 800cb22:	b083      	sub	sp, #12
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cb28:	bf00      	nop
 800cb2a:	370c      	adds	r7, #12
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb32:	4770      	bx	lr

0800cb34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b082      	sub	sp, #8
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d101      	bne.n	800cb46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cb42:	2301      	movs	r3, #1
 800cb44:	e042      	b.n	800cbcc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d106      	bne.n	800cb5e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2200      	movs	r2, #0
 800cb54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cb58:	6878      	ldr	r0, [r7, #4]
 800cb5a:	f7f5 facb 	bl	80020f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	2224      	movs	r2, #36	; 0x24
 800cb62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	681a      	ldr	r2, [r3, #0]
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	f022 0201 	bic.w	r2, r2, #1
 800cb74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	f000 fcd6 	bl	800d528 <UART_SetConfig>
 800cb7c:	4603      	mov	r3, r0
 800cb7e:	2b01      	cmp	r3, #1
 800cb80:	d101      	bne.n	800cb86 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800cb82:	2301      	movs	r3, #1
 800cb84:	e022      	b.n	800cbcc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d002      	beq.n	800cb94 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800cb8e:	6878      	ldr	r0, [r7, #4]
 800cb90:	f001 fb36 	bl	800e200 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	685a      	ldr	r2, [r3, #4]
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cba2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	689a      	ldr	r2, [r3, #8]
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cbb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	681a      	ldr	r2, [r3, #0]
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	f042 0201 	orr.w	r2, r2, #1
 800cbc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cbc4:	6878      	ldr	r0, [r7, #4]
 800cbc6:	f001 fbbd 	bl	800e344 <UART_CheckIdleState>
 800cbca:	4603      	mov	r3, r0
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	3708      	adds	r7, #8
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}

0800cbd4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b08a      	sub	sp, #40	; 0x28
 800cbd8:	af02      	add	r7, sp, #8
 800cbda:	60f8      	str	r0, [r7, #12]
 800cbdc:	60b9      	str	r1, [r7, #8]
 800cbde:	603b      	str	r3, [r7, #0]
 800cbe0:	4613      	mov	r3, r2
 800cbe2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cbea:	2b20      	cmp	r3, #32
 800cbec:	f040 8083 	bne.w	800ccf6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800cbf0:	68bb      	ldr	r3, [r7, #8]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d002      	beq.n	800cbfc <HAL_UART_Transmit+0x28>
 800cbf6:	88fb      	ldrh	r3, [r7, #6]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d101      	bne.n	800cc00 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	e07b      	b.n	800ccf8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cc06:	2b01      	cmp	r3, #1
 800cc08:	d101      	bne.n	800cc0e <HAL_UART_Transmit+0x3a>
 800cc0a:	2302      	movs	r3, #2
 800cc0c:	e074      	b.n	800ccf8 <HAL_UART_Transmit+0x124>
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	2201      	movs	r2, #1
 800cc12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	2200      	movs	r2, #0
 800cc1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	2221      	movs	r2, #33	; 0x21
 800cc22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cc26:	f7f5 fc83 	bl	8002530 <HAL_GetTick>
 800cc2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	88fa      	ldrh	r2, [r7, #6]
 800cc30:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	88fa      	ldrh	r2, [r7, #6]
 800cc38:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	689b      	ldr	r3, [r3, #8]
 800cc40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc44:	d108      	bne.n	800cc58 <HAL_UART_Transmit+0x84>
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	691b      	ldr	r3, [r3, #16]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d104      	bne.n	800cc58 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800cc4e:	2300      	movs	r3, #0
 800cc50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cc52:	68bb      	ldr	r3, [r7, #8]
 800cc54:	61bb      	str	r3, [r7, #24]
 800cc56:	e003      	b.n	800cc60 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800cc58:	68bb      	ldr	r3, [r7, #8]
 800cc5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	2200      	movs	r2, #0
 800cc64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800cc68:	e02c      	b.n	800ccc4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cc6a:	683b      	ldr	r3, [r7, #0]
 800cc6c:	9300      	str	r3, [sp, #0]
 800cc6e:	697b      	ldr	r3, [r7, #20]
 800cc70:	2200      	movs	r2, #0
 800cc72:	2180      	movs	r1, #128	; 0x80
 800cc74:	68f8      	ldr	r0, [r7, #12]
 800cc76:	f001 fbb0 	bl	800e3da <UART_WaitOnFlagUntilTimeout>
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d001      	beq.n	800cc84 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800cc80:	2303      	movs	r3, #3
 800cc82:	e039      	b.n	800ccf8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800cc84:	69fb      	ldr	r3, [r7, #28]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d10b      	bne.n	800cca2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cc8a:	69bb      	ldr	r3, [r7, #24]
 800cc8c:	881b      	ldrh	r3, [r3, #0]
 800cc8e:	461a      	mov	r2, r3
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cc98:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800cc9a:	69bb      	ldr	r3, [r7, #24]
 800cc9c:	3302      	adds	r3, #2
 800cc9e:	61bb      	str	r3, [r7, #24]
 800cca0:	e007      	b.n	800ccb2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cca2:	69fb      	ldr	r3, [r7, #28]
 800cca4:	781a      	ldrb	r2, [r3, #0]
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ccac:	69fb      	ldr	r3, [r7, #28]
 800ccae:	3301      	adds	r3, #1
 800ccb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ccb8:	b29b      	uxth	r3, r3
 800ccba:	3b01      	subs	r3, #1
 800ccbc:	b29a      	uxth	r2, r3
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ccca:	b29b      	uxth	r3, r3
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d1cc      	bne.n	800cc6a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	9300      	str	r3, [sp, #0]
 800ccd4:	697b      	ldr	r3, [r7, #20]
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	2140      	movs	r1, #64	; 0x40
 800ccda:	68f8      	ldr	r0, [r7, #12]
 800ccdc:	f001 fb7d 	bl	800e3da <UART_WaitOnFlagUntilTimeout>
 800cce0:	4603      	mov	r3, r0
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d001      	beq.n	800ccea <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800cce6:	2303      	movs	r3, #3
 800cce8:	e006      	b.n	800ccf8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	2220      	movs	r2, #32
 800ccee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	e000      	b.n	800ccf8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800ccf6:	2302      	movs	r3, #2
  }
}
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	3720      	adds	r7, #32
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	bd80      	pop	{r7, pc}

0800cd00 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b08a      	sub	sp, #40	; 0x28
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	60f8      	str	r0, [r7, #12]
 800cd08:	60b9      	str	r1, [r7, #8]
 800cd0a:	4613      	mov	r3, r2
 800cd0c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd14:	2b20      	cmp	r3, #32
 800cd16:	d142      	bne.n	800cd9e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d002      	beq.n	800cd24 <HAL_UART_Receive_IT+0x24>
 800cd1e:	88fb      	ldrh	r3, [r7, #6]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d101      	bne.n	800cd28 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800cd24:	2301      	movs	r3, #1
 800cd26:	e03b      	b.n	800cda0 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cd2e:	2b01      	cmp	r3, #1
 800cd30:	d101      	bne.n	800cd36 <HAL_UART_Receive_IT+0x36>
 800cd32:	2302      	movs	r3, #2
 800cd34:	e034      	b.n	800cda0 <HAL_UART_Receive_IT+0xa0>
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	2201      	movs	r2, #1
 800cd3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	2200      	movs	r2, #0
 800cd42:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	4a17      	ldr	r2, [pc, #92]	; (800cda8 <HAL_UART_Receive_IT+0xa8>)
 800cd4a:	4293      	cmp	r3, r2
 800cd4c:	d01f      	beq.n	800cd8e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	685b      	ldr	r3, [r3, #4]
 800cd54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d018      	beq.n	800cd8e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd62:	697b      	ldr	r3, [r7, #20]
 800cd64:	e853 3f00 	ldrex	r3, [r3]
 800cd68:	613b      	str	r3, [r7, #16]
   return(result);
 800cd6a:	693b      	ldr	r3, [r7, #16]
 800cd6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cd70:	627b      	str	r3, [r7, #36]	; 0x24
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	461a      	mov	r2, r3
 800cd78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd7a:	623b      	str	r3, [r7, #32]
 800cd7c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd7e:	69f9      	ldr	r1, [r7, #28]
 800cd80:	6a3a      	ldr	r2, [r7, #32]
 800cd82:	e841 2300 	strex	r3, r2, [r1]
 800cd86:	61bb      	str	r3, [r7, #24]
   return(result);
 800cd88:	69bb      	ldr	r3, [r7, #24]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d1e6      	bne.n	800cd5c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800cd8e:	88fb      	ldrh	r3, [r7, #6]
 800cd90:	461a      	mov	r2, r3
 800cd92:	68b9      	ldr	r1, [r7, #8]
 800cd94:	68f8      	ldr	r0, [r7, #12]
 800cd96:	f001 fbe9 	bl	800e56c <UART_Start_Receive_IT>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	e000      	b.n	800cda0 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800cd9e:	2302      	movs	r3, #2
  }
}
 800cda0:	4618      	mov	r0, r3
 800cda2:	3728      	adds	r7, #40	; 0x28
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd80      	pop	{r7, pc}
 800cda8:	58000c00 	.word	0x58000c00

0800cdac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b0ba      	sub	sp, #232	; 0xe8
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	69db      	ldr	r3, [r3, #28]
 800cdba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	689b      	ldr	r3, [r3, #8]
 800cdce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cdd2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800cdd6:	f640 030f 	movw	r3, #2063	; 0x80f
 800cdda:	4013      	ands	r3, r2
 800cddc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800cde0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d11b      	bne.n	800ce20 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cde8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cdec:	f003 0320 	and.w	r3, r3, #32
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d015      	beq.n	800ce20 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cdf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cdf8:	f003 0320 	and.w	r3, r3, #32
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d105      	bne.n	800ce0c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ce00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ce04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d009      	beq.n	800ce20 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	f000 835a 	beq.w	800d4ca <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce1a:	6878      	ldr	r0, [r7, #4]
 800ce1c:	4798      	blx	r3
      }
      return;
 800ce1e:	e354      	b.n	800d4ca <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ce20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	f000 811f 	beq.w	800d068 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ce2a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ce2e:	4b8b      	ldr	r3, [pc, #556]	; (800d05c <HAL_UART_IRQHandler+0x2b0>)
 800ce30:	4013      	ands	r3, r2
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d106      	bne.n	800ce44 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ce36:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ce3a:	4b89      	ldr	r3, [pc, #548]	; (800d060 <HAL_UART_IRQHandler+0x2b4>)
 800ce3c:	4013      	ands	r3, r2
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	f000 8112 	beq.w	800d068 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ce44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce48:	f003 0301 	and.w	r3, r3, #1
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d011      	beq.n	800ce74 <HAL_UART_IRQHandler+0xc8>
 800ce50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d00b      	beq.n	800ce74 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	2201      	movs	r2, #1
 800ce62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce6a:	f043 0201 	orr.w	r2, r3, #1
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ce74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce78:	f003 0302 	and.w	r3, r3, #2
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d011      	beq.n	800cea4 <HAL_UART_IRQHandler+0xf8>
 800ce80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ce84:	f003 0301 	and.w	r3, r3, #1
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d00b      	beq.n	800cea4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	2202      	movs	r2, #2
 800ce92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce9a:	f043 0204 	orr.w	r2, r3, #4
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cea8:	f003 0304 	and.w	r3, r3, #4
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d011      	beq.n	800ced4 <HAL_UART_IRQHandler+0x128>
 800ceb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ceb4:	f003 0301 	and.w	r3, r3, #1
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d00b      	beq.n	800ced4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	2204      	movs	r2, #4
 800cec2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ceca:	f043 0202 	orr.w	r2, r3, #2
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ced4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ced8:	f003 0308 	and.w	r3, r3, #8
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d017      	beq.n	800cf10 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cee4:	f003 0320 	and.w	r3, r3, #32
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d105      	bne.n	800cef8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ceec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cef0:	4b5a      	ldr	r3, [pc, #360]	; (800d05c <HAL_UART_IRQHandler+0x2b0>)
 800cef2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d00b      	beq.n	800cf10 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	2208      	movs	r2, #8
 800cefe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf06:	f043 0208 	orr.w	r2, r3, #8
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cf10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d012      	beq.n	800cf42 <HAL_UART_IRQHandler+0x196>
 800cf1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d00c      	beq.n	800cf42 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cf30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf38:	f043 0220 	orr.w	r2, r3, #32
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	f000 82c0 	beq.w	800d4ce <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cf4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf52:	f003 0320 	and.w	r3, r3, #32
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d013      	beq.n	800cf82 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cf5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf5e:	f003 0320 	and.w	r3, r3, #32
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d105      	bne.n	800cf72 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cf66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cf6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d007      	beq.n	800cf82 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d003      	beq.n	800cf82 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf7e:	6878      	ldr	r0, [r7, #4]
 800cf80:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf88:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	689b      	ldr	r3, [r3, #8]
 800cf92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf96:	2b40      	cmp	r3, #64	; 0x40
 800cf98:	d005      	beq.n	800cfa6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cf9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cf9e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d04f      	beq.n	800d046 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cfa6:	6878      	ldr	r0, [r7, #4]
 800cfa8:	f001 fc0a 	bl	800e7c0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	689b      	ldr	r3, [r3, #8]
 800cfb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfb6:	2b40      	cmp	r3, #64	; 0x40
 800cfb8:	d141      	bne.n	800d03e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	3308      	adds	r3, #8
 800cfc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cfc8:	e853 3f00 	ldrex	r3, [r3]
 800cfcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800cfd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cfd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cfd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	3308      	adds	r3, #8
 800cfe2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800cfe6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800cfea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800cff2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800cff6:	e841 2300 	strex	r3, r2, [r1]
 800cffa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800cffe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d002:	2b00      	cmp	r3, #0
 800d004:	d1d9      	bne.n	800cfba <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d013      	beq.n	800d036 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d012:	4a14      	ldr	r2, [pc, #80]	; (800d064 <HAL_UART_IRQHandler+0x2b8>)
 800d014:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d01a:	4618      	mov	r0, r3
 800d01c:	f7f8 faac 	bl	8005578 <HAL_DMA_Abort_IT>
 800d020:	4603      	mov	r3, r0
 800d022:	2b00      	cmp	r3, #0
 800d024:	d017      	beq.n	800d056 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d02a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d02c:	687a      	ldr	r2, [r7, #4]
 800d02e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800d030:	4610      	mov	r0, r2
 800d032:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d034:	e00f      	b.n	800d056 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d036:	6878      	ldr	r0, [r7, #4]
 800d038:	f000 fa60 	bl	800d4fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d03c:	e00b      	b.n	800d056 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	f000 fa5c 	bl	800d4fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d044:	e007      	b.n	800d056 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d046:	6878      	ldr	r0, [r7, #4]
 800d048:	f000 fa58 	bl	800d4fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2200      	movs	r2, #0
 800d050:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800d054:	e23b      	b.n	800d4ce <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d056:	bf00      	nop
    return;
 800d058:	e239      	b.n	800d4ce <HAL_UART_IRQHandler+0x722>
 800d05a:	bf00      	nop
 800d05c:	10000001 	.word	0x10000001
 800d060:	04000120 	.word	0x04000120
 800d064:	0800e88d 	.word	0x0800e88d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d06c:	2b01      	cmp	r3, #1
 800d06e:	f040 81ce 	bne.w	800d40e <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d076:	f003 0310 	and.w	r3, r3, #16
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	f000 81c7 	beq.w	800d40e <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d084:	f003 0310 	and.w	r3, r3, #16
 800d088:	2b00      	cmp	r3, #0
 800d08a:	f000 81c0 	beq.w	800d40e <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	2210      	movs	r2, #16
 800d094:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	689b      	ldr	r3, [r3, #8]
 800d09c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0a0:	2b40      	cmp	r3, #64	; 0x40
 800d0a2:	f040 813b 	bne.w	800d31c <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	4a8b      	ldr	r2, [pc, #556]	; (800d2dc <HAL_UART_IRQHandler+0x530>)
 800d0ae:	4293      	cmp	r3, r2
 800d0b0:	d059      	beq.n	800d166 <HAL_UART_IRQHandler+0x3ba>
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	4a89      	ldr	r2, [pc, #548]	; (800d2e0 <HAL_UART_IRQHandler+0x534>)
 800d0ba:	4293      	cmp	r3, r2
 800d0bc:	d053      	beq.n	800d166 <HAL_UART_IRQHandler+0x3ba>
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	4a87      	ldr	r2, [pc, #540]	; (800d2e4 <HAL_UART_IRQHandler+0x538>)
 800d0c6:	4293      	cmp	r3, r2
 800d0c8:	d04d      	beq.n	800d166 <HAL_UART_IRQHandler+0x3ba>
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	4a85      	ldr	r2, [pc, #532]	; (800d2e8 <HAL_UART_IRQHandler+0x53c>)
 800d0d2:	4293      	cmp	r3, r2
 800d0d4:	d047      	beq.n	800d166 <HAL_UART_IRQHandler+0x3ba>
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	4a83      	ldr	r2, [pc, #524]	; (800d2ec <HAL_UART_IRQHandler+0x540>)
 800d0de:	4293      	cmp	r3, r2
 800d0e0:	d041      	beq.n	800d166 <HAL_UART_IRQHandler+0x3ba>
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	4a81      	ldr	r2, [pc, #516]	; (800d2f0 <HAL_UART_IRQHandler+0x544>)
 800d0ea:	4293      	cmp	r3, r2
 800d0ec:	d03b      	beq.n	800d166 <HAL_UART_IRQHandler+0x3ba>
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	4a7f      	ldr	r2, [pc, #508]	; (800d2f4 <HAL_UART_IRQHandler+0x548>)
 800d0f6:	4293      	cmp	r3, r2
 800d0f8:	d035      	beq.n	800d166 <HAL_UART_IRQHandler+0x3ba>
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	4a7d      	ldr	r2, [pc, #500]	; (800d2f8 <HAL_UART_IRQHandler+0x54c>)
 800d102:	4293      	cmp	r3, r2
 800d104:	d02f      	beq.n	800d166 <HAL_UART_IRQHandler+0x3ba>
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	4a7b      	ldr	r2, [pc, #492]	; (800d2fc <HAL_UART_IRQHandler+0x550>)
 800d10e:	4293      	cmp	r3, r2
 800d110:	d029      	beq.n	800d166 <HAL_UART_IRQHandler+0x3ba>
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	4a79      	ldr	r2, [pc, #484]	; (800d300 <HAL_UART_IRQHandler+0x554>)
 800d11a:	4293      	cmp	r3, r2
 800d11c:	d023      	beq.n	800d166 <HAL_UART_IRQHandler+0x3ba>
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	4a77      	ldr	r2, [pc, #476]	; (800d304 <HAL_UART_IRQHandler+0x558>)
 800d126:	4293      	cmp	r3, r2
 800d128:	d01d      	beq.n	800d166 <HAL_UART_IRQHandler+0x3ba>
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	4a75      	ldr	r2, [pc, #468]	; (800d308 <HAL_UART_IRQHandler+0x55c>)
 800d132:	4293      	cmp	r3, r2
 800d134:	d017      	beq.n	800d166 <HAL_UART_IRQHandler+0x3ba>
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	4a73      	ldr	r2, [pc, #460]	; (800d30c <HAL_UART_IRQHandler+0x560>)
 800d13e:	4293      	cmp	r3, r2
 800d140:	d011      	beq.n	800d166 <HAL_UART_IRQHandler+0x3ba>
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	4a71      	ldr	r2, [pc, #452]	; (800d310 <HAL_UART_IRQHandler+0x564>)
 800d14a:	4293      	cmp	r3, r2
 800d14c:	d00b      	beq.n	800d166 <HAL_UART_IRQHandler+0x3ba>
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	4a6f      	ldr	r2, [pc, #444]	; (800d314 <HAL_UART_IRQHandler+0x568>)
 800d156:	4293      	cmp	r3, r2
 800d158:	d005      	beq.n	800d166 <HAL_UART_IRQHandler+0x3ba>
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	4a6d      	ldr	r2, [pc, #436]	; (800d318 <HAL_UART_IRQHandler+0x56c>)
 800d162:	4293      	cmp	r3, r2
 800d164:	d105      	bne.n	800d172 <HAL_UART_IRQHandler+0x3c6>
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	685b      	ldr	r3, [r3, #4]
 800d16e:	b29b      	uxth	r3, r3
 800d170:	e004      	b.n	800d17c <HAL_UART_IRQHandler+0x3d0>
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	685b      	ldr	r3, [r3, #4]
 800d17a:	b29b      	uxth	r3, r3
 800d17c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d180:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d184:	2b00      	cmp	r3, #0
 800d186:	f000 81a4 	beq.w	800d4d2 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d190:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d194:	429a      	cmp	r2, r3
 800d196:	f080 819c 	bcs.w	800d4d2 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d1a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1a8:	69db      	ldr	r3, [r3, #28]
 800d1aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d1ae:	f000 8086 	beq.w	800d2be <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d1be:	e853 3f00 	ldrex	r3, [r3]
 800d1c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d1c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d1ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d1ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	461a      	mov	r2, r3
 800d1d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d1dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d1e0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1e4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d1e8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d1ec:	e841 2300 	strex	r3, r2, [r1]
 800d1f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d1f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d1da      	bne.n	800d1b2 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	3308      	adds	r3, #8
 800d202:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d204:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d206:	e853 3f00 	ldrex	r3, [r3]
 800d20a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d20c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d20e:	f023 0301 	bic.w	r3, r3, #1
 800d212:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	3308      	adds	r3, #8
 800d21c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d220:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d224:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d226:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d228:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d22c:	e841 2300 	strex	r3, r2, [r1]
 800d230:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d232:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d234:	2b00      	cmp	r3, #0
 800d236:	d1e1      	bne.n	800d1fc <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	3308      	adds	r3, #8
 800d23e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d240:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d242:	e853 3f00 	ldrex	r3, [r3]
 800d246:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d248:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d24a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d24e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	3308      	adds	r3, #8
 800d258:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d25c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d25e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d260:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d262:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d264:	e841 2300 	strex	r3, r2, [r1]
 800d268:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d26a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d1e3      	bne.n	800d238 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	2220      	movs	r2, #32
 800d274:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	2200      	movs	r2, #0
 800d27c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d286:	e853 3f00 	ldrex	r3, [r3]
 800d28a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d28c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d28e:	f023 0310 	bic.w	r3, r3, #16
 800d292:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	461a      	mov	r2, r3
 800d29c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d2a0:	65bb      	str	r3, [r7, #88]	; 0x58
 800d2a2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d2a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d2a8:	e841 2300 	strex	r3, r2, [r1]
 800d2ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d2ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d1e4      	bne.n	800d27e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f7f7 fe3f 	bl	8004f3c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d2ca:	b29b      	uxth	r3, r3
 800d2cc:	1ad3      	subs	r3, r2, r3
 800d2ce:	b29b      	uxth	r3, r3
 800d2d0:	4619      	mov	r1, r3
 800d2d2:	6878      	ldr	r0, [r7, #4]
 800d2d4:	f000 f91c 	bl	800d510 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d2d8:	e0fb      	b.n	800d4d2 <HAL_UART_IRQHandler+0x726>
 800d2da:	bf00      	nop
 800d2dc:	40020010 	.word	0x40020010
 800d2e0:	40020028 	.word	0x40020028
 800d2e4:	40020040 	.word	0x40020040
 800d2e8:	40020058 	.word	0x40020058
 800d2ec:	40020070 	.word	0x40020070
 800d2f0:	40020088 	.word	0x40020088
 800d2f4:	400200a0 	.word	0x400200a0
 800d2f8:	400200b8 	.word	0x400200b8
 800d2fc:	40020410 	.word	0x40020410
 800d300:	40020428 	.word	0x40020428
 800d304:	40020440 	.word	0x40020440
 800d308:	40020458 	.word	0x40020458
 800d30c:	40020470 	.word	0x40020470
 800d310:	40020488 	.word	0x40020488
 800d314:	400204a0 	.word	0x400204a0
 800d318:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d328:	b29b      	uxth	r3, r3
 800d32a:	1ad3      	subs	r3, r2, r3
 800d32c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d336:	b29b      	uxth	r3, r3
 800d338:	2b00      	cmp	r3, #0
 800d33a:	f000 80cc 	beq.w	800d4d6 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800d33e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d342:	2b00      	cmp	r3, #0
 800d344:	f000 80c7 	beq.w	800d4d6 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d34e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d350:	e853 3f00 	ldrex	r3, [r3]
 800d354:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d358:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d35c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	461a      	mov	r2, r3
 800d366:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d36a:	647b      	str	r3, [r7, #68]	; 0x44
 800d36c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d36e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d370:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d372:	e841 2300 	strex	r3, r2, [r1]
 800d376:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d1e4      	bne.n	800d348 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	3308      	adds	r3, #8
 800d384:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d388:	e853 3f00 	ldrex	r3, [r3]
 800d38c:	623b      	str	r3, [r7, #32]
   return(result);
 800d38e:	6a3a      	ldr	r2, [r7, #32]
 800d390:	4b54      	ldr	r3, [pc, #336]	; (800d4e4 <HAL_UART_IRQHandler+0x738>)
 800d392:	4013      	ands	r3, r2
 800d394:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	3308      	adds	r3, #8
 800d39e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d3a2:	633a      	str	r2, [r7, #48]	; 0x30
 800d3a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d3a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3aa:	e841 2300 	strex	r3, r2, [r1]
 800d3ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d1e3      	bne.n	800d37e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	2220      	movs	r2, #32
 800d3ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3d0:	693b      	ldr	r3, [r7, #16]
 800d3d2:	e853 3f00 	ldrex	r3, [r3]
 800d3d6:	60fb      	str	r3, [r7, #12]
   return(result);
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	f023 0310 	bic.w	r3, r3, #16
 800d3de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	461a      	mov	r2, r3
 800d3e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d3ec:	61fb      	str	r3, [r7, #28]
 800d3ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3f0:	69b9      	ldr	r1, [r7, #24]
 800d3f2:	69fa      	ldr	r2, [r7, #28]
 800d3f4:	e841 2300 	strex	r3, r2, [r1]
 800d3f8:	617b      	str	r3, [r7, #20]
   return(result);
 800d3fa:	697b      	ldr	r3, [r7, #20]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d1e4      	bne.n	800d3ca <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d400:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d404:	4619      	mov	r1, r3
 800d406:	6878      	ldr	r0, [r7, #4]
 800d408:	f000 f882 	bl	800d510 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d40c:	e063      	b.n	800d4d6 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d40e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d412:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d416:	2b00      	cmp	r3, #0
 800d418:	d00e      	beq.n	800d438 <HAL_UART_IRQHandler+0x68c>
 800d41a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d41e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d422:	2b00      	cmp	r3, #0
 800d424:	d008      	beq.n	800d438 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d42e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d430:	6878      	ldr	r0, [r7, #4]
 800d432:	f001 fec9 	bl	800f1c8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d436:	e051      	b.n	800d4dc <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d43c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d440:	2b00      	cmp	r3, #0
 800d442:	d014      	beq.n	800d46e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d105      	bne.n	800d45c <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d450:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d454:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d008      	beq.n	800d46e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d460:	2b00      	cmp	r3, #0
 800d462:	d03a      	beq.n	800d4da <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d468:	6878      	ldr	r0, [r7, #4]
 800d46a:	4798      	blx	r3
    }
    return;
 800d46c:	e035      	b.n	800d4da <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d46e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d476:	2b00      	cmp	r3, #0
 800d478:	d009      	beq.n	800d48e <HAL_UART_IRQHandler+0x6e2>
 800d47a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d47e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d482:	2b00      	cmp	r3, #0
 800d484:	d003      	beq.n	800d48e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f001 fa16 	bl	800e8b8 <UART_EndTransmit_IT>
    return;
 800d48c:	e026      	b.n	800d4dc <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d48e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d492:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d496:	2b00      	cmp	r3, #0
 800d498:	d009      	beq.n	800d4ae <HAL_UART_IRQHandler+0x702>
 800d49a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d49e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d003      	beq.n	800d4ae <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d4a6:	6878      	ldr	r0, [r7, #4]
 800d4a8:	f001 fea2 	bl	800f1f0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d4ac:	e016      	b.n	800d4dc <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d4ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d4b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d010      	beq.n	800d4dc <HAL_UART_IRQHandler+0x730>
 800d4ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	da0c      	bge.n	800d4dc <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d4c2:	6878      	ldr	r0, [r7, #4]
 800d4c4:	f001 fe8a 	bl	800f1dc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d4c8:	e008      	b.n	800d4dc <HAL_UART_IRQHandler+0x730>
      return;
 800d4ca:	bf00      	nop
 800d4cc:	e006      	b.n	800d4dc <HAL_UART_IRQHandler+0x730>
    return;
 800d4ce:	bf00      	nop
 800d4d0:	e004      	b.n	800d4dc <HAL_UART_IRQHandler+0x730>
      return;
 800d4d2:	bf00      	nop
 800d4d4:	e002      	b.n	800d4dc <HAL_UART_IRQHandler+0x730>
      return;
 800d4d6:	bf00      	nop
 800d4d8:	e000      	b.n	800d4dc <HAL_UART_IRQHandler+0x730>
    return;
 800d4da:	bf00      	nop
  }
}
 800d4dc:	37e8      	adds	r7, #232	; 0xe8
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bd80      	pop	{r7, pc}
 800d4e2:	bf00      	nop
 800d4e4:	effffffe 	.word	0xeffffffe

0800d4e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d4e8:	b480      	push	{r7}
 800d4ea:	b083      	sub	sp, #12
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d4f0:	bf00      	nop
 800d4f2:	370c      	adds	r7, #12
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fa:	4770      	bx	lr

0800d4fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d4fc:	b480      	push	{r7}
 800d4fe:	b083      	sub	sp, #12
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d504:	bf00      	nop
 800d506:	370c      	adds	r7, #12
 800d508:	46bd      	mov	sp, r7
 800d50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50e:	4770      	bx	lr

0800d510 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d510:	b480      	push	{r7}
 800d512:	b083      	sub	sp, #12
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
 800d518:	460b      	mov	r3, r1
 800d51a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d51c:	bf00      	nop
 800d51e:	370c      	adds	r7, #12
 800d520:	46bd      	mov	sp, r7
 800d522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d526:	4770      	bx	lr

0800d528 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d528:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d52c:	b092      	sub	sp, #72	; 0x48
 800d52e:	af00      	add	r7, sp, #0
 800d530:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d532:	2300      	movs	r3, #0
 800d534:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d538:	697b      	ldr	r3, [r7, #20]
 800d53a:	689a      	ldr	r2, [r3, #8]
 800d53c:	697b      	ldr	r3, [r7, #20]
 800d53e:	691b      	ldr	r3, [r3, #16]
 800d540:	431a      	orrs	r2, r3
 800d542:	697b      	ldr	r3, [r7, #20]
 800d544:	695b      	ldr	r3, [r3, #20]
 800d546:	431a      	orrs	r2, r3
 800d548:	697b      	ldr	r3, [r7, #20]
 800d54a:	69db      	ldr	r3, [r3, #28]
 800d54c:	4313      	orrs	r3, r2
 800d54e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d550:	697b      	ldr	r3, [r7, #20]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	681a      	ldr	r2, [r3, #0]
 800d556:	4bbe      	ldr	r3, [pc, #760]	; (800d850 <UART_SetConfig+0x328>)
 800d558:	4013      	ands	r3, r2
 800d55a:	697a      	ldr	r2, [r7, #20]
 800d55c:	6812      	ldr	r2, [r2, #0]
 800d55e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d560:	430b      	orrs	r3, r1
 800d562:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d564:	697b      	ldr	r3, [r7, #20]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	685b      	ldr	r3, [r3, #4]
 800d56a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d56e:	697b      	ldr	r3, [r7, #20]
 800d570:	68da      	ldr	r2, [r3, #12]
 800d572:	697b      	ldr	r3, [r7, #20]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	430a      	orrs	r2, r1
 800d578:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d57a:	697b      	ldr	r3, [r7, #20]
 800d57c:	699b      	ldr	r3, [r3, #24]
 800d57e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d580:	697b      	ldr	r3, [r7, #20]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	4ab3      	ldr	r2, [pc, #716]	; (800d854 <UART_SetConfig+0x32c>)
 800d586:	4293      	cmp	r3, r2
 800d588:	d004      	beq.n	800d594 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d58a:	697b      	ldr	r3, [r7, #20]
 800d58c:	6a1b      	ldr	r3, [r3, #32]
 800d58e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d590:	4313      	orrs	r3, r2
 800d592:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d594:	697b      	ldr	r3, [r7, #20]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	689a      	ldr	r2, [r3, #8]
 800d59a:	4baf      	ldr	r3, [pc, #700]	; (800d858 <UART_SetConfig+0x330>)
 800d59c:	4013      	ands	r3, r2
 800d59e:	697a      	ldr	r2, [r7, #20]
 800d5a0:	6812      	ldr	r2, [r2, #0]
 800d5a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d5a4:	430b      	orrs	r3, r1
 800d5a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d5a8:	697b      	ldr	r3, [r7, #20]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5ae:	f023 010f 	bic.w	r1, r3, #15
 800d5b2:	697b      	ldr	r3, [r7, #20]
 800d5b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d5b6:	697b      	ldr	r3, [r7, #20]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	430a      	orrs	r2, r1
 800d5bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d5be:	697b      	ldr	r3, [r7, #20]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	4aa6      	ldr	r2, [pc, #664]	; (800d85c <UART_SetConfig+0x334>)
 800d5c4:	4293      	cmp	r3, r2
 800d5c6:	d177      	bne.n	800d6b8 <UART_SetConfig+0x190>
 800d5c8:	4ba5      	ldr	r3, [pc, #660]	; (800d860 <UART_SetConfig+0x338>)
 800d5ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d5d0:	2b28      	cmp	r3, #40	; 0x28
 800d5d2:	d86d      	bhi.n	800d6b0 <UART_SetConfig+0x188>
 800d5d4:	a201      	add	r2, pc, #4	; (adr r2, 800d5dc <UART_SetConfig+0xb4>)
 800d5d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5da:	bf00      	nop
 800d5dc:	0800d681 	.word	0x0800d681
 800d5e0:	0800d6b1 	.word	0x0800d6b1
 800d5e4:	0800d6b1 	.word	0x0800d6b1
 800d5e8:	0800d6b1 	.word	0x0800d6b1
 800d5ec:	0800d6b1 	.word	0x0800d6b1
 800d5f0:	0800d6b1 	.word	0x0800d6b1
 800d5f4:	0800d6b1 	.word	0x0800d6b1
 800d5f8:	0800d6b1 	.word	0x0800d6b1
 800d5fc:	0800d689 	.word	0x0800d689
 800d600:	0800d6b1 	.word	0x0800d6b1
 800d604:	0800d6b1 	.word	0x0800d6b1
 800d608:	0800d6b1 	.word	0x0800d6b1
 800d60c:	0800d6b1 	.word	0x0800d6b1
 800d610:	0800d6b1 	.word	0x0800d6b1
 800d614:	0800d6b1 	.word	0x0800d6b1
 800d618:	0800d6b1 	.word	0x0800d6b1
 800d61c:	0800d691 	.word	0x0800d691
 800d620:	0800d6b1 	.word	0x0800d6b1
 800d624:	0800d6b1 	.word	0x0800d6b1
 800d628:	0800d6b1 	.word	0x0800d6b1
 800d62c:	0800d6b1 	.word	0x0800d6b1
 800d630:	0800d6b1 	.word	0x0800d6b1
 800d634:	0800d6b1 	.word	0x0800d6b1
 800d638:	0800d6b1 	.word	0x0800d6b1
 800d63c:	0800d699 	.word	0x0800d699
 800d640:	0800d6b1 	.word	0x0800d6b1
 800d644:	0800d6b1 	.word	0x0800d6b1
 800d648:	0800d6b1 	.word	0x0800d6b1
 800d64c:	0800d6b1 	.word	0x0800d6b1
 800d650:	0800d6b1 	.word	0x0800d6b1
 800d654:	0800d6b1 	.word	0x0800d6b1
 800d658:	0800d6b1 	.word	0x0800d6b1
 800d65c:	0800d6a1 	.word	0x0800d6a1
 800d660:	0800d6b1 	.word	0x0800d6b1
 800d664:	0800d6b1 	.word	0x0800d6b1
 800d668:	0800d6b1 	.word	0x0800d6b1
 800d66c:	0800d6b1 	.word	0x0800d6b1
 800d670:	0800d6b1 	.word	0x0800d6b1
 800d674:	0800d6b1 	.word	0x0800d6b1
 800d678:	0800d6b1 	.word	0x0800d6b1
 800d67c:	0800d6a9 	.word	0x0800d6a9
 800d680:	2301      	movs	r3, #1
 800d682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d686:	e326      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800d688:	2304      	movs	r3, #4
 800d68a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d68e:	e322      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800d690:	2308      	movs	r3, #8
 800d692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d696:	e31e      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800d698:	2310      	movs	r3, #16
 800d69a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d69e:	e31a      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800d6a0:	2320      	movs	r3, #32
 800d6a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6a6:	e316      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800d6a8:	2340      	movs	r3, #64	; 0x40
 800d6aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6ae:	e312      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800d6b0:	2380      	movs	r3, #128	; 0x80
 800d6b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6b6:	e30e      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800d6b8:	697b      	ldr	r3, [r7, #20]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	4a69      	ldr	r2, [pc, #420]	; (800d864 <UART_SetConfig+0x33c>)
 800d6be:	4293      	cmp	r3, r2
 800d6c0:	d130      	bne.n	800d724 <UART_SetConfig+0x1fc>
 800d6c2:	4b67      	ldr	r3, [pc, #412]	; (800d860 <UART_SetConfig+0x338>)
 800d6c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6c6:	f003 0307 	and.w	r3, r3, #7
 800d6ca:	2b05      	cmp	r3, #5
 800d6cc:	d826      	bhi.n	800d71c <UART_SetConfig+0x1f4>
 800d6ce:	a201      	add	r2, pc, #4	; (adr r2, 800d6d4 <UART_SetConfig+0x1ac>)
 800d6d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6d4:	0800d6ed 	.word	0x0800d6ed
 800d6d8:	0800d6f5 	.word	0x0800d6f5
 800d6dc:	0800d6fd 	.word	0x0800d6fd
 800d6e0:	0800d705 	.word	0x0800d705
 800d6e4:	0800d70d 	.word	0x0800d70d
 800d6e8:	0800d715 	.word	0x0800d715
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6f2:	e2f0      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800d6f4:	2304      	movs	r3, #4
 800d6f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6fa:	e2ec      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800d6fc:	2308      	movs	r3, #8
 800d6fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d702:	e2e8      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800d704:	2310      	movs	r3, #16
 800d706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d70a:	e2e4      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800d70c:	2320      	movs	r3, #32
 800d70e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d712:	e2e0      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800d714:	2340      	movs	r3, #64	; 0x40
 800d716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d71a:	e2dc      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800d71c:	2380      	movs	r3, #128	; 0x80
 800d71e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d722:	e2d8      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800d724:	697b      	ldr	r3, [r7, #20]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	4a4f      	ldr	r2, [pc, #316]	; (800d868 <UART_SetConfig+0x340>)
 800d72a:	4293      	cmp	r3, r2
 800d72c:	d130      	bne.n	800d790 <UART_SetConfig+0x268>
 800d72e:	4b4c      	ldr	r3, [pc, #304]	; (800d860 <UART_SetConfig+0x338>)
 800d730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d732:	f003 0307 	and.w	r3, r3, #7
 800d736:	2b05      	cmp	r3, #5
 800d738:	d826      	bhi.n	800d788 <UART_SetConfig+0x260>
 800d73a:	a201      	add	r2, pc, #4	; (adr r2, 800d740 <UART_SetConfig+0x218>)
 800d73c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d740:	0800d759 	.word	0x0800d759
 800d744:	0800d761 	.word	0x0800d761
 800d748:	0800d769 	.word	0x0800d769
 800d74c:	0800d771 	.word	0x0800d771
 800d750:	0800d779 	.word	0x0800d779
 800d754:	0800d781 	.word	0x0800d781
 800d758:	2300      	movs	r3, #0
 800d75a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d75e:	e2ba      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800d760:	2304      	movs	r3, #4
 800d762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d766:	e2b6      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800d768:	2308      	movs	r3, #8
 800d76a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d76e:	e2b2      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800d770:	2310      	movs	r3, #16
 800d772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d776:	e2ae      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800d778:	2320      	movs	r3, #32
 800d77a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d77e:	e2aa      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800d780:	2340      	movs	r3, #64	; 0x40
 800d782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d786:	e2a6      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800d788:	2380      	movs	r3, #128	; 0x80
 800d78a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d78e:	e2a2      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800d790:	697b      	ldr	r3, [r7, #20]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	4a35      	ldr	r2, [pc, #212]	; (800d86c <UART_SetConfig+0x344>)
 800d796:	4293      	cmp	r3, r2
 800d798:	d130      	bne.n	800d7fc <UART_SetConfig+0x2d4>
 800d79a:	4b31      	ldr	r3, [pc, #196]	; (800d860 <UART_SetConfig+0x338>)
 800d79c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d79e:	f003 0307 	and.w	r3, r3, #7
 800d7a2:	2b05      	cmp	r3, #5
 800d7a4:	d826      	bhi.n	800d7f4 <UART_SetConfig+0x2cc>
 800d7a6:	a201      	add	r2, pc, #4	; (adr r2, 800d7ac <UART_SetConfig+0x284>)
 800d7a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7ac:	0800d7c5 	.word	0x0800d7c5
 800d7b0:	0800d7cd 	.word	0x0800d7cd
 800d7b4:	0800d7d5 	.word	0x0800d7d5
 800d7b8:	0800d7dd 	.word	0x0800d7dd
 800d7bc:	0800d7e5 	.word	0x0800d7e5
 800d7c0:	0800d7ed 	.word	0x0800d7ed
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7ca:	e284      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800d7cc:	2304      	movs	r3, #4
 800d7ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7d2:	e280      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800d7d4:	2308      	movs	r3, #8
 800d7d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7da:	e27c      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800d7dc:	2310      	movs	r3, #16
 800d7de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7e2:	e278      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800d7e4:	2320      	movs	r3, #32
 800d7e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7ea:	e274      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800d7ec:	2340      	movs	r3, #64	; 0x40
 800d7ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7f2:	e270      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800d7f4:	2380      	movs	r3, #128	; 0x80
 800d7f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7fa:	e26c      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800d7fc:	697b      	ldr	r3, [r7, #20]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	4a1b      	ldr	r2, [pc, #108]	; (800d870 <UART_SetConfig+0x348>)
 800d802:	4293      	cmp	r3, r2
 800d804:	d142      	bne.n	800d88c <UART_SetConfig+0x364>
 800d806:	4b16      	ldr	r3, [pc, #88]	; (800d860 <UART_SetConfig+0x338>)
 800d808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d80a:	f003 0307 	and.w	r3, r3, #7
 800d80e:	2b05      	cmp	r3, #5
 800d810:	d838      	bhi.n	800d884 <UART_SetConfig+0x35c>
 800d812:	a201      	add	r2, pc, #4	; (adr r2, 800d818 <UART_SetConfig+0x2f0>)
 800d814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d818:	0800d831 	.word	0x0800d831
 800d81c:	0800d839 	.word	0x0800d839
 800d820:	0800d841 	.word	0x0800d841
 800d824:	0800d849 	.word	0x0800d849
 800d828:	0800d875 	.word	0x0800d875
 800d82c:	0800d87d 	.word	0x0800d87d
 800d830:	2300      	movs	r3, #0
 800d832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d836:	e24e      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800d838:	2304      	movs	r3, #4
 800d83a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d83e:	e24a      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800d840:	2308      	movs	r3, #8
 800d842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d846:	e246      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800d848:	2310      	movs	r3, #16
 800d84a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d84e:	e242      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800d850:	cfff69f3 	.word	0xcfff69f3
 800d854:	58000c00 	.word	0x58000c00
 800d858:	11fff4ff 	.word	0x11fff4ff
 800d85c:	40011000 	.word	0x40011000
 800d860:	58024400 	.word	0x58024400
 800d864:	40004400 	.word	0x40004400
 800d868:	40004800 	.word	0x40004800
 800d86c:	40004c00 	.word	0x40004c00
 800d870:	40005000 	.word	0x40005000
 800d874:	2320      	movs	r3, #32
 800d876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d87a:	e22c      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800d87c:	2340      	movs	r3, #64	; 0x40
 800d87e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d882:	e228      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800d884:	2380      	movs	r3, #128	; 0x80
 800d886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d88a:	e224      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800d88c:	697b      	ldr	r3, [r7, #20]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	4ab1      	ldr	r2, [pc, #708]	; (800db58 <UART_SetConfig+0x630>)
 800d892:	4293      	cmp	r3, r2
 800d894:	d176      	bne.n	800d984 <UART_SetConfig+0x45c>
 800d896:	4bb1      	ldr	r3, [pc, #708]	; (800db5c <UART_SetConfig+0x634>)
 800d898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d89a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d89e:	2b28      	cmp	r3, #40	; 0x28
 800d8a0:	d86c      	bhi.n	800d97c <UART_SetConfig+0x454>
 800d8a2:	a201      	add	r2, pc, #4	; (adr r2, 800d8a8 <UART_SetConfig+0x380>)
 800d8a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8a8:	0800d94d 	.word	0x0800d94d
 800d8ac:	0800d97d 	.word	0x0800d97d
 800d8b0:	0800d97d 	.word	0x0800d97d
 800d8b4:	0800d97d 	.word	0x0800d97d
 800d8b8:	0800d97d 	.word	0x0800d97d
 800d8bc:	0800d97d 	.word	0x0800d97d
 800d8c0:	0800d97d 	.word	0x0800d97d
 800d8c4:	0800d97d 	.word	0x0800d97d
 800d8c8:	0800d955 	.word	0x0800d955
 800d8cc:	0800d97d 	.word	0x0800d97d
 800d8d0:	0800d97d 	.word	0x0800d97d
 800d8d4:	0800d97d 	.word	0x0800d97d
 800d8d8:	0800d97d 	.word	0x0800d97d
 800d8dc:	0800d97d 	.word	0x0800d97d
 800d8e0:	0800d97d 	.word	0x0800d97d
 800d8e4:	0800d97d 	.word	0x0800d97d
 800d8e8:	0800d95d 	.word	0x0800d95d
 800d8ec:	0800d97d 	.word	0x0800d97d
 800d8f0:	0800d97d 	.word	0x0800d97d
 800d8f4:	0800d97d 	.word	0x0800d97d
 800d8f8:	0800d97d 	.word	0x0800d97d
 800d8fc:	0800d97d 	.word	0x0800d97d
 800d900:	0800d97d 	.word	0x0800d97d
 800d904:	0800d97d 	.word	0x0800d97d
 800d908:	0800d965 	.word	0x0800d965
 800d90c:	0800d97d 	.word	0x0800d97d
 800d910:	0800d97d 	.word	0x0800d97d
 800d914:	0800d97d 	.word	0x0800d97d
 800d918:	0800d97d 	.word	0x0800d97d
 800d91c:	0800d97d 	.word	0x0800d97d
 800d920:	0800d97d 	.word	0x0800d97d
 800d924:	0800d97d 	.word	0x0800d97d
 800d928:	0800d96d 	.word	0x0800d96d
 800d92c:	0800d97d 	.word	0x0800d97d
 800d930:	0800d97d 	.word	0x0800d97d
 800d934:	0800d97d 	.word	0x0800d97d
 800d938:	0800d97d 	.word	0x0800d97d
 800d93c:	0800d97d 	.word	0x0800d97d
 800d940:	0800d97d 	.word	0x0800d97d
 800d944:	0800d97d 	.word	0x0800d97d
 800d948:	0800d975 	.word	0x0800d975
 800d94c:	2301      	movs	r3, #1
 800d94e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d952:	e1c0      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800d954:	2304      	movs	r3, #4
 800d956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d95a:	e1bc      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800d95c:	2308      	movs	r3, #8
 800d95e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d962:	e1b8      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800d964:	2310      	movs	r3, #16
 800d966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d96a:	e1b4      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800d96c:	2320      	movs	r3, #32
 800d96e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d972:	e1b0      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800d974:	2340      	movs	r3, #64	; 0x40
 800d976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d97a:	e1ac      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800d97c:	2380      	movs	r3, #128	; 0x80
 800d97e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d982:	e1a8      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800d984:	697b      	ldr	r3, [r7, #20]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	4a75      	ldr	r2, [pc, #468]	; (800db60 <UART_SetConfig+0x638>)
 800d98a:	4293      	cmp	r3, r2
 800d98c:	d130      	bne.n	800d9f0 <UART_SetConfig+0x4c8>
 800d98e:	4b73      	ldr	r3, [pc, #460]	; (800db5c <UART_SetConfig+0x634>)
 800d990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d992:	f003 0307 	and.w	r3, r3, #7
 800d996:	2b05      	cmp	r3, #5
 800d998:	d826      	bhi.n	800d9e8 <UART_SetConfig+0x4c0>
 800d99a:	a201      	add	r2, pc, #4	; (adr r2, 800d9a0 <UART_SetConfig+0x478>)
 800d99c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9a0:	0800d9b9 	.word	0x0800d9b9
 800d9a4:	0800d9c1 	.word	0x0800d9c1
 800d9a8:	0800d9c9 	.word	0x0800d9c9
 800d9ac:	0800d9d1 	.word	0x0800d9d1
 800d9b0:	0800d9d9 	.word	0x0800d9d9
 800d9b4:	0800d9e1 	.word	0x0800d9e1
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9be:	e18a      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800d9c0:	2304      	movs	r3, #4
 800d9c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9c6:	e186      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800d9c8:	2308      	movs	r3, #8
 800d9ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9ce:	e182      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800d9d0:	2310      	movs	r3, #16
 800d9d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9d6:	e17e      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800d9d8:	2320      	movs	r3, #32
 800d9da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9de:	e17a      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800d9e0:	2340      	movs	r3, #64	; 0x40
 800d9e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9e6:	e176      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800d9e8:	2380      	movs	r3, #128	; 0x80
 800d9ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9ee:	e172      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800d9f0:	697b      	ldr	r3, [r7, #20]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	4a5b      	ldr	r2, [pc, #364]	; (800db64 <UART_SetConfig+0x63c>)
 800d9f6:	4293      	cmp	r3, r2
 800d9f8:	d130      	bne.n	800da5c <UART_SetConfig+0x534>
 800d9fa:	4b58      	ldr	r3, [pc, #352]	; (800db5c <UART_SetConfig+0x634>)
 800d9fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9fe:	f003 0307 	and.w	r3, r3, #7
 800da02:	2b05      	cmp	r3, #5
 800da04:	d826      	bhi.n	800da54 <UART_SetConfig+0x52c>
 800da06:	a201      	add	r2, pc, #4	; (adr r2, 800da0c <UART_SetConfig+0x4e4>)
 800da08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da0c:	0800da25 	.word	0x0800da25
 800da10:	0800da2d 	.word	0x0800da2d
 800da14:	0800da35 	.word	0x0800da35
 800da18:	0800da3d 	.word	0x0800da3d
 800da1c:	0800da45 	.word	0x0800da45
 800da20:	0800da4d 	.word	0x0800da4d
 800da24:	2300      	movs	r3, #0
 800da26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da2a:	e154      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800da2c:	2304      	movs	r3, #4
 800da2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da32:	e150      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800da34:	2308      	movs	r3, #8
 800da36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da3a:	e14c      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800da3c:	2310      	movs	r3, #16
 800da3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da42:	e148      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800da44:	2320      	movs	r3, #32
 800da46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da4a:	e144      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800da4c:	2340      	movs	r3, #64	; 0x40
 800da4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da52:	e140      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800da54:	2380      	movs	r3, #128	; 0x80
 800da56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da5a:	e13c      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800da5c:	697b      	ldr	r3, [r7, #20]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	4a41      	ldr	r2, [pc, #260]	; (800db68 <UART_SetConfig+0x640>)
 800da62:	4293      	cmp	r3, r2
 800da64:	f040 8082 	bne.w	800db6c <UART_SetConfig+0x644>
 800da68:	4b3c      	ldr	r3, [pc, #240]	; (800db5c <UART_SetConfig+0x634>)
 800da6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800da70:	2b28      	cmp	r3, #40	; 0x28
 800da72:	d86d      	bhi.n	800db50 <UART_SetConfig+0x628>
 800da74:	a201      	add	r2, pc, #4	; (adr r2, 800da7c <UART_SetConfig+0x554>)
 800da76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da7a:	bf00      	nop
 800da7c:	0800db21 	.word	0x0800db21
 800da80:	0800db51 	.word	0x0800db51
 800da84:	0800db51 	.word	0x0800db51
 800da88:	0800db51 	.word	0x0800db51
 800da8c:	0800db51 	.word	0x0800db51
 800da90:	0800db51 	.word	0x0800db51
 800da94:	0800db51 	.word	0x0800db51
 800da98:	0800db51 	.word	0x0800db51
 800da9c:	0800db29 	.word	0x0800db29
 800daa0:	0800db51 	.word	0x0800db51
 800daa4:	0800db51 	.word	0x0800db51
 800daa8:	0800db51 	.word	0x0800db51
 800daac:	0800db51 	.word	0x0800db51
 800dab0:	0800db51 	.word	0x0800db51
 800dab4:	0800db51 	.word	0x0800db51
 800dab8:	0800db51 	.word	0x0800db51
 800dabc:	0800db31 	.word	0x0800db31
 800dac0:	0800db51 	.word	0x0800db51
 800dac4:	0800db51 	.word	0x0800db51
 800dac8:	0800db51 	.word	0x0800db51
 800dacc:	0800db51 	.word	0x0800db51
 800dad0:	0800db51 	.word	0x0800db51
 800dad4:	0800db51 	.word	0x0800db51
 800dad8:	0800db51 	.word	0x0800db51
 800dadc:	0800db39 	.word	0x0800db39
 800dae0:	0800db51 	.word	0x0800db51
 800dae4:	0800db51 	.word	0x0800db51
 800dae8:	0800db51 	.word	0x0800db51
 800daec:	0800db51 	.word	0x0800db51
 800daf0:	0800db51 	.word	0x0800db51
 800daf4:	0800db51 	.word	0x0800db51
 800daf8:	0800db51 	.word	0x0800db51
 800dafc:	0800db41 	.word	0x0800db41
 800db00:	0800db51 	.word	0x0800db51
 800db04:	0800db51 	.word	0x0800db51
 800db08:	0800db51 	.word	0x0800db51
 800db0c:	0800db51 	.word	0x0800db51
 800db10:	0800db51 	.word	0x0800db51
 800db14:	0800db51 	.word	0x0800db51
 800db18:	0800db51 	.word	0x0800db51
 800db1c:	0800db49 	.word	0x0800db49
 800db20:	2301      	movs	r3, #1
 800db22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db26:	e0d6      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800db28:	2304      	movs	r3, #4
 800db2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db2e:	e0d2      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800db30:	2308      	movs	r3, #8
 800db32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db36:	e0ce      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800db38:	2310      	movs	r3, #16
 800db3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db3e:	e0ca      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800db40:	2320      	movs	r3, #32
 800db42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db46:	e0c6      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800db48:	2340      	movs	r3, #64	; 0x40
 800db4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db4e:	e0c2      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800db50:	2380      	movs	r3, #128	; 0x80
 800db52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db56:	e0be      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800db58:	40011400 	.word	0x40011400
 800db5c:	58024400 	.word	0x58024400
 800db60:	40007800 	.word	0x40007800
 800db64:	40007c00 	.word	0x40007c00
 800db68:	40011800 	.word	0x40011800
 800db6c:	697b      	ldr	r3, [r7, #20]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	4aad      	ldr	r2, [pc, #692]	; (800de28 <UART_SetConfig+0x900>)
 800db72:	4293      	cmp	r3, r2
 800db74:	d176      	bne.n	800dc64 <UART_SetConfig+0x73c>
 800db76:	4bad      	ldr	r3, [pc, #692]	; (800de2c <UART_SetConfig+0x904>)
 800db78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800db7e:	2b28      	cmp	r3, #40	; 0x28
 800db80:	d86c      	bhi.n	800dc5c <UART_SetConfig+0x734>
 800db82:	a201      	add	r2, pc, #4	; (adr r2, 800db88 <UART_SetConfig+0x660>)
 800db84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db88:	0800dc2d 	.word	0x0800dc2d
 800db8c:	0800dc5d 	.word	0x0800dc5d
 800db90:	0800dc5d 	.word	0x0800dc5d
 800db94:	0800dc5d 	.word	0x0800dc5d
 800db98:	0800dc5d 	.word	0x0800dc5d
 800db9c:	0800dc5d 	.word	0x0800dc5d
 800dba0:	0800dc5d 	.word	0x0800dc5d
 800dba4:	0800dc5d 	.word	0x0800dc5d
 800dba8:	0800dc35 	.word	0x0800dc35
 800dbac:	0800dc5d 	.word	0x0800dc5d
 800dbb0:	0800dc5d 	.word	0x0800dc5d
 800dbb4:	0800dc5d 	.word	0x0800dc5d
 800dbb8:	0800dc5d 	.word	0x0800dc5d
 800dbbc:	0800dc5d 	.word	0x0800dc5d
 800dbc0:	0800dc5d 	.word	0x0800dc5d
 800dbc4:	0800dc5d 	.word	0x0800dc5d
 800dbc8:	0800dc3d 	.word	0x0800dc3d
 800dbcc:	0800dc5d 	.word	0x0800dc5d
 800dbd0:	0800dc5d 	.word	0x0800dc5d
 800dbd4:	0800dc5d 	.word	0x0800dc5d
 800dbd8:	0800dc5d 	.word	0x0800dc5d
 800dbdc:	0800dc5d 	.word	0x0800dc5d
 800dbe0:	0800dc5d 	.word	0x0800dc5d
 800dbe4:	0800dc5d 	.word	0x0800dc5d
 800dbe8:	0800dc45 	.word	0x0800dc45
 800dbec:	0800dc5d 	.word	0x0800dc5d
 800dbf0:	0800dc5d 	.word	0x0800dc5d
 800dbf4:	0800dc5d 	.word	0x0800dc5d
 800dbf8:	0800dc5d 	.word	0x0800dc5d
 800dbfc:	0800dc5d 	.word	0x0800dc5d
 800dc00:	0800dc5d 	.word	0x0800dc5d
 800dc04:	0800dc5d 	.word	0x0800dc5d
 800dc08:	0800dc4d 	.word	0x0800dc4d
 800dc0c:	0800dc5d 	.word	0x0800dc5d
 800dc10:	0800dc5d 	.word	0x0800dc5d
 800dc14:	0800dc5d 	.word	0x0800dc5d
 800dc18:	0800dc5d 	.word	0x0800dc5d
 800dc1c:	0800dc5d 	.word	0x0800dc5d
 800dc20:	0800dc5d 	.word	0x0800dc5d
 800dc24:	0800dc5d 	.word	0x0800dc5d
 800dc28:	0800dc55 	.word	0x0800dc55
 800dc2c:	2301      	movs	r3, #1
 800dc2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc32:	e050      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800dc34:	2304      	movs	r3, #4
 800dc36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc3a:	e04c      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800dc3c:	2308      	movs	r3, #8
 800dc3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc42:	e048      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800dc44:	2310      	movs	r3, #16
 800dc46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc4a:	e044      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800dc4c:	2320      	movs	r3, #32
 800dc4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc52:	e040      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800dc54:	2340      	movs	r3, #64	; 0x40
 800dc56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc5a:	e03c      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800dc5c:	2380      	movs	r3, #128	; 0x80
 800dc5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc62:	e038      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800dc64:	697b      	ldr	r3, [r7, #20]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	4a71      	ldr	r2, [pc, #452]	; (800de30 <UART_SetConfig+0x908>)
 800dc6a:	4293      	cmp	r3, r2
 800dc6c:	d130      	bne.n	800dcd0 <UART_SetConfig+0x7a8>
 800dc6e:	4b6f      	ldr	r3, [pc, #444]	; (800de2c <UART_SetConfig+0x904>)
 800dc70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc72:	f003 0307 	and.w	r3, r3, #7
 800dc76:	2b05      	cmp	r3, #5
 800dc78:	d826      	bhi.n	800dcc8 <UART_SetConfig+0x7a0>
 800dc7a:	a201      	add	r2, pc, #4	; (adr r2, 800dc80 <UART_SetConfig+0x758>)
 800dc7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc80:	0800dc99 	.word	0x0800dc99
 800dc84:	0800dca1 	.word	0x0800dca1
 800dc88:	0800dca9 	.word	0x0800dca9
 800dc8c:	0800dcb1 	.word	0x0800dcb1
 800dc90:	0800dcb9 	.word	0x0800dcb9
 800dc94:	0800dcc1 	.word	0x0800dcc1
 800dc98:	2302      	movs	r3, #2
 800dc9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc9e:	e01a      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800dca0:	2304      	movs	r3, #4
 800dca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dca6:	e016      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800dca8:	2308      	movs	r3, #8
 800dcaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcae:	e012      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800dcb0:	2310      	movs	r3, #16
 800dcb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcb6:	e00e      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800dcb8:	2320      	movs	r3, #32
 800dcba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcbe:	e00a      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800dcc0:	2340      	movs	r3, #64	; 0x40
 800dcc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcc6:	e006      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800dcc8:	2380      	movs	r3, #128	; 0x80
 800dcca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcce:	e002      	b.n	800dcd6 <UART_SetConfig+0x7ae>
 800dcd0:	2380      	movs	r3, #128	; 0x80
 800dcd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800dcd6:	697b      	ldr	r3, [r7, #20]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	4a55      	ldr	r2, [pc, #340]	; (800de30 <UART_SetConfig+0x908>)
 800dcdc:	4293      	cmp	r3, r2
 800dcde:	f040 80f8 	bne.w	800ded2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800dce2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dce6:	2b20      	cmp	r3, #32
 800dce8:	dc46      	bgt.n	800dd78 <UART_SetConfig+0x850>
 800dcea:	2b02      	cmp	r3, #2
 800dcec:	db75      	blt.n	800ddda <UART_SetConfig+0x8b2>
 800dcee:	3b02      	subs	r3, #2
 800dcf0:	2b1e      	cmp	r3, #30
 800dcf2:	d872      	bhi.n	800ddda <UART_SetConfig+0x8b2>
 800dcf4:	a201      	add	r2, pc, #4	; (adr r2, 800dcfc <UART_SetConfig+0x7d4>)
 800dcf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcfa:	bf00      	nop
 800dcfc:	0800dd7f 	.word	0x0800dd7f
 800dd00:	0800dddb 	.word	0x0800dddb
 800dd04:	0800dd87 	.word	0x0800dd87
 800dd08:	0800dddb 	.word	0x0800dddb
 800dd0c:	0800dddb 	.word	0x0800dddb
 800dd10:	0800dddb 	.word	0x0800dddb
 800dd14:	0800dd97 	.word	0x0800dd97
 800dd18:	0800dddb 	.word	0x0800dddb
 800dd1c:	0800dddb 	.word	0x0800dddb
 800dd20:	0800dddb 	.word	0x0800dddb
 800dd24:	0800dddb 	.word	0x0800dddb
 800dd28:	0800dddb 	.word	0x0800dddb
 800dd2c:	0800dddb 	.word	0x0800dddb
 800dd30:	0800dddb 	.word	0x0800dddb
 800dd34:	0800dda7 	.word	0x0800dda7
 800dd38:	0800dddb 	.word	0x0800dddb
 800dd3c:	0800dddb 	.word	0x0800dddb
 800dd40:	0800dddb 	.word	0x0800dddb
 800dd44:	0800dddb 	.word	0x0800dddb
 800dd48:	0800dddb 	.word	0x0800dddb
 800dd4c:	0800dddb 	.word	0x0800dddb
 800dd50:	0800dddb 	.word	0x0800dddb
 800dd54:	0800dddb 	.word	0x0800dddb
 800dd58:	0800dddb 	.word	0x0800dddb
 800dd5c:	0800dddb 	.word	0x0800dddb
 800dd60:	0800dddb 	.word	0x0800dddb
 800dd64:	0800dddb 	.word	0x0800dddb
 800dd68:	0800dddb 	.word	0x0800dddb
 800dd6c:	0800dddb 	.word	0x0800dddb
 800dd70:	0800dddb 	.word	0x0800dddb
 800dd74:	0800ddcd 	.word	0x0800ddcd
 800dd78:	2b40      	cmp	r3, #64	; 0x40
 800dd7a:	d02a      	beq.n	800ddd2 <UART_SetConfig+0x8aa>
 800dd7c:	e02d      	b.n	800ddda <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800dd7e:	f7fb ff31 	bl	8009be4 <HAL_RCCEx_GetD3PCLK1Freq>
 800dd82:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dd84:	e02f      	b.n	800dde6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dd86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	f7fb ff40 	bl	8009c10 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dd90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd94:	e027      	b.n	800dde6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dd96:	f107 0318 	add.w	r3, r7, #24
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	f7fc f88c 	bl	8009eb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dda0:	69fb      	ldr	r3, [r7, #28]
 800dda2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dda4:	e01f      	b.n	800dde6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dda6:	4b21      	ldr	r3, [pc, #132]	; (800de2c <UART_SetConfig+0x904>)
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	f003 0320 	and.w	r3, r3, #32
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d009      	beq.n	800ddc6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ddb2:	4b1e      	ldr	r3, [pc, #120]	; (800de2c <UART_SetConfig+0x904>)
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	08db      	lsrs	r3, r3, #3
 800ddb8:	f003 0303 	and.w	r3, r3, #3
 800ddbc:	4a1d      	ldr	r2, [pc, #116]	; (800de34 <UART_SetConfig+0x90c>)
 800ddbe:	fa22 f303 	lsr.w	r3, r2, r3
 800ddc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ddc4:	e00f      	b.n	800dde6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ddc6:	4b1b      	ldr	r3, [pc, #108]	; (800de34 <UART_SetConfig+0x90c>)
 800ddc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ddca:	e00c      	b.n	800dde6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ddcc:	4b1a      	ldr	r3, [pc, #104]	; (800de38 <UART_SetConfig+0x910>)
 800ddce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ddd0:	e009      	b.n	800dde6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ddd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ddd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ddd8:	e005      	b.n	800dde6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ddda:	2300      	movs	r3, #0
 800dddc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ddde:	2301      	movs	r3, #1
 800dde0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800dde4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800dde6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	f000 81ee 	beq.w	800e1ca <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ddee:	697b      	ldr	r3, [r7, #20]
 800ddf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddf2:	4a12      	ldr	r2, [pc, #72]	; (800de3c <UART_SetConfig+0x914>)
 800ddf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ddf8:	461a      	mov	r2, r3
 800ddfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddfc:	fbb3 f3f2 	udiv	r3, r3, r2
 800de00:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800de02:	697b      	ldr	r3, [r7, #20]
 800de04:	685a      	ldr	r2, [r3, #4]
 800de06:	4613      	mov	r3, r2
 800de08:	005b      	lsls	r3, r3, #1
 800de0a:	4413      	add	r3, r2
 800de0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de0e:	429a      	cmp	r2, r3
 800de10:	d305      	bcc.n	800de1e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800de12:	697b      	ldr	r3, [r7, #20]
 800de14:	685b      	ldr	r3, [r3, #4]
 800de16:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800de18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de1a:	429a      	cmp	r2, r3
 800de1c:	d910      	bls.n	800de40 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800de1e:	2301      	movs	r3, #1
 800de20:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800de24:	e1d1      	b.n	800e1ca <UART_SetConfig+0xca2>
 800de26:	bf00      	nop
 800de28:	40011c00 	.word	0x40011c00
 800de2c:	58024400 	.word	0x58024400
 800de30:	58000c00 	.word	0x58000c00
 800de34:	03d09000 	.word	0x03d09000
 800de38:	003d0900 	.word	0x003d0900
 800de3c:	08011c98 	.word	0x08011c98
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800de40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de42:	2200      	movs	r2, #0
 800de44:	60bb      	str	r3, [r7, #8]
 800de46:	60fa      	str	r2, [r7, #12]
 800de48:	697b      	ldr	r3, [r7, #20]
 800de4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de4c:	4ac0      	ldr	r2, [pc, #768]	; (800e150 <UART_SetConfig+0xc28>)
 800de4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de52:	b29b      	uxth	r3, r3
 800de54:	2200      	movs	r2, #0
 800de56:	603b      	str	r3, [r7, #0]
 800de58:	607a      	str	r2, [r7, #4]
 800de5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800de5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800de62:	f7f2 fa45 	bl	80002f0 <__aeabi_uldivmod>
 800de66:	4602      	mov	r2, r0
 800de68:	460b      	mov	r3, r1
 800de6a:	4610      	mov	r0, r2
 800de6c:	4619      	mov	r1, r3
 800de6e:	f04f 0200 	mov.w	r2, #0
 800de72:	f04f 0300 	mov.w	r3, #0
 800de76:	020b      	lsls	r3, r1, #8
 800de78:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800de7c:	0202      	lsls	r2, r0, #8
 800de7e:	6979      	ldr	r1, [r7, #20]
 800de80:	6849      	ldr	r1, [r1, #4]
 800de82:	0849      	lsrs	r1, r1, #1
 800de84:	2000      	movs	r0, #0
 800de86:	460c      	mov	r4, r1
 800de88:	4605      	mov	r5, r0
 800de8a:	eb12 0804 	adds.w	r8, r2, r4
 800de8e:	eb43 0905 	adc.w	r9, r3, r5
 800de92:	697b      	ldr	r3, [r7, #20]
 800de94:	685b      	ldr	r3, [r3, #4]
 800de96:	2200      	movs	r2, #0
 800de98:	469a      	mov	sl, r3
 800de9a:	4693      	mov	fp, r2
 800de9c:	4652      	mov	r2, sl
 800de9e:	465b      	mov	r3, fp
 800dea0:	4640      	mov	r0, r8
 800dea2:	4649      	mov	r1, r9
 800dea4:	f7f2 fa24 	bl	80002f0 <__aeabi_uldivmod>
 800dea8:	4602      	mov	r2, r0
 800deaa:	460b      	mov	r3, r1
 800deac:	4613      	mov	r3, r2
 800deae:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800deb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800deb6:	d308      	bcc.n	800deca <UART_SetConfig+0x9a2>
 800deb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800debe:	d204      	bcs.n	800deca <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800dec0:	697b      	ldr	r3, [r7, #20]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dec6:	60da      	str	r2, [r3, #12]
 800dec8:	e17f      	b.n	800e1ca <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800deca:	2301      	movs	r3, #1
 800decc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ded0:	e17b      	b.n	800e1ca <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ded2:	697b      	ldr	r3, [r7, #20]
 800ded4:	69db      	ldr	r3, [r3, #28]
 800ded6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800deda:	f040 80bd 	bne.w	800e058 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800dede:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dee2:	2b20      	cmp	r3, #32
 800dee4:	dc48      	bgt.n	800df78 <UART_SetConfig+0xa50>
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	db7b      	blt.n	800dfe2 <UART_SetConfig+0xaba>
 800deea:	2b20      	cmp	r3, #32
 800deec:	d879      	bhi.n	800dfe2 <UART_SetConfig+0xaba>
 800deee:	a201      	add	r2, pc, #4	; (adr r2, 800def4 <UART_SetConfig+0x9cc>)
 800def0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800def4:	0800df7f 	.word	0x0800df7f
 800def8:	0800df87 	.word	0x0800df87
 800defc:	0800dfe3 	.word	0x0800dfe3
 800df00:	0800dfe3 	.word	0x0800dfe3
 800df04:	0800df8f 	.word	0x0800df8f
 800df08:	0800dfe3 	.word	0x0800dfe3
 800df0c:	0800dfe3 	.word	0x0800dfe3
 800df10:	0800dfe3 	.word	0x0800dfe3
 800df14:	0800df9f 	.word	0x0800df9f
 800df18:	0800dfe3 	.word	0x0800dfe3
 800df1c:	0800dfe3 	.word	0x0800dfe3
 800df20:	0800dfe3 	.word	0x0800dfe3
 800df24:	0800dfe3 	.word	0x0800dfe3
 800df28:	0800dfe3 	.word	0x0800dfe3
 800df2c:	0800dfe3 	.word	0x0800dfe3
 800df30:	0800dfe3 	.word	0x0800dfe3
 800df34:	0800dfaf 	.word	0x0800dfaf
 800df38:	0800dfe3 	.word	0x0800dfe3
 800df3c:	0800dfe3 	.word	0x0800dfe3
 800df40:	0800dfe3 	.word	0x0800dfe3
 800df44:	0800dfe3 	.word	0x0800dfe3
 800df48:	0800dfe3 	.word	0x0800dfe3
 800df4c:	0800dfe3 	.word	0x0800dfe3
 800df50:	0800dfe3 	.word	0x0800dfe3
 800df54:	0800dfe3 	.word	0x0800dfe3
 800df58:	0800dfe3 	.word	0x0800dfe3
 800df5c:	0800dfe3 	.word	0x0800dfe3
 800df60:	0800dfe3 	.word	0x0800dfe3
 800df64:	0800dfe3 	.word	0x0800dfe3
 800df68:	0800dfe3 	.word	0x0800dfe3
 800df6c:	0800dfe3 	.word	0x0800dfe3
 800df70:	0800dfe3 	.word	0x0800dfe3
 800df74:	0800dfd5 	.word	0x0800dfd5
 800df78:	2b40      	cmp	r3, #64	; 0x40
 800df7a:	d02e      	beq.n	800dfda <UART_SetConfig+0xab2>
 800df7c:	e031      	b.n	800dfe2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800df7e:	f7fa fa89 	bl	8008494 <HAL_RCC_GetPCLK1Freq>
 800df82:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800df84:	e033      	b.n	800dfee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800df86:	f7fa fa9b 	bl	80084c0 <HAL_RCC_GetPCLK2Freq>
 800df8a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800df8c:	e02f      	b.n	800dfee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800df8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800df92:	4618      	mov	r0, r3
 800df94:	f7fb fe3c 	bl	8009c10 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800df98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df9c:	e027      	b.n	800dfee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800df9e:	f107 0318 	add.w	r3, r7, #24
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	f7fb ff88 	bl	8009eb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dfa8:	69fb      	ldr	r3, [r7, #28]
 800dfaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dfac:	e01f      	b.n	800dfee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dfae:	4b69      	ldr	r3, [pc, #420]	; (800e154 <UART_SetConfig+0xc2c>)
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	f003 0320 	and.w	r3, r3, #32
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d009      	beq.n	800dfce <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dfba:	4b66      	ldr	r3, [pc, #408]	; (800e154 <UART_SetConfig+0xc2c>)
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	08db      	lsrs	r3, r3, #3
 800dfc0:	f003 0303 	and.w	r3, r3, #3
 800dfc4:	4a64      	ldr	r2, [pc, #400]	; (800e158 <UART_SetConfig+0xc30>)
 800dfc6:	fa22 f303 	lsr.w	r3, r2, r3
 800dfca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dfcc:	e00f      	b.n	800dfee <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800dfce:	4b62      	ldr	r3, [pc, #392]	; (800e158 <UART_SetConfig+0xc30>)
 800dfd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dfd2:	e00c      	b.n	800dfee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dfd4:	4b61      	ldr	r3, [pc, #388]	; (800e15c <UART_SetConfig+0xc34>)
 800dfd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dfd8:	e009      	b.n	800dfee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dfda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dfde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dfe0:	e005      	b.n	800dfee <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800dfe6:	2301      	movs	r3, #1
 800dfe8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800dfec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800dfee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	f000 80ea 	beq.w	800e1ca <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dff6:	697b      	ldr	r3, [r7, #20]
 800dff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dffa:	4a55      	ldr	r2, [pc, #340]	; (800e150 <UART_SetConfig+0xc28>)
 800dffc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e000:	461a      	mov	r2, r3
 800e002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e004:	fbb3 f3f2 	udiv	r3, r3, r2
 800e008:	005a      	lsls	r2, r3, #1
 800e00a:	697b      	ldr	r3, [r7, #20]
 800e00c:	685b      	ldr	r3, [r3, #4]
 800e00e:	085b      	lsrs	r3, r3, #1
 800e010:	441a      	add	r2, r3
 800e012:	697b      	ldr	r3, [r7, #20]
 800e014:	685b      	ldr	r3, [r3, #4]
 800e016:	fbb2 f3f3 	udiv	r3, r2, r3
 800e01a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e01e:	2b0f      	cmp	r3, #15
 800e020:	d916      	bls.n	800e050 <UART_SetConfig+0xb28>
 800e022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e028:	d212      	bcs.n	800e050 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e02c:	b29b      	uxth	r3, r3
 800e02e:	f023 030f 	bic.w	r3, r3, #15
 800e032:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e036:	085b      	lsrs	r3, r3, #1
 800e038:	b29b      	uxth	r3, r3
 800e03a:	f003 0307 	and.w	r3, r3, #7
 800e03e:	b29a      	uxth	r2, r3
 800e040:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e042:	4313      	orrs	r3, r2
 800e044:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e046:	697b      	ldr	r3, [r7, #20]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e04c:	60da      	str	r2, [r3, #12]
 800e04e:	e0bc      	b.n	800e1ca <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e050:	2301      	movs	r3, #1
 800e052:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e056:	e0b8      	b.n	800e1ca <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e058:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e05c:	2b20      	cmp	r3, #32
 800e05e:	dc4b      	bgt.n	800e0f8 <UART_SetConfig+0xbd0>
 800e060:	2b00      	cmp	r3, #0
 800e062:	f2c0 8087 	blt.w	800e174 <UART_SetConfig+0xc4c>
 800e066:	2b20      	cmp	r3, #32
 800e068:	f200 8084 	bhi.w	800e174 <UART_SetConfig+0xc4c>
 800e06c:	a201      	add	r2, pc, #4	; (adr r2, 800e074 <UART_SetConfig+0xb4c>)
 800e06e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e072:	bf00      	nop
 800e074:	0800e0ff 	.word	0x0800e0ff
 800e078:	0800e107 	.word	0x0800e107
 800e07c:	0800e175 	.word	0x0800e175
 800e080:	0800e175 	.word	0x0800e175
 800e084:	0800e10f 	.word	0x0800e10f
 800e088:	0800e175 	.word	0x0800e175
 800e08c:	0800e175 	.word	0x0800e175
 800e090:	0800e175 	.word	0x0800e175
 800e094:	0800e11f 	.word	0x0800e11f
 800e098:	0800e175 	.word	0x0800e175
 800e09c:	0800e175 	.word	0x0800e175
 800e0a0:	0800e175 	.word	0x0800e175
 800e0a4:	0800e175 	.word	0x0800e175
 800e0a8:	0800e175 	.word	0x0800e175
 800e0ac:	0800e175 	.word	0x0800e175
 800e0b0:	0800e175 	.word	0x0800e175
 800e0b4:	0800e12f 	.word	0x0800e12f
 800e0b8:	0800e175 	.word	0x0800e175
 800e0bc:	0800e175 	.word	0x0800e175
 800e0c0:	0800e175 	.word	0x0800e175
 800e0c4:	0800e175 	.word	0x0800e175
 800e0c8:	0800e175 	.word	0x0800e175
 800e0cc:	0800e175 	.word	0x0800e175
 800e0d0:	0800e175 	.word	0x0800e175
 800e0d4:	0800e175 	.word	0x0800e175
 800e0d8:	0800e175 	.word	0x0800e175
 800e0dc:	0800e175 	.word	0x0800e175
 800e0e0:	0800e175 	.word	0x0800e175
 800e0e4:	0800e175 	.word	0x0800e175
 800e0e8:	0800e175 	.word	0x0800e175
 800e0ec:	0800e175 	.word	0x0800e175
 800e0f0:	0800e175 	.word	0x0800e175
 800e0f4:	0800e167 	.word	0x0800e167
 800e0f8:	2b40      	cmp	r3, #64	; 0x40
 800e0fa:	d037      	beq.n	800e16c <UART_SetConfig+0xc44>
 800e0fc:	e03a      	b.n	800e174 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e0fe:	f7fa f9c9 	bl	8008494 <HAL_RCC_GetPCLK1Freq>
 800e102:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e104:	e03c      	b.n	800e180 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e106:	f7fa f9db 	bl	80084c0 <HAL_RCC_GetPCLK2Freq>
 800e10a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e10c:	e038      	b.n	800e180 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e10e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e112:	4618      	mov	r0, r3
 800e114:	f7fb fd7c 	bl	8009c10 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e11a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e11c:	e030      	b.n	800e180 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e11e:	f107 0318 	add.w	r3, r7, #24
 800e122:	4618      	mov	r0, r3
 800e124:	f7fb fec8 	bl	8009eb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e128:	69fb      	ldr	r3, [r7, #28]
 800e12a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e12c:	e028      	b.n	800e180 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e12e:	4b09      	ldr	r3, [pc, #36]	; (800e154 <UART_SetConfig+0xc2c>)
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	f003 0320 	and.w	r3, r3, #32
 800e136:	2b00      	cmp	r3, #0
 800e138:	d012      	beq.n	800e160 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e13a:	4b06      	ldr	r3, [pc, #24]	; (800e154 <UART_SetConfig+0xc2c>)
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	08db      	lsrs	r3, r3, #3
 800e140:	f003 0303 	and.w	r3, r3, #3
 800e144:	4a04      	ldr	r2, [pc, #16]	; (800e158 <UART_SetConfig+0xc30>)
 800e146:	fa22 f303 	lsr.w	r3, r2, r3
 800e14a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e14c:	e018      	b.n	800e180 <UART_SetConfig+0xc58>
 800e14e:	bf00      	nop
 800e150:	08011c98 	.word	0x08011c98
 800e154:	58024400 	.word	0x58024400
 800e158:	03d09000 	.word	0x03d09000
 800e15c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800e160:	4b24      	ldr	r3, [pc, #144]	; (800e1f4 <UART_SetConfig+0xccc>)
 800e162:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e164:	e00c      	b.n	800e180 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e166:	4b24      	ldr	r3, [pc, #144]	; (800e1f8 <UART_SetConfig+0xcd0>)
 800e168:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e16a:	e009      	b.n	800e180 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e16c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e170:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e172:	e005      	b.n	800e180 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800e174:	2300      	movs	r3, #0
 800e176:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e178:	2301      	movs	r3, #1
 800e17a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e17e:	bf00      	nop
    }

    if (pclk != 0U)
 800e180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e182:	2b00      	cmp	r3, #0
 800e184:	d021      	beq.n	800e1ca <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e186:	697b      	ldr	r3, [r7, #20]
 800e188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e18a:	4a1c      	ldr	r2, [pc, #112]	; (800e1fc <UART_SetConfig+0xcd4>)
 800e18c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e190:	461a      	mov	r2, r3
 800e192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e194:	fbb3 f2f2 	udiv	r2, r3, r2
 800e198:	697b      	ldr	r3, [r7, #20]
 800e19a:	685b      	ldr	r3, [r3, #4]
 800e19c:	085b      	lsrs	r3, r3, #1
 800e19e:	441a      	add	r2, r3
 800e1a0:	697b      	ldr	r3, [r7, #20]
 800e1a2:	685b      	ldr	r3, [r3, #4]
 800e1a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1a8:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e1aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1ac:	2b0f      	cmp	r3, #15
 800e1ae:	d909      	bls.n	800e1c4 <UART_SetConfig+0xc9c>
 800e1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e1b6:	d205      	bcs.n	800e1c4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1ba:	b29a      	uxth	r2, r3
 800e1bc:	697b      	ldr	r3, [r7, #20]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	60da      	str	r2, [r3, #12]
 800e1c2:	e002      	b.n	800e1ca <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e1c4:	2301      	movs	r3, #1
 800e1c6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e1ca:	697b      	ldr	r3, [r7, #20]
 800e1cc:	2201      	movs	r2, #1
 800e1ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e1d2:	697b      	ldr	r3, [r7, #20]
 800e1d4:	2201      	movs	r2, #1
 800e1d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e1da:	697b      	ldr	r3, [r7, #20]
 800e1dc:	2200      	movs	r2, #0
 800e1de:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800e1e0:	697b      	ldr	r3, [r7, #20]
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800e1e6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	3748      	adds	r7, #72	; 0x48
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e1f4:	03d09000 	.word	0x03d09000
 800e1f8:	003d0900 	.word	0x003d0900
 800e1fc:	08011c98 	.word	0x08011c98

0800e200 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e200:	b480      	push	{r7}
 800e202:	b083      	sub	sp, #12
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e20c:	f003 0301 	and.w	r3, r3, #1
 800e210:	2b00      	cmp	r3, #0
 800e212:	d00a      	beq.n	800e22a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	685b      	ldr	r3, [r3, #4]
 800e21a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	430a      	orrs	r2, r1
 800e228:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e22e:	f003 0302 	and.w	r3, r3, #2
 800e232:	2b00      	cmp	r3, #0
 800e234:	d00a      	beq.n	800e24c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	685b      	ldr	r3, [r3, #4]
 800e23c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	430a      	orrs	r2, r1
 800e24a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e250:	f003 0304 	and.w	r3, r3, #4
 800e254:	2b00      	cmp	r3, #0
 800e256:	d00a      	beq.n	800e26e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	685b      	ldr	r3, [r3, #4]
 800e25e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	430a      	orrs	r2, r1
 800e26c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e272:	f003 0308 	and.w	r3, r3, #8
 800e276:	2b00      	cmp	r3, #0
 800e278:	d00a      	beq.n	800e290 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	685b      	ldr	r3, [r3, #4]
 800e280:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	430a      	orrs	r2, r1
 800e28e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e294:	f003 0310 	and.w	r3, r3, #16
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d00a      	beq.n	800e2b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	689b      	ldr	r3, [r3, #8]
 800e2a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	430a      	orrs	r2, r1
 800e2b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2b6:	f003 0320 	and.w	r3, r3, #32
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d00a      	beq.n	800e2d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	689b      	ldr	r3, [r3, #8]
 800e2c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	430a      	orrs	r2, r1
 800e2d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d01a      	beq.n	800e316 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	685b      	ldr	r3, [r3, #4]
 800e2e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	430a      	orrs	r2, r1
 800e2f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e2fe:	d10a      	bne.n	800e316 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	685b      	ldr	r3, [r3, #4]
 800e306:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	430a      	orrs	r2, r1
 800e314:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e31a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d00a      	beq.n	800e338 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	685b      	ldr	r3, [r3, #4]
 800e328:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	430a      	orrs	r2, r1
 800e336:	605a      	str	r2, [r3, #4]
  }
}
 800e338:	bf00      	nop
 800e33a:	370c      	adds	r7, #12
 800e33c:	46bd      	mov	sp, r7
 800e33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e342:	4770      	bx	lr

0800e344 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e344:	b580      	push	{r7, lr}
 800e346:	b086      	sub	sp, #24
 800e348:	af02      	add	r7, sp, #8
 800e34a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	2200      	movs	r2, #0
 800e350:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e354:	f7f4 f8ec 	bl	8002530 <HAL_GetTick>
 800e358:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	f003 0308 	and.w	r3, r3, #8
 800e364:	2b08      	cmp	r3, #8
 800e366:	d10e      	bne.n	800e386 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e368:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e36c:	9300      	str	r3, [sp, #0]
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	2200      	movs	r2, #0
 800e372:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e376:	6878      	ldr	r0, [r7, #4]
 800e378:	f000 f82f 	bl	800e3da <UART_WaitOnFlagUntilTimeout>
 800e37c:	4603      	mov	r3, r0
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d001      	beq.n	800e386 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e382:	2303      	movs	r3, #3
 800e384:	e025      	b.n	800e3d2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	f003 0304 	and.w	r3, r3, #4
 800e390:	2b04      	cmp	r3, #4
 800e392:	d10e      	bne.n	800e3b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e394:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e398:	9300      	str	r3, [sp, #0]
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	2200      	movs	r2, #0
 800e39e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e3a2:	6878      	ldr	r0, [r7, #4]
 800e3a4:	f000 f819 	bl	800e3da <UART_WaitOnFlagUntilTimeout>
 800e3a8:	4603      	mov	r3, r0
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d001      	beq.n	800e3b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e3ae:	2303      	movs	r3, #3
 800e3b0:	e00f      	b.n	800e3d2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	2220      	movs	r2, #32
 800e3b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	2220      	movs	r2, #32
 800e3be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	2200      	movs	r2, #0
 800e3c6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e3d0:	2300      	movs	r3, #0
}
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	3710      	adds	r7, #16
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	bd80      	pop	{r7, pc}

0800e3da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e3da:	b580      	push	{r7, lr}
 800e3dc:	b09c      	sub	sp, #112	; 0x70
 800e3de:	af00      	add	r7, sp, #0
 800e3e0:	60f8      	str	r0, [r7, #12]
 800e3e2:	60b9      	str	r1, [r7, #8]
 800e3e4:	603b      	str	r3, [r7, #0]
 800e3e6:	4613      	mov	r3, r2
 800e3e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e3ea:	e0a9      	b.n	800e540 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e3ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e3ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e3f2:	f000 80a5 	beq.w	800e540 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e3f6:	f7f4 f89b 	bl	8002530 <HAL_GetTick>
 800e3fa:	4602      	mov	r2, r0
 800e3fc:	683b      	ldr	r3, [r7, #0]
 800e3fe:	1ad3      	subs	r3, r2, r3
 800e400:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e402:	429a      	cmp	r2, r3
 800e404:	d302      	bcc.n	800e40c <UART_WaitOnFlagUntilTimeout+0x32>
 800e406:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d140      	bne.n	800e48e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e412:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e414:	e853 3f00 	ldrex	r3, [r3]
 800e418:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e41a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e41c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e420:	667b      	str	r3, [r7, #100]	; 0x64
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	461a      	mov	r2, r3
 800e428:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e42a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e42c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e42e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e430:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e432:	e841 2300 	strex	r3, r2, [r1]
 800e436:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e438:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d1e6      	bne.n	800e40c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	3308      	adds	r3, #8
 800e444:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e448:	e853 3f00 	ldrex	r3, [r3]
 800e44c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e44e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e450:	f023 0301 	bic.w	r3, r3, #1
 800e454:	663b      	str	r3, [r7, #96]	; 0x60
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	3308      	adds	r3, #8
 800e45c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e45e:	64ba      	str	r2, [r7, #72]	; 0x48
 800e460:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e462:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e464:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e466:	e841 2300 	strex	r3, r2, [r1]
 800e46a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e46c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d1e5      	bne.n	800e43e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	2220      	movs	r2, #32
 800e476:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	2220      	movs	r2, #32
 800e47e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	2200      	movs	r2, #0
 800e486:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800e48a:	2303      	movs	r3, #3
 800e48c:	e069      	b.n	800e562 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	f003 0304 	and.w	r3, r3, #4
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d051      	beq.n	800e540 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	69db      	ldr	r3, [r3, #28]
 800e4a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e4a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e4aa:	d149      	bne.n	800e540 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e4b4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4be:	e853 3f00 	ldrex	r3, [r3]
 800e4c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e4ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	461a      	mov	r2, r3
 800e4d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e4d4:	637b      	str	r3, [r7, #52]	; 0x34
 800e4d6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e4da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e4dc:	e841 2300 	strex	r3, r2, [r1]
 800e4e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e4e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d1e6      	bne.n	800e4b6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	3308      	adds	r3, #8
 800e4ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4f0:	697b      	ldr	r3, [r7, #20]
 800e4f2:	e853 3f00 	ldrex	r3, [r3]
 800e4f6:	613b      	str	r3, [r7, #16]
   return(result);
 800e4f8:	693b      	ldr	r3, [r7, #16]
 800e4fa:	f023 0301 	bic.w	r3, r3, #1
 800e4fe:	66bb      	str	r3, [r7, #104]	; 0x68
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	3308      	adds	r3, #8
 800e506:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e508:	623a      	str	r2, [r7, #32]
 800e50a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e50c:	69f9      	ldr	r1, [r7, #28]
 800e50e:	6a3a      	ldr	r2, [r7, #32]
 800e510:	e841 2300 	strex	r3, r2, [r1]
 800e514:	61bb      	str	r3, [r7, #24]
   return(result);
 800e516:	69bb      	ldr	r3, [r7, #24]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d1e5      	bne.n	800e4e8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	2220      	movs	r2, #32
 800e520:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	2220      	movs	r2, #32
 800e528:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	2220      	movs	r2, #32
 800e530:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	2200      	movs	r2, #0
 800e538:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e53c:	2303      	movs	r3, #3
 800e53e:	e010      	b.n	800e562 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	69da      	ldr	r2, [r3, #28]
 800e546:	68bb      	ldr	r3, [r7, #8]
 800e548:	4013      	ands	r3, r2
 800e54a:	68ba      	ldr	r2, [r7, #8]
 800e54c:	429a      	cmp	r2, r3
 800e54e:	bf0c      	ite	eq
 800e550:	2301      	moveq	r3, #1
 800e552:	2300      	movne	r3, #0
 800e554:	b2db      	uxtb	r3, r3
 800e556:	461a      	mov	r2, r3
 800e558:	79fb      	ldrb	r3, [r7, #7]
 800e55a:	429a      	cmp	r2, r3
 800e55c:	f43f af46 	beq.w	800e3ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e560:	2300      	movs	r3, #0
}
 800e562:	4618      	mov	r0, r3
 800e564:	3770      	adds	r7, #112	; 0x70
 800e566:	46bd      	mov	sp, r7
 800e568:	bd80      	pop	{r7, pc}
	...

0800e56c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e56c:	b480      	push	{r7}
 800e56e:	b0a3      	sub	sp, #140	; 0x8c
 800e570:	af00      	add	r7, sp, #0
 800e572:	60f8      	str	r0, [r7, #12]
 800e574:	60b9      	str	r1, [r7, #8]
 800e576:	4613      	mov	r3, r2
 800e578:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	68ba      	ldr	r2, [r7, #8]
 800e57e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	88fa      	ldrh	r2, [r7, #6]
 800e584:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	88fa      	ldrh	r2, [r7, #6]
 800e58c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	2200      	movs	r2, #0
 800e594:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	689b      	ldr	r3, [r3, #8]
 800e59a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e59e:	d10e      	bne.n	800e5be <UART_Start_Receive_IT+0x52>
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	691b      	ldr	r3, [r3, #16]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d105      	bne.n	800e5b4 <UART_Start_Receive_IT+0x48>
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	f240 12ff 	movw	r2, #511	; 0x1ff
 800e5ae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e5b2:	e02d      	b.n	800e610 <UART_Start_Receive_IT+0xa4>
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	22ff      	movs	r2, #255	; 0xff
 800e5b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e5bc:	e028      	b.n	800e610 <UART_Start_Receive_IT+0xa4>
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	689b      	ldr	r3, [r3, #8]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d10d      	bne.n	800e5e2 <UART_Start_Receive_IT+0x76>
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	691b      	ldr	r3, [r3, #16]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d104      	bne.n	800e5d8 <UART_Start_Receive_IT+0x6c>
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	22ff      	movs	r2, #255	; 0xff
 800e5d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e5d6:	e01b      	b.n	800e610 <UART_Start_Receive_IT+0xa4>
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	227f      	movs	r2, #127	; 0x7f
 800e5dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e5e0:	e016      	b.n	800e610 <UART_Start_Receive_IT+0xa4>
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	689b      	ldr	r3, [r3, #8]
 800e5e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e5ea:	d10d      	bne.n	800e608 <UART_Start_Receive_IT+0x9c>
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	691b      	ldr	r3, [r3, #16]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d104      	bne.n	800e5fe <UART_Start_Receive_IT+0x92>
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	227f      	movs	r2, #127	; 0x7f
 800e5f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e5fc:	e008      	b.n	800e610 <UART_Start_Receive_IT+0xa4>
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	223f      	movs	r2, #63	; 0x3f
 800e602:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e606:	e003      	b.n	800e610 <UART_Start_Receive_IT+0xa4>
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	2200      	movs	r2, #0
 800e60c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	2200      	movs	r2, #0
 800e614:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	2222      	movs	r2, #34	; 0x22
 800e61c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	3308      	adds	r3, #8
 800e626:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e628:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e62a:	e853 3f00 	ldrex	r3, [r3]
 800e62e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800e630:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e632:	f043 0301 	orr.w	r3, r3, #1
 800e636:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	3308      	adds	r3, #8
 800e640:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800e644:	673a      	str	r2, [r7, #112]	; 0x70
 800e646:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e648:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800e64a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e64c:	e841 2300 	strex	r3, r2, [r1]
 800e650:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800e652:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e654:	2b00      	cmp	r3, #0
 800e656:	d1e3      	bne.n	800e620 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e65c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e660:	d153      	bne.n	800e70a <UART_Start_Receive_IT+0x19e>
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e668:	88fa      	ldrh	r2, [r7, #6]
 800e66a:	429a      	cmp	r2, r3
 800e66c:	d34d      	bcc.n	800e70a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	689b      	ldr	r3, [r3, #8]
 800e672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e676:	d107      	bne.n	800e688 <UART_Start_Receive_IT+0x11c>
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	691b      	ldr	r3, [r3, #16]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d103      	bne.n	800e688 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	4a4b      	ldr	r2, [pc, #300]	; (800e7b0 <UART_Start_Receive_IT+0x244>)
 800e684:	671a      	str	r2, [r3, #112]	; 0x70
 800e686:	e002      	b.n	800e68e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	4a4a      	ldr	r2, [pc, #296]	; (800e7b4 <UART_Start_Receive_IT+0x248>)
 800e68c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	2200      	movs	r2, #0
 800e692:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	691b      	ldr	r3, [r3, #16]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d01a      	beq.n	800e6d4 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6a6:	e853 3f00 	ldrex	r3, [r3]
 800e6aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e6ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e6b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	461a      	mov	r2, r3
 800e6bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e6c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e6c2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6c4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e6c6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e6c8:	e841 2300 	strex	r3, r2, [r1]
 800e6cc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e6ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d1e4      	bne.n	800e69e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	3308      	adds	r3, #8
 800e6da:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6de:	e853 3f00 	ldrex	r3, [r3]
 800e6e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e6ea:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	3308      	adds	r3, #8
 800e6f2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e6f4:	64ba      	str	r2, [r7, #72]	; 0x48
 800e6f6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6f8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e6fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e6fc:	e841 2300 	strex	r3, r2, [r1]
 800e700:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e704:	2b00      	cmp	r3, #0
 800e706:	d1e5      	bne.n	800e6d4 <UART_Start_Receive_IT+0x168>
 800e708:	e04a      	b.n	800e7a0 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	689b      	ldr	r3, [r3, #8]
 800e70e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e712:	d107      	bne.n	800e724 <UART_Start_Receive_IT+0x1b8>
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	691b      	ldr	r3, [r3, #16]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d103      	bne.n	800e724 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	4a26      	ldr	r2, [pc, #152]	; (800e7b8 <UART_Start_Receive_IT+0x24c>)
 800e720:	671a      	str	r2, [r3, #112]	; 0x70
 800e722:	e002      	b.n	800e72a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	4a25      	ldr	r2, [pc, #148]	; (800e7bc <UART_Start_Receive_IT+0x250>)
 800e728:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	2200      	movs	r2, #0
 800e72e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	691b      	ldr	r3, [r3, #16]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d019      	beq.n	800e76e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e742:	e853 3f00 	ldrex	r3, [r3]
 800e746:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e74a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800e74e:	677b      	str	r3, [r7, #116]	; 0x74
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	461a      	mov	r2, r3
 800e756:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e758:	637b      	str	r3, [r7, #52]	; 0x34
 800e75a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e75c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e75e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e760:	e841 2300 	strex	r3, r2, [r1]
 800e764:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d1e6      	bne.n	800e73a <UART_Start_Receive_IT+0x1ce>
 800e76c:	e018      	b.n	800e7a0 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e774:	697b      	ldr	r3, [r7, #20]
 800e776:	e853 3f00 	ldrex	r3, [r3]
 800e77a:	613b      	str	r3, [r7, #16]
   return(result);
 800e77c:	693b      	ldr	r3, [r7, #16]
 800e77e:	f043 0320 	orr.w	r3, r3, #32
 800e782:	67bb      	str	r3, [r7, #120]	; 0x78
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	461a      	mov	r2, r3
 800e78a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e78c:	623b      	str	r3, [r7, #32]
 800e78e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e790:	69f9      	ldr	r1, [r7, #28]
 800e792:	6a3a      	ldr	r2, [r7, #32]
 800e794:	e841 2300 	strex	r3, r2, [r1]
 800e798:	61bb      	str	r3, [r7, #24]
   return(result);
 800e79a:	69bb      	ldr	r3, [r7, #24]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d1e6      	bne.n	800e76e <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800e7a0:	2300      	movs	r3, #0
}
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	378c      	adds	r7, #140	; 0x8c
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ac:	4770      	bx	lr
 800e7ae:	bf00      	nop
 800e7b0:	0800eec9 	.word	0x0800eec9
 800e7b4:	0800ebd1 	.word	0x0800ebd1
 800e7b8:	0800ea6f 	.word	0x0800ea6f
 800e7bc:	0800e90f 	.word	0x0800e90f

0800e7c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e7c0:	b480      	push	{r7}
 800e7c2:	b095      	sub	sp, #84	; 0x54
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7d0:	e853 3f00 	ldrex	r3, [r3]
 800e7d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e7dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	461a      	mov	r2, r3
 800e7e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7e6:	643b      	str	r3, [r7, #64]	; 0x40
 800e7e8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e7ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e7ee:	e841 2300 	strex	r3, r2, [r1]
 800e7f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e7f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d1e6      	bne.n	800e7c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	3308      	adds	r3, #8
 800e800:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e802:	6a3b      	ldr	r3, [r7, #32]
 800e804:	e853 3f00 	ldrex	r3, [r3]
 800e808:	61fb      	str	r3, [r7, #28]
   return(result);
 800e80a:	69fa      	ldr	r2, [r7, #28]
 800e80c:	4b1e      	ldr	r3, [pc, #120]	; (800e888 <UART_EndRxTransfer+0xc8>)
 800e80e:	4013      	ands	r3, r2
 800e810:	64bb      	str	r3, [r7, #72]	; 0x48
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	3308      	adds	r3, #8
 800e818:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e81a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e81c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e81e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e820:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e822:	e841 2300 	strex	r3, r2, [r1]
 800e826:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d1e5      	bne.n	800e7fa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e832:	2b01      	cmp	r3, #1
 800e834:	d118      	bne.n	800e868 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	e853 3f00 	ldrex	r3, [r3]
 800e842:	60bb      	str	r3, [r7, #8]
   return(result);
 800e844:	68bb      	ldr	r3, [r7, #8]
 800e846:	f023 0310 	bic.w	r3, r3, #16
 800e84a:	647b      	str	r3, [r7, #68]	; 0x44
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	461a      	mov	r2, r3
 800e852:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e854:	61bb      	str	r3, [r7, #24]
 800e856:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e858:	6979      	ldr	r1, [r7, #20]
 800e85a:	69ba      	ldr	r2, [r7, #24]
 800e85c:	e841 2300 	strex	r3, r2, [r1]
 800e860:	613b      	str	r3, [r7, #16]
   return(result);
 800e862:	693b      	ldr	r3, [r7, #16]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d1e6      	bne.n	800e836 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	2220      	movs	r2, #32
 800e86c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	2200      	movs	r2, #0
 800e874:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	2200      	movs	r2, #0
 800e87a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800e87c:	bf00      	nop
 800e87e:	3754      	adds	r7, #84	; 0x54
 800e880:	46bd      	mov	sp, r7
 800e882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e886:	4770      	bx	lr
 800e888:	effffffe 	.word	0xeffffffe

0800e88c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b084      	sub	sp, #16
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e898:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	2200      	movs	r2, #0
 800e89e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e8aa:	68f8      	ldr	r0, [r7, #12]
 800e8ac:	f7fe fe26 	bl	800d4fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e8b0:	bf00      	nop
 800e8b2:	3710      	adds	r7, #16
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	bd80      	pop	{r7, pc}

0800e8b8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b088      	sub	sp, #32
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	e853 3f00 	ldrex	r3, [r3]
 800e8cc:	60bb      	str	r3, [r7, #8]
   return(result);
 800e8ce:	68bb      	ldr	r3, [r7, #8]
 800e8d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e8d4:	61fb      	str	r3, [r7, #28]
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	461a      	mov	r2, r3
 800e8dc:	69fb      	ldr	r3, [r7, #28]
 800e8de:	61bb      	str	r3, [r7, #24]
 800e8e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8e2:	6979      	ldr	r1, [r7, #20]
 800e8e4:	69ba      	ldr	r2, [r7, #24]
 800e8e6:	e841 2300 	strex	r3, r2, [r1]
 800e8ea:	613b      	str	r3, [r7, #16]
   return(result);
 800e8ec:	693b      	ldr	r3, [r7, #16]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d1e6      	bne.n	800e8c0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	2220      	movs	r2, #32
 800e8f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e900:	6878      	ldr	r0, [r7, #4]
 800e902:	f7fe fdf1 	bl	800d4e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e906:	bf00      	nop
 800e908:	3720      	adds	r7, #32
 800e90a:	46bd      	mov	sp, r7
 800e90c:	bd80      	pop	{r7, pc}

0800e90e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e90e:	b580      	push	{r7, lr}
 800e910:	b096      	sub	sp, #88	; 0x58
 800e912:	af00      	add	r7, sp, #0
 800e914:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e91c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e926:	2b22      	cmp	r3, #34	; 0x22
 800e928:	f040 8095 	bne.w	800ea56 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e932:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e936:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800e93a:	b2d9      	uxtb	r1, r3
 800e93c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800e940:	b2da      	uxtb	r2, r3
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e946:	400a      	ands	r2, r1
 800e948:	b2d2      	uxtb	r2, r2
 800e94a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e950:	1c5a      	adds	r2, r3, #1
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e95c:	b29b      	uxth	r3, r3
 800e95e:	3b01      	subs	r3, #1
 800e960:	b29a      	uxth	r2, r3
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e96e:	b29b      	uxth	r3, r3
 800e970:	2b00      	cmp	r3, #0
 800e972:	d178      	bne.n	800ea66 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e97a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e97c:	e853 3f00 	ldrex	r3, [r3]
 800e980:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e984:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e988:	653b      	str	r3, [r7, #80]	; 0x50
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	461a      	mov	r2, r3
 800e990:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e992:	647b      	str	r3, [r7, #68]	; 0x44
 800e994:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e996:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e998:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e99a:	e841 2300 	strex	r3, r2, [r1]
 800e99e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e9a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d1e6      	bne.n	800e974 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	3308      	adds	r3, #8
 800e9ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9b0:	e853 3f00 	ldrex	r3, [r3]
 800e9b4:	623b      	str	r3, [r7, #32]
   return(result);
 800e9b6:	6a3b      	ldr	r3, [r7, #32]
 800e9b8:	f023 0301 	bic.w	r3, r3, #1
 800e9bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	3308      	adds	r3, #8
 800e9c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e9c6:	633a      	str	r2, [r7, #48]	; 0x30
 800e9c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e9cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e9ce:	e841 2300 	strex	r3, r2, [r1]
 800e9d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d1e5      	bne.n	800e9a6 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	2220      	movs	r2, #32
 800e9de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9ec:	2b01      	cmp	r3, #1
 800e9ee:	d12e      	bne.n	800ea4e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	2200      	movs	r2, #0
 800e9f4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9fc:	693b      	ldr	r3, [r7, #16]
 800e9fe:	e853 3f00 	ldrex	r3, [r3]
 800ea02:	60fb      	str	r3, [r7, #12]
   return(result);
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	f023 0310 	bic.w	r3, r3, #16
 800ea0a:	64bb      	str	r3, [r7, #72]	; 0x48
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	461a      	mov	r2, r3
 800ea12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea14:	61fb      	str	r3, [r7, #28]
 800ea16:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea18:	69b9      	ldr	r1, [r7, #24]
 800ea1a:	69fa      	ldr	r2, [r7, #28]
 800ea1c:	e841 2300 	strex	r3, r2, [r1]
 800ea20:	617b      	str	r3, [r7, #20]
   return(result);
 800ea22:	697b      	ldr	r3, [r7, #20]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d1e6      	bne.n	800e9f6 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	69db      	ldr	r3, [r3, #28]
 800ea2e:	f003 0310 	and.w	r3, r3, #16
 800ea32:	2b10      	cmp	r3, #16
 800ea34:	d103      	bne.n	800ea3e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	2210      	movs	r2, #16
 800ea3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ea44:	4619      	mov	r1, r3
 800ea46:	6878      	ldr	r0, [r7, #4]
 800ea48:	f7fe fd62 	bl	800d510 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ea4c:	e00b      	b.n	800ea66 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800ea4e:	6878      	ldr	r0, [r7, #4]
 800ea50:	f7f3 f846 	bl	8001ae0 <HAL_UART_RxCpltCallback>
}
 800ea54:	e007      	b.n	800ea66 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	699a      	ldr	r2, [r3, #24]
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	f042 0208 	orr.w	r2, r2, #8
 800ea64:	619a      	str	r2, [r3, #24]
}
 800ea66:	bf00      	nop
 800ea68:	3758      	adds	r7, #88	; 0x58
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	bd80      	pop	{r7, pc}

0800ea6e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ea6e:	b580      	push	{r7, lr}
 800ea70:	b096      	sub	sp, #88	; 0x58
 800ea72:	af00      	add	r7, sp, #0
 800ea74:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ea7c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ea86:	2b22      	cmp	r3, #34	; 0x22
 800ea88:	f040 8095 	bne.w	800ebb6 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea92:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea9a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800ea9c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800eaa0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800eaa4:	4013      	ands	r3, r2
 800eaa6:	b29a      	uxth	r2, r3
 800eaa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eaaa:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eab0:	1c9a      	adds	r2, r3, #2
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800eabc:	b29b      	uxth	r3, r3
 800eabe:	3b01      	subs	r3, #1
 800eac0:	b29a      	uxth	r2, r3
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800eace:	b29b      	uxth	r3, r3
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d178      	bne.n	800ebc6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eadc:	e853 3f00 	ldrex	r3, [r3]
 800eae0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800eae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eae4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800eae8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	461a      	mov	r2, r3
 800eaf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eaf2:	643b      	str	r3, [r7, #64]	; 0x40
 800eaf4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaf6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800eaf8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eafa:	e841 2300 	strex	r3, r2, [r1]
 800eafe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800eb00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d1e6      	bne.n	800ead4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	3308      	adds	r3, #8
 800eb0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb0e:	6a3b      	ldr	r3, [r7, #32]
 800eb10:	e853 3f00 	ldrex	r3, [r3]
 800eb14:	61fb      	str	r3, [r7, #28]
   return(result);
 800eb16:	69fb      	ldr	r3, [r7, #28]
 800eb18:	f023 0301 	bic.w	r3, r3, #1
 800eb1c:	64bb      	str	r3, [r7, #72]	; 0x48
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	3308      	adds	r3, #8
 800eb24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eb26:	62fa      	str	r2, [r7, #44]	; 0x2c
 800eb28:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eb2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb2e:	e841 2300 	strex	r3, r2, [r1]
 800eb32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eb34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d1e5      	bne.n	800eb06 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	2220      	movs	r2, #32
 800eb3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	2200      	movs	r2, #0
 800eb46:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb4c:	2b01      	cmp	r3, #1
 800eb4e:	d12e      	bne.n	800ebae <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	2200      	movs	r2, #0
 800eb54:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	e853 3f00 	ldrex	r3, [r3]
 800eb62:	60bb      	str	r3, [r7, #8]
   return(result);
 800eb64:	68bb      	ldr	r3, [r7, #8]
 800eb66:	f023 0310 	bic.w	r3, r3, #16
 800eb6a:	647b      	str	r3, [r7, #68]	; 0x44
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	461a      	mov	r2, r3
 800eb72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb74:	61bb      	str	r3, [r7, #24]
 800eb76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb78:	6979      	ldr	r1, [r7, #20]
 800eb7a:	69ba      	ldr	r2, [r7, #24]
 800eb7c:	e841 2300 	strex	r3, r2, [r1]
 800eb80:	613b      	str	r3, [r7, #16]
   return(result);
 800eb82:	693b      	ldr	r3, [r7, #16]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d1e6      	bne.n	800eb56 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	69db      	ldr	r3, [r3, #28]
 800eb8e:	f003 0310 	and.w	r3, r3, #16
 800eb92:	2b10      	cmp	r3, #16
 800eb94:	d103      	bne.n	800eb9e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	2210      	movs	r2, #16
 800eb9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800eba4:	4619      	mov	r1, r3
 800eba6:	6878      	ldr	r0, [r7, #4]
 800eba8:	f7fe fcb2 	bl	800d510 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ebac:	e00b      	b.n	800ebc6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800ebae:	6878      	ldr	r0, [r7, #4]
 800ebb0:	f7f2 ff96 	bl	8001ae0 <HAL_UART_RxCpltCallback>
}
 800ebb4:	e007      	b.n	800ebc6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	699a      	ldr	r2, [r3, #24]
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	f042 0208 	orr.w	r2, r2, #8
 800ebc4:	619a      	str	r2, [r3, #24]
}
 800ebc6:	bf00      	nop
 800ebc8:	3758      	adds	r7, #88	; 0x58
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	bd80      	pop	{r7, pc}
	...

0800ebd0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b0a6      	sub	sp, #152	; 0x98
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ebde:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	69db      	ldr	r3, [r3, #28]
 800ebe8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	689b      	ldr	r3, [r3, #8]
 800ebfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ec06:	2b22      	cmp	r3, #34	; 0x22
 800ec08:	f040 814d 	bne.w	800eea6 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ec12:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ec16:	e0f4      	b.n	800ee02 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec1e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ec22:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800ec26:	b2d9      	uxtb	r1, r3
 800ec28:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800ec2c:	b2da      	uxtb	r2, r3
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec32:	400a      	ands	r2, r1
 800ec34:	b2d2      	uxtb	r2, r2
 800ec36:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec3c:	1c5a      	adds	r2, r3, #1
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ec48:	b29b      	uxth	r3, r3
 800ec4a:	3b01      	subs	r3, #1
 800ec4c:	b29a      	uxth	r2, r3
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	69db      	ldr	r3, [r3, #28]
 800ec5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ec5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ec62:	f003 0307 	and.w	r3, r3, #7
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d053      	beq.n	800ed12 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ec6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ec6e:	f003 0301 	and.w	r3, r3, #1
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d011      	beq.n	800ec9a <UART_RxISR_8BIT_FIFOEN+0xca>
 800ec76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ec7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d00b      	beq.n	800ec9a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	2201      	movs	r2, #1
 800ec88:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ec90:	f043 0201 	orr.w	r2, r3, #1
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ec9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ec9e:	f003 0302 	and.w	r3, r3, #2
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d011      	beq.n	800ecca <UART_RxISR_8BIT_FIFOEN+0xfa>
 800eca6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ecaa:	f003 0301 	and.w	r3, r3, #1
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d00b      	beq.n	800ecca <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	2202      	movs	r2, #2
 800ecb8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ecc0:	f043 0204 	orr.w	r2, r3, #4
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ecca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ecce:	f003 0304 	and.w	r3, r3, #4
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d011      	beq.n	800ecfa <UART_RxISR_8BIT_FIFOEN+0x12a>
 800ecd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ecda:	f003 0301 	and.w	r3, r3, #1
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d00b      	beq.n	800ecfa <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	2204      	movs	r2, #4
 800ece8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ecf0:	f043 0202 	orr.w	r2, r3, #2
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d006      	beq.n	800ed12 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ed04:	6878      	ldr	r0, [r7, #4]
 800ed06:	f7fe fbf9 	bl	800d4fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ed18:	b29b      	uxth	r3, r3
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d171      	bne.n	800ee02 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ed26:	e853 3f00 	ldrex	r3, [r3]
 800ed2a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800ed2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ed2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ed32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	461a      	mov	r2, r3
 800ed3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ed40:	66bb      	str	r3, [r7, #104]	; 0x68
 800ed42:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed44:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ed46:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ed48:	e841 2300 	strex	r3, r2, [r1]
 800ed4c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800ed4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d1e4      	bne.n	800ed1e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	3308      	adds	r3, #8
 800ed5a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed5e:	e853 3f00 	ldrex	r3, [r3]
 800ed62:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ed64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ed66:	4b56      	ldr	r3, [pc, #344]	; (800eec0 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800ed68:	4013      	ands	r3, r2
 800ed6a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	3308      	adds	r3, #8
 800ed72:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ed74:	657a      	str	r2, [r7, #84]	; 0x54
 800ed76:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed78:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ed7a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ed7c:	e841 2300 	strex	r3, r2, [r1]
 800ed80:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ed82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d1e5      	bne.n	800ed54 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	2220      	movs	r2, #32
 800ed8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	2200      	movs	r2, #0
 800ed94:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed9a:	2b01      	cmp	r3, #1
 800ed9c:	d12e      	bne.n	800edfc <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	2200      	movs	r2, #0
 800eda2:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edac:	e853 3f00 	ldrex	r3, [r3]
 800edb0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800edb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edb4:	f023 0310 	bic.w	r3, r3, #16
 800edb8:	67bb      	str	r3, [r7, #120]	; 0x78
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	461a      	mov	r2, r3
 800edc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800edc2:	643b      	str	r3, [r7, #64]	; 0x40
 800edc4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edc6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800edc8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800edca:	e841 2300 	strex	r3, r2, [r1]
 800edce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800edd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d1e6      	bne.n	800eda4 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	69db      	ldr	r3, [r3, #28]
 800eddc:	f003 0310 	and.w	r3, r3, #16
 800ede0:	2b10      	cmp	r3, #16
 800ede2:	d103      	bne.n	800edec <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	2210      	movs	r2, #16
 800edea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800edf2:	4619      	mov	r1, r3
 800edf4:	6878      	ldr	r0, [r7, #4]
 800edf6:	f7fe fb8b 	bl	800d510 <HAL_UARTEx_RxEventCallback>
 800edfa:	e002      	b.n	800ee02 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800edfc:	6878      	ldr	r0, [r7, #4]
 800edfe:	f7f2 fe6f 	bl	8001ae0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ee02:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d006      	beq.n	800ee18 <UART_RxISR_8BIT_FIFOEN+0x248>
 800ee0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ee0e:	f003 0320 	and.w	r3, r3, #32
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	f47f af00 	bne.w	800ec18 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ee1e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ee22:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d045      	beq.n	800eeb6 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ee30:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ee34:	429a      	cmp	r2, r3
 800ee36:	d23e      	bcs.n	800eeb6 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	3308      	adds	r3, #8
 800ee3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee40:	6a3b      	ldr	r3, [r7, #32]
 800ee42:	e853 3f00 	ldrex	r3, [r3]
 800ee46:	61fb      	str	r3, [r7, #28]
   return(result);
 800ee48:	69fb      	ldr	r3, [r7, #28]
 800ee4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ee4e:	673b      	str	r3, [r7, #112]	; 0x70
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	3308      	adds	r3, #8
 800ee56:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ee58:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ee5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ee5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee60:	e841 2300 	strex	r3, r2, [r1]
 800ee64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ee66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d1e5      	bne.n	800ee38 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	4a15      	ldr	r2, [pc, #84]	; (800eec4 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800ee70:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	e853 3f00 	ldrex	r3, [r3]
 800ee7e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ee80:	68bb      	ldr	r3, [r7, #8]
 800ee82:	f043 0320 	orr.w	r3, r3, #32
 800ee86:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	461a      	mov	r2, r3
 800ee8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee90:	61bb      	str	r3, [r7, #24]
 800ee92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee94:	6979      	ldr	r1, [r7, #20]
 800ee96:	69ba      	ldr	r2, [r7, #24]
 800ee98:	e841 2300 	strex	r3, r2, [r1]
 800ee9c:	613b      	str	r3, [r7, #16]
   return(result);
 800ee9e:	693b      	ldr	r3, [r7, #16]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d1e6      	bne.n	800ee72 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800eea4:	e007      	b.n	800eeb6 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	699a      	ldr	r2, [r3, #24]
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	f042 0208 	orr.w	r2, r2, #8
 800eeb4:	619a      	str	r2, [r3, #24]
}
 800eeb6:	bf00      	nop
 800eeb8:	3798      	adds	r7, #152	; 0x98
 800eeba:	46bd      	mov	sp, r7
 800eebc:	bd80      	pop	{r7, pc}
 800eebe:	bf00      	nop
 800eec0:	effffffe 	.word	0xeffffffe
 800eec4:	0800e90f 	.word	0x0800e90f

0800eec8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b0a8      	sub	sp, #160	; 0xa0
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800eed6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	69db      	ldr	r3, [r3, #28]
 800eee0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	689b      	ldr	r3, [r3, #8]
 800eef4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eefe:	2b22      	cmp	r3, #34	; 0x22
 800ef00:	f040 8151 	bne.w	800f1a6 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ef0a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ef0e:	e0f8      	b.n	800f102 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef16:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800ef22:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800ef26:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800ef2a:	4013      	ands	r3, r2
 800ef2c:	b29a      	uxth	r2, r3
 800ef2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ef32:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef38:	1c9a      	adds	r2, r3, #2
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ef44:	b29b      	uxth	r3, r3
 800ef46:	3b01      	subs	r3, #1
 800ef48:	b29a      	uxth	r2, r3
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	69db      	ldr	r3, [r3, #28]
 800ef56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ef5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ef5e:	f003 0307 	and.w	r3, r3, #7
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d053      	beq.n	800f00e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ef66:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ef6a:	f003 0301 	and.w	r3, r3, #1
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d011      	beq.n	800ef96 <UART_RxISR_16BIT_FIFOEN+0xce>
 800ef72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ef76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d00b      	beq.n	800ef96 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	2201      	movs	r2, #1
 800ef84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ef8c:	f043 0201 	orr.w	r2, r3, #1
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ef96:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ef9a:	f003 0302 	and.w	r3, r3, #2
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d011      	beq.n	800efc6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800efa2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800efa6:	f003 0301 	and.w	r3, r3, #1
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d00b      	beq.n	800efc6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	2202      	movs	r2, #2
 800efb4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800efbc:	f043 0204 	orr.w	r2, r3, #4
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800efc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800efca:	f003 0304 	and.w	r3, r3, #4
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d011      	beq.n	800eff6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800efd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800efd6:	f003 0301 	and.w	r3, r3, #1
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d00b      	beq.n	800eff6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	2204      	movs	r2, #4
 800efe4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800efec:	f043 0202 	orr.w	r2, r3, #2
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800effc:	2b00      	cmp	r3, #0
 800effe:	d006      	beq.n	800f00e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f000:	6878      	ldr	r0, [r7, #4]
 800f002:	f7fe fa7b 	bl	800d4fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	2200      	movs	r2, #0
 800f00a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f014:	b29b      	uxth	r3, r3
 800f016:	2b00      	cmp	r3, #0
 800f018:	d173      	bne.n	800f102 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f020:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f022:	e853 3f00 	ldrex	r3, [r3]
 800f026:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f028:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f02a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f02e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	461a      	mov	r2, r3
 800f038:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f03c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f03e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f040:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f042:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f044:	e841 2300 	strex	r3, r2, [r1]
 800f048:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f04a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d1e4      	bne.n	800f01a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	3308      	adds	r3, #8
 800f056:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f05a:	e853 3f00 	ldrex	r3, [r3]
 800f05e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f060:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f062:	4b57      	ldr	r3, [pc, #348]	; (800f1c0 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800f064:	4013      	ands	r3, r2
 800f066:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	3308      	adds	r3, #8
 800f070:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f074:	65ba      	str	r2, [r7, #88]	; 0x58
 800f076:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f078:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f07a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f07c:	e841 2300 	strex	r3, r2, [r1]
 800f080:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f082:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f084:	2b00      	cmp	r3, #0
 800f086:	d1e3      	bne.n	800f050 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	2220      	movs	r2, #32
 800f08c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	2200      	movs	r2, #0
 800f094:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f09a:	2b01      	cmp	r3, #1
 800f09c:	d12e      	bne.n	800f0fc <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0ac:	e853 3f00 	ldrex	r3, [r3]
 800f0b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f0b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0b4:	f023 0310 	bic.w	r3, r3, #16
 800f0b8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	461a      	mov	r2, r3
 800f0c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f0c2:	647b      	str	r3, [r7, #68]	; 0x44
 800f0c4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f0c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f0ca:	e841 2300 	strex	r3, r2, [r1]
 800f0ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f0d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d1e6      	bne.n	800f0a4 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	69db      	ldr	r3, [r3, #28]
 800f0dc:	f003 0310 	and.w	r3, r3, #16
 800f0e0:	2b10      	cmp	r3, #16
 800f0e2:	d103      	bne.n	800f0ec <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	2210      	movs	r2, #16
 800f0ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f0f2:	4619      	mov	r1, r3
 800f0f4:	6878      	ldr	r0, [r7, #4]
 800f0f6:	f7fe fa0b 	bl	800d510 <HAL_UARTEx_RxEventCallback>
 800f0fa:	e002      	b.n	800f102 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f0fc:	6878      	ldr	r0, [r7, #4]
 800f0fe:	f7f2 fcef 	bl	8001ae0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f102:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800f106:	2b00      	cmp	r3, #0
 800f108:	d006      	beq.n	800f118 <UART_RxISR_16BIT_FIFOEN+0x250>
 800f10a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f10e:	f003 0320 	and.w	r3, r3, #32
 800f112:	2b00      	cmp	r3, #0
 800f114:	f47f aefc 	bne.w	800ef10 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f11e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f122:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800f126:	2b00      	cmp	r3, #0
 800f128:	d045      	beq.n	800f1b6 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f130:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800f134:	429a      	cmp	r2, r3
 800f136:	d23e      	bcs.n	800f1b6 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	3308      	adds	r3, #8
 800f13e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f142:	e853 3f00 	ldrex	r3, [r3]
 800f146:	623b      	str	r3, [r7, #32]
   return(result);
 800f148:	6a3b      	ldr	r3, [r7, #32]
 800f14a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f14e:	677b      	str	r3, [r7, #116]	; 0x74
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	3308      	adds	r3, #8
 800f156:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800f158:	633a      	str	r2, [r7, #48]	; 0x30
 800f15a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f15c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f15e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f160:	e841 2300 	strex	r3, r2, [r1]
 800f164:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d1e5      	bne.n	800f138 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	4a15      	ldr	r2, [pc, #84]	; (800f1c4 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800f170:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f178:	693b      	ldr	r3, [r7, #16]
 800f17a:	e853 3f00 	ldrex	r3, [r3]
 800f17e:	60fb      	str	r3, [r7, #12]
   return(result);
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	f043 0320 	orr.w	r3, r3, #32
 800f186:	673b      	str	r3, [r7, #112]	; 0x70
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	461a      	mov	r2, r3
 800f18e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f190:	61fb      	str	r3, [r7, #28]
 800f192:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f194:	69b9      	ldr	r1, [r7, #24]
 800f196:	69fa      	ldr	r2, [r7, #28]
 800f198:	e841 2300 	strex	r3, r2, [r1]
 800f19c:	617b      	str	r3, [r7, #20]
   return(result);
 800f19e:	697b      	ldr	r3, [r7, #20]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d1e6      	bne.n	800f172 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f1a4:	e007      	b.n	800f1b6 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	699a      	ldr	r2, [r3, #24]
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	f042 0208 	orr.w	r2, r2, #8
 800f1b4:	619a      	str	r2, [r3, #24]
}
 800f1b6:	bf00      	nop
 800f1b8:	37a0      	adds	r7, #160	; 0xa0
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	bd80      	pop	{r7, pc}
 800f1be:	bf00      	nop
 800f1c0:	effffffe 	.word	0xeffffffe
 800f1c4:	0800ea6f 	.word	0x0800ea6f

0800f1c8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f1c8:	b480      	push	{r7}
 800f1ca:	b083      	sub	sp, #12
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f1d0:	bf00      	nop
 800f1d2:	370c      	adds	r7, #12
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1da:	4770      	bx	lr

0800f1dc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f1dc:	b480      	push	{r7}
 800f1de:	b083      	sub	sp, #12
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f1e4:	bf00      	nop
 800f1e6:	370c      	adds	r7, #12
 800f1e8:	46bd      	mov	sp, r7
 800f1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ee:	4770      	bx	lr

0800f1f0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f1f0:	b480      	push	{r7}
 800f1f2:	b083      	sub	sp, #12
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f1f8:	bf00      	nop
 800f1fa:	370c      	adds	r7, #12
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f202:	4770      	bx	lr

0800f204 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f204:	b480      	push	{r7}
 800f206:	b085      	sub	sp, #20
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f212:	2b01      	cmp	r3, #1
 800f214:	d101      	bne.n	800f21a <HAL_UARTEx_DisableFifoMode+0x16>
 800f216:	2302      	movs	r3, #2
 800f218:	e027      	b.n	800f26a <HAL_UARTEx_DisableFifoMode+0x66>
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	2201      	movs	r2, #1
 800f21e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	2224      	movs	r2, #36	; 0x24
 800f226:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	681a      	ldr	r2, [r3, #0]
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	f022 0201 	bic.w	r2, r2, #1
 800f240:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f248:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	2200      	movs	r2, #0
 800f24e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	68fa      	ldr	r2, [r7, #12]
 800f256:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	2220      	movs	r2, #32
 800f25c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	2200      	movs	r2, #0
 800f264:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f268:	2300      	movs	r3, #0
}
 800f26a:	4618      	mov	r0, r3
 800f26c:	3714      	adds	r7, #20
 800f26e:	46bd      	mov	sp, r7
 800f270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f274:	4770      	bx	lr

0800f276 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f276:	b580      	push	{r7, lr}
 800f278:	b084      	sub	sp, #16
 800f27a:	af00      	add	r7, sp, #0
 800f27c:	6078      	str	r0, [r7, #4]
 800f27e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f286:	2b01      	cmp	r3, #1
 800f288:	d101      	bne.n	800f28e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f28a:	2302      	movs	r3, #2
 800f28c:	e02d      	b.n	800f2ea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	2201      	movs	r2, #1
 800f292:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	2224      	movs	r2, #36	; 0x24
 800f29a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	681a      	ldr	r2, [r3, #0]
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	f022 0201 	bic.w	r2, r2, #1
 800f2b4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	689b      	ldr	r3, [r3, #8]
 800f2bc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	683a      	ldr	r2, [r7, #0]
 800f2c6:	430a      	orrs	r2, r1
 800f2c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f2ca:	6878      	ldr	r0, [r7, #4]
 800f2cc:	f000 f850 	bl	800f370 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	68fa      	ldr	r2, [r7, #12]
 800f2d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	2220      	movs	r2, #32
 800f2dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f2e8:	2300      	movs	r3, #0
}
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	3710      	adds	r7, #16
 800f2ee:	46bd      	mov	sp, r7
 800f2f0:	bd80      	pop	{r7, pc}

0800f2f2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f2f2:	b580      	push	{r7, lr}
 800f2f4:	b084      	sub	sp, #16
 800f2f6:	af00      	add	r7, sp, #0
 800f2f8:	6078      	str	r0, [r7, #4]
 800f2fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f302:	2b01      	cmp	r3, #1
 800f304:	d101      	bne.n	800f30a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f306:	2302      	movs	r3, #2
 800f308:	e02d      	b.n	800f366 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	2201      	movs	r2, #1
 800f30e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	2224      	movs	r2, #36	; 0x24
 800f316:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	681a      	ldr	r2, [r3, #0]
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	f022 0201 	bic.w	r2, r2, #1
 800f330:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	689b      	ldr	r3, [r3, #8]
 800f338:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	683a      	ldr	r2, [r7, #0]
 800f342:	430a      	orrs	r2, r1
 800f344:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f346:	6878      	ldr	r0, [r7, #4]
 800f348:	f000 f812 	bl	800f370 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	68fa      	ldr	r2, [r7, #12]
 800f352:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	2220      	movs	r2, #32
 800f358:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	2200      	movs	r2, #0
 800f360:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f364:	2300      	movs	r3, #0
}
 800f366:	4618      	mov	r0, r3
 800f368:	3710      	adds	r7, #16
 800f36a:	46bd      	mov	sp, r7
 800f36c:	bd80      	pop	{r7, pc}
	...

0800f370 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f370:	b480      	push	{r7}
 800f372:	b085      	sub	sp, #20
 800f374:	af00      	add	r7, sp, #0
 800f376:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d108      	bne.n	800f392 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	2201      	movs	r2, #1
 800f384:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	2201      	movs	r2, #1
 800f38c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f390:	e031      	b.n	800f3f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f392:	2310      	movs	r3, #16
 800f394:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f396:	2310      	movs	r3, #16
 800f398:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	689b      	ldr	r3, [r3, #8]
 800f3a0:	0e5b      	lsrs	r3, r3, #25
 800f3a2:	b2db      	uxtb	r3, r3
 800f3a4:	f003 0307 	and.w	r3, r3, #7
 800f3a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	689b      	ldr	r3, [r3, #8]
 800f3b0:	0f5b      	lsrs	r3, r3, #29
 800f3b2:	b2db      	uxtb	r3, r3
 800f3b4:	f003 0307 	and.w	r3, r3, #7
 800f3b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f3ba:	7bbb      	ldrb	r3, [r7, #14]
 800f3bc:	7b3a      	ldrb	r2, [r7, #12]
 800f3be:	4911      	ldr	r1, [pc, #68]	; (800f404 <UARTEx_SetNbDataToProcess+0x94>)
 800f3c0:	5c8a      	ldrb	r2, [r1, r2]
 800f3c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f3c6:	7b3a      	ldrb	r2, [r7, #12]
 800f3c8:	490f      	ldr	r1, [pc, #60]	; (800f408 <UARTEx_SetNbDataToProcess+0x98>)
 800f3ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f3cc:	fb93 f3f2 	sdiv	r3, r3, r2
 800f3d0:	b29a      	uxth	r2, r3
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f3d8:	7bfb      	ldrb	r3, [r7, #15]
 800f3da:	7b7a      	ldrb	r2, [r7, #13]
 800f3dc:	4909      	ldr	r1, [pc, #36]	; (800f404 <UARTEx_SetNbDataToProcess+0x94>)
 800f3de:	5c8a      	ldrb	r2, [r1, r2]
 800f3e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f3e4:	7b7a      	ldrb	r2, [r7, #13]
 800f3e6:	4908      	ldr	r1, [pc, #32]	; (800f408 <UARTEx_SetNbDataToProcess+0x98>)
 800f3e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f3ea:	fb93 f3f2 	sdiv	r3, r3, r2
 800f3ee:	b29a      	uxth	r2, r3
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f3f6:	bf00      	nop
 800f3f8:	3714      	adds	r7, #20
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f400:	4770      	bx	lr
 800f402:	bf00      	nop
 800f404:	08011cb0 	.word	0x08011cb0
 800f408:	08011cb8 	.word	0x08011cb8

0800f40c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f40c:	b480      	push	{r7}
 800f40e:	b083      	sub	sp, #12
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	f103 0208 	add.w	r2, r3, #8
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f424:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	f103 0208 	add.w	r2, r3, #8
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	f103 0208 	add.w	r2, r3, #8
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	2200      	movs	r2, #0
 800f43e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f440:	bf00      	nop
 800f442:	370c      	adds	r7, #12
 800f444:	46bd      	mov	sp, r7
 800f446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44a:	4770      	bx	lr

0800f44c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f44c:	b480      	push	{r7}
 800f44e:	b083      	sub	sp, #12
 800f450:	af00      	add	r7, sp, #0
 800f452:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	2200      	movs	r2, #0
 800f458:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f45a:	bf00      	nop
 800f45c:	370c      	adds	r7, #12
 800f45e:	46bd      	mov	sp, r7
 800f460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f464:	4770      	bx	lr

0800f466 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f466:	b480      	push	{r7}
 800f468:	b085      	sub	sp, #20
 800f46a:	af00      	add	r7, sp, #0
 800f46c:	6078      	str	r0, [r7, #4]
 800f46e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	685b      	ldr	r3, [r3, #4]
 800f474:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f476:	683b      	ldr	r3, [r7, #0]
 800f478:	68fa      	ldr	r2, [r7, #12]
 800f47a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	689a      	ldr	r2, [r3, #8]
 800f480:	683b      	ldr	r3, [r7, #0]
 800f482:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	689b      	ldr	r3, [r3, #8]
 800f488:	683a      	ldr	r2, [r7, #0]
 800f48a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	683a      	ldr	r2, [r7, #0]
 800f490:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f492:	683b      	ldr	r3, [r7, #0]
 800f494:	687a      	ldr	r2, [r7, #4]
 800f496:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	1c5a      	adds	r2, r3, #1
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	601a      	str	r2, [r3, #0]
}
 800f4a2:	bf00      	nop
 800f4a4:	3714      	adds	r7, #20
 800f4a6:	46bd      	mov	sp, r7
 800f4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ac:	4770      	bx	lr

0800f4ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f4ae:	b480      	push	{r7}
 800f4b0:	b085      	sub	sp, #20
 800f4b2:	af00      	add	r7, sp, #0
 800f4b4:	6078      	str	r0, [r7, #4]
 800f4b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f4b8:	683b      	ldr	r3, [r7, #0]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f4be:	68bb      	ldr	r3, [r7, #8]
 800f4c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f4c4:	d103      	bne.n	800f4ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	691b      	ldr	r3, [r3, #16]
 800f4ca:	60fb      	str	r3, [r7, #12]
 800f4cc:	e00c      	b.n	800f4e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	3308      	adds	r3, #8
 800f4d2:	60fb      	str	r3, [r7, #12]
 800f4d4:	e002      	b.n	800f4dc <vListInsert+0x2e>
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	685b      	ldr	r3, [r3, #4]
 800f4da:	60fb      	str	r3, [r7, #12]
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	685b      	ldr	r3, [r3, #4]
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	68ba      	ldr	r2, [r7, #8]
 800f4e4:	429a      	cmp	r2, r3
 800f4e6:	d2f6      	bcs.n	800f4d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	685a      	ldr	r2, [r3, #4]
 800f4ec:	683b      	ldr	r3, [r7, #0]
 800f4ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f4f0:	683b      	ldr	r3, [r7, #0]
 800f4f2:	685b      	ldr	r3, [r3, #4]
 800f4f4:	683a      	ldr	r2, [r7, #0]
 800f4f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f4f8:	683b      	ldr	r3, [r7, #0]
 800f4fa:	68fa      	ldr	r2, [r7, #12]
 800f4fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	683a      	ldr	r2, [r7, #0]
 800f502:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f504:	683b      	ldr	r3, [r7, #0]
 800f506:	687a      	ldr	r2, [r7, #4]
 800f508:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	1c5a      	adds	r2, r3, #1
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	601a      	str	r2, [r3, #0]
}
 800f514:	bf00      	nop
 800f516:	3714      	adds	r7, #20
 800f518:	46bd      	mov	sp, r7
 800f51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f51e:	4770      	bx	lr

0800f520 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f520:	b480      	push	{r7}
 800f522:	b085      	sub	sp, #20
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	691b      	ldr	r3, [r3, #16]
 800f52c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	685b      	ldr	r3, [r3, #4]
 800f532:	687a      	ldr	r2, [r7, #4]
 800f534:	6892      	ldr	r2, [r2, #8]
 800f536:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	689b      	ldr	r3, [r3, #8]
 800f53c:	687a      	ldr	r2, [r7, #4]
 800f53e:	6852      	ldr	r2, [r2, #4]
 800f540:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	685b      	ldr	r3, [r3, #4]
 800f546:	687a      	ldr	r2, [r7, #4]
 800f548:	429a      	cmp	r2, r3
 800f54a:	d103      	bne.n	800f554 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	689a      	ldr	r2, [r3, #8]
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	2200      	movs	r2, #0
 800f558:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	1e5a      	subs	r2, r3, #1
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	681b      	ldr	r3, [r3, #0]
}
 800f568:	4618      	mov	r0, r3
 800f56a:	3714      	adds	r7, #20
 800f56c:	46bd      	mov	sp, r7
 800f56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f572:	4770      	bx	lr

0800f574 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f574:	b580      	push	{r7, lr}
 800f576:	b084      	sub	sp, #16
 800f578:	af00      	add	r7, sp, #0
 800f57a:	6078      	str	r0, [r7, #4]
 800f57c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d10a      	bne.n	800f59e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f58c:	f383 8811 	msr	BASEPRI, r3
 800f590:	f3bf 8f6f 	isb	sy
 800f594:	f3bf 8f4f 	dsb	sy
 800f598:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f59a:	bf00      	nop
 800f59c:	e7fe      	b.n	800f59c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f59e:	f001 fef9 	bl	8011394 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	681a      	ldr	r2, [r3, #0]
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5aa:	68f9      	ldr	r1, [r7, #12]
 800f5ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f5ae:	fb01 f303 	mul.w	r3, r1, r3
 800f5b2:	441a      	add	r2, r3
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	681a      	ldr	r2, [r3, #0]
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	681a      	ldr	r2, [r3, #0]
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5ce:	3b01      	subs	r3, #1
 800f5d0:	68f9      	ldr	r1, [r7, #12]
 800f5d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f5d4:	fb01 f303 	mul.w	r3, r1, r3
 800f5d8:	441a      	add	r2, r3
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	22ff      	movs	r2, #255	; 0xff
 800f5e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	22ff      	movs	r2, #255	; 0xff
 800f5ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f5ee:	683b      	ldr	r3, [r7, #0]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d114      	bne.n	800f61e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	691b      	ldr	r3, [r3, #16]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d01a      	beq.n	800f632 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	3310      	adds	r3, #16
 800f600:	4618      	mov	r0, r3
 800f602:	f001 f9bd 	bl	8010980 <xTaskRemoveFromEventList>
 800f606:	4603      	mov	r3, r0
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d012      	beq.n	800f632 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f60c:	4b0c      	ldr	r3, [pc, #48]	; (800f640 <xQueueGenericReset+0xcc>)
 800f60e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f612:	601a      	str	r2, [r3, #0]
 800f614:	f3bf 8f4f 	dsb	sy
 800f618:	f3bf 8f6f 	isb	sy
 800f61c:	e009      	b.n	800f632 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	3310      	adds	r3, #16
 800f622:	4618      	mov	r0, r3
 800f624:	f7ff fef2 	bl	800f40c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	3324      	adds	r3, #36	; 0x24
 800f62c:	4618      	mov	r0, r3
 800f62e:	f7ff feed 	bl	800f40c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f632:	f001 fedf 	bl	80113f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f636:	2301      	movs	r3, #1
}
 800f638:	4618      	mov	r0, r3
 800f63a:	3710      	adds	r7, #16
 800f63c:	46bd      	mov	sp, r7
 800f63e:	bd80      	pop	{r7, pc}
 800f640:	e000ed04 	.word	0xe000ed04

0800f644 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f644:	b580      	push	{r7, lr}
 800f646:	b08a      	sub	sp, #40	; 0x28
 800f648:	af02      	add	r7, sp, #8
 800f64a:	60f8      	str	r0, [r7, #12]
 800f64c:	60b9      	str	r1, [r7, #8]
 800f64e:	4613      	mov	r3, r2
 800f650:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	2b00      	cmp	r3, #0
 800f656:	d10a      	bne.n	800f66e <xQueueGenericCreate+0x2a>
	__asm volatile
 800f658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f65c:	f383 8811 	msr	BASEPRI, r3
 800f660:	f3bf 8f6f 	isb	sy
 800f664:	f3bf 8f4f 	dsb	sy
 800f668:	613b      	str	r3, [r7, #16]
}
 800f66a:	bf00      	nop
 800f66c:	e7fe      	b.n	800f66c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	68ba      	ldr	r2, [r7, #8]
 800f672:	fb02 f303 	mul.w	r3, r2, r3
 800f676:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f678:	69fb      	ldr	r3, [r7, #28]
 800f67a:	3348      	adds	r3, #72	; 0x48
 800f67c:	4618      	mov	r0, r3
 800f67e:	f001 ffab 	bl	80115d8 <pvPortMalloc>
 800f682:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f684:	69bb      	ldr	r3, [r7, #24]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d011      	beq.n	800f6ae <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f68a:	69bb      	ldr	r3, [r7, #24]
 800f68c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f68e:	697b      	ldr	r3, [r7, #20]
 800f690:	3348      	adds	r3, #72	; 0x48
 800f692:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f694:	69bb      	ldr	r3, [r7, #24]
 800f696:	2200      	movs	r2, #0
 800f698:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f69c:	79fa      	ldrb	r2, [r7, #7]
 800f69e:	69bb      	ldr	r3, [r7, #24]
 800f6a0:	9300      	str	r3, [sp, #0]
 800f6a2:	4613      	mov	r3, r2
 800f6a4:	697a      	ldr	r2, [r7, #20]
 800f6a6:	68b9      	ldr	r1, [r7, #8]
 800f6a8:	68f8      	ldr	r0, [r7, #12]
 800f6aa:	f000 f805 	bl	800f6b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f6ae:	69bb      	ldr	r3, [r7, #24]
	}
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	3720      	adds	r7, #32
 800f6b4:	46bd      	mov	sp, r7
 800f6b6:	bd80      	pop	{r7, pc}

0800f6b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	b084      	sub	sp, #16
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	60f8      	str	r0, [r7, #12]
 800f6c0:	60b9      	str	r1, [r7, #8]
 800f6c2:	607a      	str	r2, [r7, #4]
 800f6c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f6c6:	68bb      	ldr	r3, [r7, #8]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d103      	bne.n	800f6d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f6cc:	69bb      	ldr	r3, [r7, #24]
 800f6ce:	69ba      	ldr	r2, [r7, #24]
 800f6d0:	601a      	str	r2, [r3, #0]
 800f6d2:	e002      	b.n	800f6da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f6d4:	69bb      	ldr	r3, [r7, #24]
 800f6d6:	687a      	ldr	r2, [r7, #4]
 800f6d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f6da:	69bb      	ldr	r3, [r7, #24]
 800f6dc:	68fa      	ldr	r2, [r7, #12]
 800f6de:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f6e0:	69bb      	ldr	r3, [r7, #24]
 800f6e2:	68ba      	ldr	r2, [r7, #8]
 800f6e4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f6e6:	2101      	movs	r1, #1
 800f6e8:	69b8      	ldr	r0, [r7, #24]
 800f6ea:	f7ff ff43 	bl	800f574 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f6ee:	bf00      	nop
 800f6f0:	3710      	adds	r7, #16
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	bd80      	pop	{r7, pc}
	...

0800f6f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b08e      	sub	sp, #56	; 0x38
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	60f8      	str	r0, [r7, #12]
 800f700:	60b9      	str	r1, [r7, #8]
 800f702:	607a      	str	r2, [r7, #4]
 800f704:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f706:	2300      	movs	r3, #0
 800f708:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f710:	2b00      	cmp	r3, #0
 800f712:	d10a      	bne.n	800f72a <xQueueGenericSend+0x32>
	__asm volatile
 800f714:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f718:	f383 8811 	msr	BASEPRI, r3
 800f71c:	f3bf 8f6f 	isb	sy
 800f720:	f3bf 8f4f 	dsb	sy
 800f724:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f726:	bf00      	nop
 800f728:	e7fe      	b.n	800f728 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f72a:	68bb      	ldr	r3, [r7, #8]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d103      	bne.n	800f738 <xQueueGenericSend+0x40>
 800f730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f734:	2b00      	cmp	r3, #0
 800f736:	d101      	bne.n	800f73c <xQueueGenericSend+0x44>
 800f738:	2301      	movs	r3, #1
 800f73a:	e000      	b.n	800f73e <xQueueGenericSend+0x46>
 800f73c:	2300      	movs	r3, #0
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d10a      	bne.n	800f758 <xQueueGenericSend+0x60>
	__asm volatile
 800f742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f746:	f383 8811 	msr	BASEPRI, r3
 800f74a:	f3bf 8f6f 	isb	sy
 800f74e:	f3bf 8f4f 	dsb	sy
 800f752:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f754:	bf00      	nop
 800f756:	e7fe      	b.n	800f756 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f758:	683b      	ldr	r3, [r7, #0]
 800f75a:	2b02      	cmp	r3, #2
 800f75c:	d103      	bne.n	800f766 <xQueueGenericSend+0x6e>
 800f75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f762:	2b01      	cmp	r3, #1
 800f764:	d101      	bne.n	800f76a <xQueueGenericSend+0x72>
 800f766:	2301      	movs	r3, #1
 800f768:	e000      	b.n	800f76c <xQueueGenericSend+0x74>
 800f76a:	2300      	movs	r3, #0
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d10a      	bne.n	800f786 <xQueueGenericSend+0x8e>
	__asm volatile
 800f770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f774:	f383 8811 	msr	BASEPRI, r3
 800f778:	f3bf 8f6f 	isb	sy
 800f77c:	f3bf 8f4f 	dsb	sy
 800f780:	623b      	str	r3, [r7, #32]
}
 800f782:	bf00      	nop
 800f784:	e7fe      	b.n	800f784 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f786:	f001 fab7 	bl	8010cf8 <xTaskGetSchedulerState>
 800f78a:	4603      	mov	r3, r0
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d102      	bne.n	800f796 <xQueueGenericSend+0x9e>
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d101      	bne.n	800f79a <xQueueGenericSend+0xa2>
 800f796:	2301      	movs	r3, #1
 800f798:	e000      	b.n	800f79c <xQueueGenericSend+0xa4>
 800f79a:	2300      	movs	r3, #0
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d10a      	bne.n	800f7b6 <xQueueGenericSend+0xbe>
	__asm volatile
 800f7a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7a4:	f383 8811 	msr	BASEPRI, r3
 800f7a8:	f3bf 8f6f 	isb	sy
 800f7ac:	f3bf 8f4f 	dsb	sy
 800f7b0:	61fb      	str	r3, [r7, #28]
}
 800f7b2:	bf00      	nop
 800f7b4:	e7fe      	b.n	800f7b4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f7b6:	f001 fded 	bl	8011394 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f7c2:	429a      	cmp	r2, r3
 800f7c4:	d302      	bcc.n	800f7cc <xQueueGenericSend+0xd4>
 800f7c6:	683b      	ldr	r3, [r7, #0]
 800f7c8:	2b02      	cmp	r3, #2
 800f7ca:	d129      	bne.n	800f820 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f7cc:	683a      	ldr	r2, [r7, #0]
 800f7ce:	68b9      	ldr	r1, [r7, #8]
 800f7d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f7d2:	f000 fbbb 	bl	800ff4c <prvCopyDataToQueue>
 800f7d6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d010      	beq.n	800f802 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7e2:	3324      	adds	r3, #36	; 0x24
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	f001 f8cb 	bl	8010980 <xTaskRemoveFromEventList>
 800f7ea:	4603      	mov	r3, r0
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d013      	beq.n	800f818 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f7f0:	4b3f      	ldr	r3, [pc, #252]	; (800f8f0 <xQueueGenericSend+0x1f8>)
 800f7f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f7f6:	601a      	str	r2, [r3, #0]
 800f7f8:	f3bf 8f4f 	dsb	sy
 800f7fc:	f3bf 8f6f 	isb	sy
 800f800:	e00a      	b.n	800f818 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f804:	2b00      	cmp	r3, #0
 800f806:	d007      	beq.n	800f818 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f808:	4b39      	ldr	r3, [pc, #228]	; (800f8f0 <xQueueGenericSend+0x1f8>)
 800f80a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f80e:	601a      	str	r2, [r3, #0]
 800f810:	f3bf 8f4f 	dsb	sy
 800f814:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f818:	f001 fdec 	bl	80113f4 <vPortExitCritical>
				return pdPASS;
 800f81c:	2301      	movs	r3, #1
 800f81e:	e063      	b.n	800f8e8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d103      	bne.n	800f82e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f826:	f001 fde5 	bl	80113f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f82a:	2300      	movs	r3, #0
 800f82c:	e05c      	b.n	800f8e8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f82e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f830:	2b00      	cmp	r3, #0
 800f832:	d106      	bne.n	800f842 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f834:	f107 0314 	add.w	r3, r7, #20
 800f838:	4618      	mov	r0, r3
 800f83a:	f001 f903 	bl	8010a44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f83e:	2301      	movs	r3, #1
 800f840:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f842:	f001 fdd7 	bl	80113f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f846:	f000 feb9 	bl	80105bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f84a:	f001 fda3 	bl	8011394 <vPortEnterCritical>
 800f84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f850:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f854:	b25b      	sxtb	r3, r3
 800f856:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f85a:	d103      	bne.n	800f864 <xQueueGenericSend+0x16c>
 800f85c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f85e:	2200      	movs	r2, #0
 800f860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f866:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f86a:	b25b      	sxtb	r3, r3
 800f86c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f870:	d103      	bne.n	800f87a <xQueueGenericSend+0x182>
 800f872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f874:	2200      	movs	r2, #0
 800f876:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f87a:	f001 fdbb 	bl	80113f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f87e:	1d3a      	adds	r2, r7, #4
 800f880:	f107 0314 	add.w	r3, r7, #20
 800f884:	4611      	mov	r1, r2
 800f886:	4618      	mov	r0, r3
 800f888:	f001 f8f2 	bl	8010a70 <xTaskCheckForTimeOut>
 800f88c:	4603      	mov	r3, r0
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d124      	bne.n	800f8dc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f892:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f894:	f000 fc52 	bl	801013c <prvIsQueueFull>
 800f898:	4603      	mov	r3, r0
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d018      	beq.n	800f8d0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8a0:	3310      	adds	r3, #16
 800f8a2:	687a      	ldr	r2, [r7, #4]
 800f8a4:	4611      	mov	r1, r2
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	f001 f846 	bl	8010938 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f8ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f8ae:	f000 fbdd 	bl	801006c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f8b2:	f000 fe91 	bl	80105d8 <xTaskResumeAll>
 800f8b6:	4603      	mov	r3, r0
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	f47f af7c 	bne.w	800f7b6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800f8be:	4b0c      	ldr	r3, [pc, #48]	; (800f8f0 <xQueueGenericSend+0x1f8>)
 800f8c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f8c4:	601a      	str	r2, [r3, #0]
 800f8c6:	f3bf 8f4f 	dsb	sy
 800f8ca:	f3bf 8f6f 	isb	sy
 800f8ce:	e772      	b.n	800f7b6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f8d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f8d2:	f000 fbcb 	bl	801006c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f8d6:	f000 fe7f 	bl	80105d8 <xTaskResumeAll>
 800f8da:	e76c      	b.n	800f7b6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f8dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f8de:	f000 fbc5 	bl	801006c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f8e2:	f000 fe79 	bl	80105d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f8e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	3738      	adds	r7, #56	; 0x38
 800f8ec:	46bd      	mov	sp, r7
 800f8ee:	bd80      	pop	{r7, pc}
 800f8f0:	e000ed04 	.word	0xe000ed04

0800f8f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f8f4:	b580      	push	{r7, lr}
 800f8f6:	b090      	sub	sp, #64	; 0x40
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	60f8      	str	r0, [r7, #12]
 800f8fc:	60b9      	str	r1, [r7, #8]
 800f8fe:	607a      	str	r2, [r7, #4]
 800f900:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800f906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d10a      	bne.n	800f922 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800f90c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f910:	f383 8811 	msr	BASEPRI, r3
 800f914:	f3bf 8f6f 	isb	sy
 800f918:	f3bf 8f4f 	dsb	sy
 800f91c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f91e:	bf00      	nop
 800f920:	e7fe      	b.n	800f920 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f922:	68bb      	ldr	r3, [r7, #8]
 800f924:	2b00      	cmp	r3, #0
 800f926:	d103      	bne.n	800f930 <xQueueGenericSendFromISR+0x3c>
 800f928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f92a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d101      	bne.n	800f934 <xQueueGenericSendFromISR+0x40>
 800f930:	2301      	movs	r3, #1
 800f932:	e000      	b.n	800f936 <xQueueGenericSendFromISR+0x42>
 800f934:	2300      	movs	r3, #0
 800f936:	2b00      	cmp	r3, #0
 800f938:	d10a      	bne.n	800f950 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800f93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f93e:	f383 8811 	msr	BASEPRI, r3
 800f942:	f3bf 8f6f 	isb	sy
 800f946:	f3bf 8f4f 	dsb	sy
 800f94a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f94c:	bf00      	nop
 800f94e:	e7fe      	b.n	800f94e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f950:	683b      	ldr	r3, [r7, #0]
 800f952:	2b02      	cmp	r3, #2
 800f954:	d103      	bne.n	800f95e <xQueueGenericSendFromISR+0x6a>
 800f956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f95a:	2b01      	cmp	r3, #1
 800f95c:	d101      	bne.n	800f962 <xQueueGenericSendFromISR+0x6e>
 800f95e:	2301      	movs	r3, #1
 800f960:	e000      	b.n	800f964 <xQueueGenericSendFromISR+0x70>
 800f962:	2300      	movs	r3, #0
 800f964:	2b00      	cmp	r3, #0
 800f966:	d10a      	bne.n	800f97e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800f968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f96c:	f383 8811 	msr	BASEPRI, r3
 800f970:	f3bf 8f6f 	isb	sy
 800f974:	f3bf 8f4f 	dsb	sy
 800f978:	623b      	str	r3, [r7, #32]
}
 800f97a:	bf00      	nop
 800f97c:	e7fe      	b.n	800f97c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f97e:	f001 fdeb 	bl	8011558 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f982:	f3ef 8211 	mrs	r2, BASEPRI
 800f986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f98a:	f383 8811 	msr	BASEPRI, r3
 800f98e:	f3bf 8f6f 	isb	sy
 800f992:	f3bf 8f4f 	dsb	sy
 800f996:	61fa      	str	r2, [r7, #28]
 800f998:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f99a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f99c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f99e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f9a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f9a6:	429a      	cmp	r2, r3
 800f9a8:	d302      	bcc.n	800f9b0 <xQueueGenericSendFromISR+0xbc>
 800f9aa:	683b      	ldr	r3, [r7, #0]
 800f9ac:	2b02      	cmp	r3, #2
 800f9ae:	d12f      	bne.n	800fa10 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f9b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f9ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9be:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f9c0:	683a      	ldr	r2, [r7, #0]
 800f9c2:	68b9      	ldr	r1, [r7, #8]
 800f9c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f9c6:	f000 fac1 	bl	800ff4c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f9ca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800f9ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f9d2:	d112      	bne.n	800f9fa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f9d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d016      	beq.n	800fa0a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f9dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9de:	3324      	adds	r3, #36	; 0x24
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	f000 ffcd 	bl	8010980 <xTaskRemoveFromEventList>
 800f9e6:	4603      	mov	r3, r0
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d00e      	beq.n	800fa0a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d00b      	beq.n	800fa0a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	2201      	movs	r2, #1
 800f9f6:	601a      	str	r2, [r3, #0]
 800f9f8:	e007      	b.n	800fa0a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f9fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f9fe:	3301      	adds	r3, #1
 800fa00:	b2db      	uxtb	r3, r3
 800fa02:	b25a      	sxtb	r2, r3
 800fa04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800fa0a:	2301      	movs	r3, #1
 800fa0c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800fa0e:	e001      	b.n	800fa14 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fa10:	2300      	movs	r3, #0
 800fa12:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fa14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa16:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800fa18:	697b      	ldr	r3, [r7, #20]
 800fa1a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800fa1e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fa20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800fa22:	4618      	mov	r0, r3
 800fa24:	3740      	adds	r7, #64	; 0x40
 800fa26:	46bd      	mov	sp, r7
 800fa28:	bd80      	pop	{r7, pc}

0800fa2a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fa2a:	b580      	push	{r7, lr}
 800fa2c:	b08e      	sub	sp, #56	; 0x38
 800fa2e:	af00      	add	r7, sp, #0
 800fa30:	6078      	str	r0, [r7, #4]
 800fa32:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800fa38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d10a      	bne.n	800fa54 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800fa3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa42:	f383 8811 	msr	BASEPRI, r3
 800fa46:	f3bf 8f6f 	isb	sy
 800fa4a:	f3bf 8f4f 	dsb	sy
 800fa4e:	623b      	str	r3, [r7, #32]
}
 800fa50:	bf00      	nop
 800fa52:	e7fe      	b.n	800fa52 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800fa54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d00a      	beq.n	800fa72 <xQueueGiveFromISR+0x48>
	__asm volatile
 800fa5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa60:	f383 8811 	msr	BASEPRI, r3
 800fa64:	f3bf 8f6f 	isb	sy
 800fa68:	f3bf 8f4f 	dsb	sy
 800fa6c:	61fb      	str	r3, [r7, #28]
}
 800fa6e:	bf00      	nop
 800fa70:	e7fe      	b.n	800fa70 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800fa72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d103      	bne.n	800fa82 <xQueueGiveFromISR+0x58>
 800fa7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa7c:	689b      	ldr	r3, [r3, #8]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d101      	bne.n	800fa86 <xQueueGiveFromISR+0x5c>
 800fa82:	2301      	movs	r3, #1
 800fa84:	e000      	b.n	800fa88 <xQueueGiveFromISR+0x5e>
 800fa86:	2300      	movs	r3, #0
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d10a      	bne.n	800faa2 <xQueueGiveFromISR+0x78>
	__asm volatile
 800fa8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa90:	f383 8811 	msr	BASEPRI, r3
 800fa94:	f3bf 8f6f 	isb	sy
 800fa98:	f3bf 8f4f 	dsb	sy
 800fa9c:	61bb      	str	r3, [r7, #24]
}
 800fa9e:	bf00      	nop
 800faa0:	e7fe      	b.n	800faa0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800faa2:	f001 fd59 	bl	8011558 <vPortValidateInterruptPriority>
	__asm volatile
 800faa6:	f3ef 8211 	mrs	r2, BASEPRI
 800faaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faae:	f383 8811 	msr	BASEPRI, r3
 800fab2:	f3bf 8f6f 	isb	sy
 800fab6:	f3bf 8f4f 	dsb	sy
 800faba:	617a      	str	r2, [r7, #20]
 800fabc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800fabe:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fac0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fac6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800fac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800facc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800face:	429a      	cmp	r2, r3
 800fad0:	d22b      	bcs.n	800fb2a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fad4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fad8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fadc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fade:	1c5a      	adds	r2, r3, #1
 800fae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fae2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fae4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fae8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800faec:	d112      	bne.n	800fb14 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800faee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d016      	beq.n	800fb24 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800faf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faf8:	3324      	adds	r3, #36	; 0x24
 800fafa:	4618      	mov	r0, r3
 800fafc:	f000 ff40 	bl	8010980 <xTaskRemoveFromEventList>
 800fb00:	4603      	mov	r3, r0
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d00e      	beq.n	800fb24 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fb06:	683b      	ldr	r3, [r7, #0]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d00b      	beq.n	800fb24 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fb0c:	683b      	ldr	r3, [r7, #0]
 800fb0e:	2201      	movs	r2, #1
 800fb10:	601a      	str	r2, [r3, #0]
 800fb12:	e007      	b.n	800fb24 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fb14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fb18:	3301      	adds	r3, #1
 800fb1a:	b2db      	uxtb	r3, r3
 800fb1c:	b25a      	sxtb	r2, r3
 800fb1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800fb24:	2301      	movs	r3, #1
 800fb26:	637b      	str	r3, [r7, #52]	; 0x34
 800fb28:	e001      	b.n	800fb2e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	637b      	str	r3, [r7, #52]	; 0x34
 800fb2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb30:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	f383 8811 	msr	BASEPRI, r3
}
 800fb38:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fb3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	3738      	adds	r7, #56	; 0x38
 800fb40:	46bd      	mov	sp, r7
 800fb42:	bd80      	pop	{r7, pc}

0800fb44 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b08c      	sub	sp, #48	; 0x30
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	60f8      	str	r0, [r7, #12]
 800fb4c:	60b9      	str	r1, [r7, #8]
 800fb4e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800fb50:	2300      	movs	r3, #0
 800fb52:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fb58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d10a      	bne.n	800fb74 <xQueueReceive+0x30>
	__asm volatile
 800fb5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb62:	f383 8811 	msr	BASEPRI, r3
 800fb66:	f3bf 8f6f 	isb	sy
 800fb6a:	f3bf 8f4f 	dsb	sy
 800fb6e:	623b      	str	r3, [r7, #32]
}
 800fb70:	bf00      	nop
 800fb72:	e7fe      	b.n	800fb72 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fb74:	68bb      	ldr	r3, [r7, #8]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d103      	bne.n	800fb82 <xQueueReceive+0x3e>
 800fb7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d101      	bne.n	800fb86 <xQueueReceive+0x42>
 800fb82:	2301      	movs	r3, #1
 800fb84:	e000      	b.n	800fb88 <xQueueReceive+0x44>
 800fb86:	2300      	movs	r3, #0
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d10a      	bne.n	800fba2 <xQueueReceive+0x5e>
	__asm volatile
 800fb8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb90:	f383 8811 	msr	BASEPRI, r3
 800fb94:	f3bf 8f6f 	isb	sy
 800fb98:	f3bf 8f4f 	dsb	sy
 800fb9c:	61fb      	str	r3, [r7, #28]
}
 800fb9e:	bf00      	nop
 800fba0:	e7fe      	b.n	800fba0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fba2:	f001 f8a9 	bl	8010cf8 <xTaskGetSchedulerState>
 800fba6:	4603      	mov	r3, r0
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d102      	bne.n	800fbb2 <xQueueReceive+0x6e>
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d101      	bne.n	800fbb6 <xQueueReceive+0x72>
 800fbb2:	2301      	movs	r3, #1
 800fbb4:	e000      	b.n	800fbb8 <xQueueReceive+0x74>
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d10a      	bne.n	800fbd2 <xQueueReceive+0x8e>
	__asm volatile
 800fbbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbc0:	f383 8811 	msr	BASEPRI, r3
 800fbc4:	f3bf 8f6f 	isb	sy
 800fbc8:	f3bf 8f4f 	dsb	sy
 800fbcc:	61bb      	str	r3, [r7, #24]
}
 800fbce:	bf00      	nop
 800fbd0:	e7fe      	b.n	800fbd0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fbd2:	f001 fbdf 	bl	8011394 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fbd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbda:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fbdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d01f      	beq.n	800fc22 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fbe2:	68b9      	ldr	r1, [r7, #8]
 800fbe4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fbe6:	f000 fa1b 	bl	8010020 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fbea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbec:	1e5a      	subs	r2, r3, #1
 800fbee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbf0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fbf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbf4:	691b      	ldr	r3, [r3, #16]
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d00f      	beq.n	800fc1a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fbfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbfc:	3310      	adds	r3, #16
 800fbfe:	4618      	mov	r0, r3
 800fc00:	f000 febe 	bl	8010980 <xTaskRemoveFromEventList>
 800fc04:	4603      	mov	r3, r0
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d007      	beq.n	800fc1a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fc0a:	4b3d      	ldr	r3, [pc, #244]	; (800fd00 <xQueueReceive+0x1bc>)
 800fc0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc10:	601a      	str	r2, [r3, #0]
 800fc12:	f3bf 8f4f 	dsb	sy
 800fc16:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fc1a:	f001 fbeb 	bl	80113f4 <vPortExitCritical>
				return pdPASS;
 800fc1e:	2301      	movs	r3, #1
 800fc20:	e069      	b.n	800fcf6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d103      	bne.n	800fc30 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fc28:	f001 fbe4 	bl	80113f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fc2c:	2300      	movs	r3, #0
 800fc2e:	e062      	b.n	800fcf6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fc30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d106      	bne.n	800fc44 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fc36:	f107 0310 	add.w	r3, r7, #16
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	f000 ff02 	bl	8010a44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fc40:	2301      	movs	r3, #1
 800fc42:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fc44:	f001 fbd6 	bl	80113f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fc48:	f000 fcb8 	bl	80105bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fc4c:	f001 fba2 	bl	8011394 <vPortEnterCritical>
 800fc50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fc56:	b25b      	sxtb	r3, r3
 800fc58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fc5c:	d103      	bne.n	800fc66 <xQueueReceive+0x122>
 800fc5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc60:	2200      	movs	r2, #0
 800fc62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fc66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fc6c:	b25b      	sxtb	r3, r3
 800fc6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fc72:	d103      	bne.n	800fc7c <xQueueReceive+0x138>
 800fc74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc76:	2200      	movs	r2, #0
 800fc78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fc7c:	f001 fbba 	bl	80113f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fc80:	1d3a      	adds	r2, r7, #4
 800fc82:	f107 0310 	add.w	r3, r7, #16
 800fc86:	4611      	mov	r1, r2
 800fc88:	4618      	mov	r0, r3
 800fc8a:	f000 fef1 	bl	8010a70 <xTaskCheckForTimeOut>
 800fc8e:	4603      	mov	r3, r0
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d123      	bne.n	800fcdc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fc94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fc96:	f000 fa3b 	bl	8010110 <prvIsQueueEmpty>
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d017      	beq.n	800fcd0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fca2:	3324      	adds	r3, #36	; 0x24
 800fca4:	687a      	ldr	r2, [r7, #4]
 800fca6:	4611      	mov	r1, r2
 800fca8:	4618      	mov	r0, r3
 800fcaa:	f000 fe45 	bl	8010938 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fcae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fcb0:	f000 f9dc 	bl	801006c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fcb4:	f000 fc90 	bl	80105d8 <xTaskResumeAll>
 800fcb8:	4603      	mov	r3, r0
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d189      	bne.n	800fbd2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800fcbe:	4b10      	ldr	r3, [pc, #64]	; (800fd00 <xQueueReceive+0x1bc>)
 800fcc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fcc4:	601a      	str	r2, [r3, #0]
 800fcc6:	f3bf 8f4f 	dsb	sy
 800fcca:	f3bf 8f6f 	isb	sy
 800fcce:	e780      	b.n	800fbd2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800fcd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fcd2:	f000 f9cb 	bl	801006c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fcd6:	f000 fc7f 	bl	80105d8 <xTaskResumeAll>
 800fcda:	e77a      	b.n	800fbd2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800fcdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fcde:	f000 f9c5 	bl	801006c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fce2:	f000 fc79 	bl	80105d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fce6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fce8:	f000 fa12 	bl	8010110 <prvIsQueueEmpty>
 800fcec:	4603      	mov	r3, r0
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	f43f af6f 	beq.w	800fbd2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fcf4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	3730      	adds	r7, #48	; 0x30
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	bd80      	pop	{r7, pc}
 800fcfe:	bf00      	nop
 800fd00:	e000ed04 	.word	0xe000ed04

0800fd04 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800fd04:	b580      	push	{r7, lr}
 800fd06:	b08e      	sub	sp, #56	; 0x38
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	6078      	str	r0, [r7, #4]
 800fd0c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800fd0e:	2300      	movs	r3, #0
 800fd10:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800fd16:	2300      	movs	r3, #0
 800fd18:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fd1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d10a      	bne.n	800fd36 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800fd20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd24:	f383 8811 	msr	BASEPRI, r3
 800fd28:	f3bf 8f6f 	isb	sy
 800fd2c:	f3bf 8f4f 	dsb	sy
 800fd30:	623b      	str	r3, [r7, #32]
}
 800fd32:	bf00      	nop
 800fd34:	e7fe      	b.n	800fd34 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800fd36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d00a      	beq.n	800fd54 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800fd3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd42:	f383 8811 	msr	BASEPRI, r3
 800fd46:	f3bf 8f6f 	isb	sy
 800fd4a:	f3bf 8f4f 	dsb	sy
 800fd4e:	61fb      	str	r3, [r7, #28]
}
 800fd50:	bf00      	nop
 800fd52:	e7fe      	b.n	800fd52 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fd54:	f000 ffd0 	bl	8010cf8 <xTaskGetSchedulerState>
 800fd58:	4603      	mov	r3, r0
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d102      	bne.n	800fd64 <xQueueSemaphoreTake+0x60>
 800fd5e:	683b      	ldr	r3, [r7, #0]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d101      	bne.n	800fd68 <xQueueSemaphoreTake+0x64>
 800fd64:	2301      	movs	r3, #1
 800fd66:	e000      	b.n	800fd6a <xQueueSemaphoreTake+0x66>
 800fd68:	2300      	movs	r3, #0
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d10a      	bne.n	800fd84 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800fd6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd72:	f383 8811 	msr	BASEPRI, r3
 800fd76:	f3bf 8f6f 	isb	sy
 800fd7a:	f3bf 8f4f 	dsb	sy
 800fd7e:	61bb      	str	r3, [r7, #24]
}
 800fd80:	bf00      	nop
 800fd82:	e7fe      	b.n	800fd82 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fd84:	f001 fb06 	bl	8011394 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800fd88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd8c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800fd8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d024      	beq.n	800fdde <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800fd94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd96:	1e5a      	subs	r2, r3, #1
 800fd98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd9a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fd9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d104      	bne.n	800fdae <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800fda4:	f001 f950 	bl	8011048 <pvTaskIncrementMutexHeldCount>
 800fda8:	4602      	mov	r2, r0
 800fdaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdac:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fdae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdb0:	691b      	ldr	r3, [r3, #16]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d00f      	beq.n	800fdd6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fdb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdb8:	3310      	adds	r3, #16
 800fdba:	4618      	mov	r0, r3
 800fdbc:	f000 fde0 	bl	8010980 <xTaskRemoveFromEventList>
 800fdc0:	4603      	mov	r3, r0
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d007      	beq.n	800fdd6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fdc6:	4b54      	ldr	r3, [pc, #336]	; (800ff18 <xQueueSemaphoreTake+0x214>)
 800fdc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fdcc:	601a      	str	r2, [r3, #0]
 800fdce:	f3bf 8f4f 	dsb	sy
 800fdd2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fdd6:	f001 fb0d 	bl	80113f4 <vPortExitCritical>
				return pdPASS;
 800fdda:	2301      	movs	r3, #1
 800fddc:	e097      	b.n	800ff0e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fdde:	683b      	ldr	r3, [r7, #0]
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d111      	bne.n	800fe08 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800fde4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d00a      	beq.n	800fe00 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800fdea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdee:	f383 8811 	msr	BASEPRI, r3
 800fdf2:	f3bf 8f6f 	isb	sy
 800fdf6:	f3bf 8f4f 	dsb	sy
 800fdfa:	617b      	str	r3, [r7, #20]
}
 800fdfc:	bf00      	nop
 800fdfe:	e7fe      	b.n	800fdfe <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800fe00:	f001 faf8 	bl	80113f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fe04:	2300      	movs	r3, #0
 800fe06:	e082      	b.n	800ff0e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fe08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d106      	bne.n	800fe1c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fe0e:	f107 030c 	add.w	r3, r7, #12
 800fe12:	4618      	mov	r0, r3
 800fe14:	f000 fe16 	bl	8010a44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fe18:	2301      	movs	r3, #1
 800fe1a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fe1c:	f001 faea 	bl	80113f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fe20:	f000 fbcc 	bl	80105bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fe24:	f001 fab6 	bl	8011394 <vPortEnterCritical>
 800fe28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fe2e:	b25b      	sxtb	r3, r3
 800fe30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fe34:	d103      	bne.n	800fe3e <xQueueSemaphoreTake+0x13a>
 800fe36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe38:	2200      	movs	r2, #0
 800fe3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fe3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fe44:	b25b      	sxtb	r3, r3
 800fe46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fe4a:	d103      	bne.n	800fe54 <xQueueSemaphoreTake+0x150>
 800fe4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe4e:	2200      	movs	r2, #0
 800fe50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fe54:	f001 face 	bl	80113f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fe58:	463a      	mov	r2, r7
 800fe5a:	f107 030c 	add.w	r3, r7, #12
 800fe5e:	4611      	mov	r1, r2
 800fe60:	4618      	mov	r0, r3
 800fe62:	f000 fe05 	bl	8010a70 <xTaskCheckForTimeOut>
 800fe66:	4603      	mov	r3, r0
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d132      	bne.n	800fed2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fe6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fe6e:	f000 f94f 	bl	8010110 <prvIsQueueEmpty>
 800fe72:	4603      	mov	r3, r0
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d026      	beq.n	800fec6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fe78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d109      	bne.n	800fe94 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800fe80:	f001 fa88 	bl	8011394 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fe84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe86:	689b      	ldr	r3, [r3, #8]
 800fe88:	4618      	mov	r0, r3
 800fe8a:	f000 ff53 	bl	8010d34 <xTaskPriorityInherit>
 800fe8e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800fe90:	f001 fab0 	bl	80113f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fe94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe96:	3324      	adds	r3, #36	; 0x24
 800fe98:	683a      	ldr	r2, [r7, #0]
 800fe9a:	4611      	mov	r1, r2
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	f000 fd4b 	bl	8010938 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fea2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fea4:	f000 f8e2 	bl	801006c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fea8:	f000 fb96 	bl	80105d8 <xTaskResumeAll>
 800feac:	4603      	mov	r3, r0
 800feae:	2b00      	cmp	r3, #0
 800feb0:	f47f af68 	bne.w	800fd84 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800feb4:	4b18      	ldr	r3, [pc, #96]	; (800ff18 <xQueueSemaphoreTake+0x214>)
 800feb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800feba:	601a      	str	r2, [r3, #0]
 800febc:	f3bf 8f4f 	dsb	sy
 800fec0:	f3bf 8f6f 	isb	sy
 800fec4:	e75e      	b.n	800fd84 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800fec6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fec8:	f000 f8d0 	bl	801006c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fecc:	f000 fb84 	bl	80105d8 <xTaskResumeAll>
 800fed0:	e758      	b.n	800fd84 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800fed2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fed4:	f000 f8ca 	bl	801006c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fed8:	f000 fb7e 	bl	80105d8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fedc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fede:	f000 f917 	bl	8010110 <prvIsQueueEmpty>
 800fee2:	4603      	mov	r3, r0
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	f43f af4d 	beq.w	800fd84 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800feea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feec:	2b00      	cmp	r3, #0
 800feee:	d00d      	beq.n	800ff0c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800fef0:	f001 fa50 	bl	8011394 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800fef4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fef6:	f000 f811 	bl	800ff1c <prvGetDisinheritPriorityAfterTimeout>
 800fefa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800fefc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fefe:	689b      	ldr	r3, [r3, #8]
 800ff00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ff02:	4618      	mov	r0, r3
 800ff04:	f001 f812 	bl	8010f2c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ff08:	f001 fa74 	bl	80113f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ff0c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ff0e:	4618      	mov	r0, r3
 800ff10:	3738      	adds	r7, #56	; 0x38
 800ff12:	46bd      	mov	sp, r7
 800ff14:	bd80      	pop	{r7, pc}
 800ff16:	bf00      	nop
 800ff18:	e000ed04 	.word	0xe000ed04

0800ff1c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ff1c:	b480      	push	{r7}
 800ff1e:	b085      	sub	sp, #20
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d006      	beq.n	800ff3a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	f1c3 0307 	rsb	r3, r3, #7
 800ff36:	60fb      	str	r3, [r7, #12]
 800ff38:	e001      	b.n	800ff3e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ff3a:	2300      	movs	r3, #0
 800ff3c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ff3e:	68fb      	ldr	r3, [r7, #12]
	}
 800ff40:	4618      	mov	r0, r3
 800ff42:	3714      	adds	r7, #20
 800ff44:	46bd      	mov	sp, r7
 800ff46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4a:	4770      	bx	lr

0800ff4c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b086      	sub	sp, #24
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	60f8      	str	r0, [r7, #12]
 800ff54:	60b9      	str	r1, [r7, #8]
 800ff56:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ff58:	2300      	movs	r3, #0
 800ff5a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff60:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d10d      	bne.n	800ff86 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d14d      	bne.n	801000e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	689b      	ldr	r3, [r3, #8]
 800ff76:	4618      	mov	r0, r3
 800ff78:	f000 ff52 	bl	8010e20 <xTaskPriorityDisinherit>
 800ff7c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	2200      	movs	r2, #0
 800ff82:	609a      	str	r2, [r3, #8]
 800ff84:	e043      	b.n	801000e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d119      	bne.n	800ffc0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	6858      	ldr	r0, [r3, #4]
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff94:	461a      	mov	r2, r3
 800ff96:	68b9      	ldr	r1, [r7, #8]
 800ff98:	f001 fd36 	bl	8011a08 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	685a      	ldr	r2, [r3, #4]
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffa4:	441a      	add	r2, r3
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	685a      	ldr	r2, [r3, #4]
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	689b      	ldr	r3, [r3, #8]
 800ffb2:	429a      	cmp	r2, r3
 800ffb4:	d32b      	bcc.n	801000e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	681a      	ldr	r2, [r3, #0]
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	605a      	str	r2, [r3, #4]
 800ffbe:	e026      	b.n	801000e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	68d8      	ldr	r0, [r3, #12]
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffc8:	461a      	mov	r2, r3
 800ffca:	68b9      	ldr	r1, [r7, #8]
 800ffcc:	f001 fd1c 	bl	8011a08 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	68da      	ldr	r2, [r3, #12]
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffd8:	425b      	negs	r3, r3
 800ffda:	441a      	add	r2, r3
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	68da      	ldr	r2, [r3, #12]
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	429a      	cmp	r2, r3
 800ffea:	d207      	bcs.n	800fffc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	689a      	ldr	r2, [r3, #8]
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fff4:	425b      	negs	r3, r3
 800fff6:	441a      	add	r2, r3
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	2b02      	cmp	r3, #2
 8010000:	d105      	bne.n	801000e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010002:	693b      	ldr	r3, [r7, #16]
 8010004:	2b00      	cmp	r3, #0
 8010006:	d002      	beq.n	801000e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010008:	693b      	ldr	r3, [r7, #16]
 801000a:	3b01      	subs	r3, #1
 801000c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801000e:	693b      	ldr	r3, [r7, #16]
 8010010:	1c5a      	adds	r2, r3, #1
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010016:	697b      	ldr	r3, [r7, #20]
}
 8010018:	4618      	mov	r0, r3
 801001a:	3718      	adds	r7, #24
 801001c:	46bd      	mov	sp, r7
 801001e:	bd80      	pop	{r7, pc}

08010020 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010020:	b580      	push	{r7, lr}
 8010022:	b082      	sub	sp, #8
 8010024:	af00      	add	r7, sp, #0
 8010026:	6078      	str	r0, [r7, #4]
 8010028:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801002e:	2b00      	cmp	r3, #0
 8010030:	d018      	beq.n	8010064 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	68da      	ldr	r2, [r3, #12]
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801003a:	441a      	add	r2, r3
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	68da      	ldr	r2, [r3, #12]
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	689b      	ldr	r3, [r3, #8]
 8010048:	429a      	cmp	r2, r3
 801004a:	d303      	bcc.n	8010054 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	681a      	ldr	r2, [r3, #0]
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	68d9      	ldr	r1, [r3, #12]
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801005c:	461a      	mov	r2, r3
 801005e:	6838      	ldr	r0, [r7, #0]
 8010060:	f001 fcd2 	bl	8011a08 <memcpy>
	}
}
 8010064:	bf00      	nop
 8010066:	3708      	adds	r7, #8
 8010068:	46bd      	mov	sp, r7
 801006a:	bd80      	pop	{r7, pc}

0801006c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801006c:	b580      	push	{r7, lr}
 801006e:	b084      	sub	sp, #16
 8010070:	af00      	add	r7, sp, #0
 8010072:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010074:	f001 f98e 	bl	8011394 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801007e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010080:	e011      	b.n	80100a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010086:	2b00      	cmp	r3, #0
 8010088:	d012      	beq.n	80100b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	3324      	adds	r3, #36	; 0x24
 801008e:	4618      	mov	r0, r3
 8010090:	f000 fc76 	bl	8010980 <xTaskRemoveFromEventList>
 8010094:	4603      	mov	r3, r0
 8010096:	2b00      	cmp	r3, #0
 8010098:	d001      	beq.n	801009e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801009a:	f000 fd4b 	bl	8010b34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801009e:	7bfb      	ldrb	r3, [r7, #15]
 80100a0:	3b01      	subs	r3, #1
 80100a2:	b2db      	uxtb	r3, r3
 80100a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80100a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	dce9      	bgt.n	8010082 <prvUnlockQueue+0x16>
 80100ae:	e000      	b.n	80100b2 <prvUnlockQueue+0x46>
					break;
 80100b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	22ff      	movs	r2, #255	; 0xff
 80100b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80100ba:	f001 f99b 	bl	80113f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80100be:	f001 f969 	bl	8011394 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80100c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80100ca:	e011      	b.n	80100f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	691b      	ldr	r3, [r3, #16]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d012      	beq.n	80100fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	3310      	adds	r3, #16
 80100d8:	4618      	mov	r0, r3
 80100da:	f000 fc51 	bl	8010980 <xTaskRemoveFromEventList>
 80100de:	4603      	mov	r3, r0
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d001      	beq.n	80100e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80100e4:	f000 fd26 	bl	8010b34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80100e8:	7bbb      	ldrb	r3, [r7, #14]
 80100ea:	3b01      	subs	r3, #1
 80100ec:	b2db      	uxtb	r3, r3
 80100ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80100f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	dce9      	bgt.n	80100cc <prvUnlockQueue+0x60>
 80100f8:	e000      	b.n	80100fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80100fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	22ff      	movs	r2, #255	; 0xff
 8010100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010104:	f001 f976 	bl	80113f4 <vPortExitCritical>
}
 8010108:	bf00      	nop
 801010a:	3710      	adds	r7, #16
 801010c:	46bd      	mov	sp, r7
 801010e:	bd80      	pop	{r7, pc}

08010110 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010110:	b580      	push	{r7, lr}
 8010112:	b084      	sub	sp, #16
 8010114:	af00      	add	r7, sp, #0
 8010116:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010118:	f001 f93c 	bl	8011394 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010120:	2b00      	cmp	r3, #0
 8010122:	d102      	bne.n	801012a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010124:	2301      	movs	r3, #1
 8010126:	60fb      	str	r3, [r7, #12]
 8010128:	e001      	b.n	801012e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801012a:	2300      	movs	r3, #0
 801012c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801012e:	f001 f961 	bl	80113f4 <vPortExitCritical>

	return xReturn;
 8010132:	68fb      	ldr	r3, [r7, #12]
}
 8010134:	4618      	mov	r0, r3
 8010136:	3710      	adds	r7, #16
 8010138:	46bd      	mov	sp, r7
 801013a:	bd80      	pop	{r7, pc}

0801013c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801013c:	b580      	push	{r7, lr}
 801013e:	b084      	sub	sp, #16
 8010140:	af00      	add	r7, sp, #0
 8010142:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010144:	f001 f926 	bl	8011394 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010150:	429a      	cmp	r2, r3
 8010152:	d102      	bne.n	801015a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010154:	2301      	movs	r3, #1
 8010156:	60fb      	str	r3, [r7, #12]
 8010158:	e001      	b.n	801015e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801015a:	2300      	movs	r3, #0
 801015c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801015e:	f001 f949 	bl	80113f4 <vPortExitCritical>

	return xReturn;
 8010162:	68fb      	ldr	r3, [r7, #12]
}
 8010164:	4618      	mov	r0, r3
 8010166:	3710      	adds	r7, #16
 8010168:	46bd      	mov	sp, r7
 801016a:	bd80      	pop	{r7, pc}

0801016c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801016c:	b580      	push	{r7, lr}
 801016e:	b08e      	sub	sp, #56	; 0x38
 8010170:	af04      	add	r7, sp, #16
 8010172:	60f8      	str	r0, [r7, #12]
 8010174:	60b9      	str	r1, [r7, #8]
 8010176:	607a      	str	r2, [r7, #4]
 8010178:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801017a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801017c:	2b00      	cmp	r3, #0
 801017e:	d10a      	bne.n	8010196 <xTaskCreateStatic+0x2a>
	__asm volatile
 8010180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010184:	f383 8811 	msr	BASEPRI, r3
 8010188:	f3bf 8f6f 	isb	sy
 801018c:	f3bf 8f4f 	dsb	sy
 8010190:	623b      	str	r3, [r7, #32]
}
 8010192:	bf00      	nop
 8010194:	e7fe      	b.n	8010194 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010198:	2b00      	cmp	r3, #0
 801019a:	d10a      	bne.n	80101b2 <xTaskCreateStatic+0x46>
	__asm volatile
 801019c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101a0:	f383 8811 	msr	BASEPRI, r3
 80101a4:	f3bf 8f6f 	isb	sy
 80101a8:	f3bf 8f4f 	dsb	sy
 80101ac:	61fb      	str	r3, [r7, #28]
}
 80101ae:	bf00      	nop
 80101b0:	e7fe      	b.n	80101b0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80101b2:	2354      	movs	r3, #84	; 0x54
 80101b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80101b6:	693b      	ldr	r3, [r7, #16]
 80101b8:	2b54      	cmp	r3, #84	; 0x54
 80101ba:	d00a      	beq.n	80101d2 <xTaskCreateStatic+0x66>
	__asm volatile
 80101bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101c0:	f383 8811 	msr	BASEPRI, r3
 80101c4:	f3bf 8f6f 	isb	sy
 80101c8:	f3bf 8f4f 	dsb	sy
 80101cc:	61bb      	str	r3, [r7, #24]
}
 80101ce:	bf00      	nop
 80101d0:	e7fe      	b.n	80101d0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80101d2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80101d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d01e      	beq.n	8010218 <xTaskCreateStatic+0xac>
 80101da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d01b      	beq.n	8010218 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80101e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101e2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80101e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80101e8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80101ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101ec:	2202      	movs	r2, #2
 80101ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80101f2:	2300      	movs	r3, #0
 80101f4:	9303      	str	r3, [sp, #12]
 80101f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101f8:	9302      	str	r3, [sp, #8]
 80101fa:	f107 0314 	add.w	r3, r7, #20
 80101fe:	9301      	str	r3, [sp, #4]
 8010200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010202:	9300      	str	r3, [sp, #0]
 8010204:	683b      	ldr	r3, [r7, #0]
 8010206:	687a      	ldr	r2, [r7, #4]
 8010208:	68b9      	ldr	r1, [r7, #8]
 801020a:	68f8      	ldr	r0, [r7, #12]
 801020c:	f000 f850 	bl	80102b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010210:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010212:	f000 f8d5 	bl	80103c0 <prvAddNewTaskToReadyList>
 8010216:	e001      	b.n	801021c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8010218:	2300      	movs	r3, #0
 801021a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801021c:	697b      	ldr	r3, [r7, #20]
	}
 801021e:	4618      	mov	r0, r3
 8010220:	3728      	adds	r7, #40	; 0x28
 8010222:	46bd      	mov	sp, r7
 8010224:	bd80      	pop	{r7, pc}

08010226 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010226:	b580      	push	{r7, lr}
 8010228:	b08c      	sub	sp, #48	; 0x30
 801022a:	af04      	add	r7, sp, #16
 801022c:	60f8      	str	r0, [r7, #12]
 801022e:	60b9      	str	r1, [r7, #8]
 8010230:	603b      	str	r3, [r7, #0]
 8010232:	4613      	mov	r3, r2
 8010234:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010236:	88fb      	ldrh	r3, [r7, #6]
 8010238:	009b      	lsls	r3, r3, #2
 801023a:	4618      	mov	r0, r3
 801023c:	f001 f9cc 	bl	80115d8 <pvPortMalloc>
 8010240:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010242:	697b      	ldr	r3, [r7, #20]
 8010244:	2b00      	cmp	r3, #0
 8010246:	d00e      	beq.n	8010266 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010248:	2054      	movs	r0, #84	; 0x54
 801024a:	f001 f9c5 	bl	80115d8 <pvPortMalloc>
 801024e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010250:	69fb      	ldr	r3, [r7, #28]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d003      	beq.n	801025e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010256:	69fb      	ldr	r3, [r7, #28]
 8010258:	697a      	ldr	r2, [r7, #20]
 801025a:	631a      	str	r2, [r3, #48]	; 0x30
 801025c:	e005      	b.n	801026a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801025e:	6978      	ldr	r0, [r7, #20]
 8010260:	f001 fa86 	bl	8011770 <vPortFree>
 8010264:	e001      	b.n	801026a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010266:	2300      	movs	r3, #0
 8010268:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801026a:	69fb      	ldr	r3, [r7, #28]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d017      	beq.n	80102a0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010270:	69fb      	ldr	r3, [r7, #28]
 8010272:	2200      	movs	r2, #0
 8010274:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010278:	88fa      	ldrh	r2, [r7, #6]
 801027a:	2300      	movs	r3, #0
 801027c:	9303      	str	r3, [sp, #12]
 801027e:	69fb      	ldr	r3, [r7, #28]
 8010280:	9302      	str	r3, [sp, #8]
 8010282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010284:	9301      	str	r3, [sp, #4]
 8010286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010288:	9300      	str	r3, [sp, #0]
 801028a:	683b      	ldr	r3, [r7, #0]
 801028c:	68b9      	ldr	r1, [r7, #8]
 801028e:	68f8      	ldr	r0, [r7, #12]
 8010290:	f000 f80e 	bl	80102b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010294:	69f8      	ldr	r0, [r7, #28]
 8010296:	f000 f893 	bl	80103c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801029a:	2301      	movs	r3, #1
 801029c:	61bb      	str	r3, [r7, #24]
 801029e:	e002      	b.n	80102a6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80102a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80102a4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80102a6:	69bb      	ldr	r3, [r7, #24]
	}
 80102a8:	4618      	mov	r0, r3
 80102aa:	3720      	adds	r7, #32
 80102ac:	46bd      	mov	sp, r7
 80102ae:	bd80      	pop	{r7, pc}

080102b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b088      	sub	sp, #32
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	60f8      	str	r0, [r7, #12]
 80102b8:	60b9      	str	r1, [r7, #8]
 80102ba:	607a      	str	r2, [r7, #4]
 80102bc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80102be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80102c2:	6879      	ldr	r1, [r7, #4]
 80102c4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80102c8:	440b      	add	r3, r1
 80102ca:	009b      	lsls	r3, r3, #2
 80102cc:	4413      	add	r3, r2
 80102ce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80102d0:	69bb      	ldr	r3, [r7, #24]
 80102d2:	f023 0307 	bic.w	r3, r3, #7
 80102d6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80102d8:	69bb      	ldr	r3, [r7, #24]
 80102da:	f003 0307 	and.w	r3, r3, #7
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d00a      	beq.n	80102f8 <prvInitialiseNewTask+0x48>
	__asm volatile
 80102e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102e6:	f383 8811 	msr	BASEPRI, r3
 80102ea:	f3bf 8f6f 	isb	sy
 80102ee:	f3bf 8f4f 	dsb	sy
 80102f2:	617b      	str	r3, [r7, #20]
}
 80102f4:	bf00      	nop
 80102f6:	e7fe      	b.n	80102f6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80102f8:	68bb      	ldr	r3, [r7, #8]
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d01f      	beq.n	801033e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80102fe:	2300      	movs	r3, #0
 8010300:	61fb      	str	r3, [r7, #28]
 8010302:	e012      	b.n	801032a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010304:	68ba      	ldr	r2, [r7, #8]
 8010306:	69fb      	ldr	r3, [r7, #28]
 8010308:	4413      	add	r3, r2
 801030a:	7819      	ldrb	r1, [r3, #0]
 801030c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801030e:	69fb      	ldr	r3, [r7, #28]
 8010310:	4413      	add	r3, r2
 8010312:	3334      	adds	r3, #52	; 0x34
 8010314:	460a      	mov	r2, r1
 8010316:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010318:	68ba      	ldr	r2, [r7, #8]
 801031a:	69fb      	ldr	r3, [r7, #28]
 801031c:	4413      	add	r3, r2
 801031e:	781b      	ldrb	r3, [r3, #0]
 8010320:	2b00      	cmp	r3, #0
 8010322:	d006      	beq.n	8010332 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010324:	69fb      	ldr	r3, [r7, #28]
 8010326:	3301      	adds	r3, #1
 8010328:	61fb      	str	r3, [r7, #28]
 801032a:	69fb      	ldr	r3, [r7, #28]
 801032c:	2b0f      	cmp	r3, #15
 801032e:	d9e9      	bls.n	8010304 <prvInitialiseNewTask+0x54>
 8010330:	e000      	b.n	8010334 <prvInitialiseNewTask+0x84>
			{
				break;
 8010332:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010336:	2200      	movs	r2, #0
 8010338:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801033c:	e003      	b.n	8010346 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801033e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010340:	2200      	movs	r2, #0
 8010342:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010348:	2b06      	cmp	r3, #6
 801034a:	d901      	bls.n	8010350 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801034c:	2306      	movs	r3, #6
 801034e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010352:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010354:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010358:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801035a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 801035c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801035e:	2200      	movs	r2, #0
 8010360:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010364:	3304      	adds	r3, #4
 8010366:	4618      	mov	r0, r3
 8010368:	f7ff f870 	bl	800f44c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801036c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801036e:	3318      	adds	r3, #24
 8010370:	4618      	mov	r0, r3
 8010372:	f7ff f86b 	bl	800f44c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801037a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801037c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801037e:	f1c3 0207 	rsb	r2, r3, #7
 8010382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010384:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010388:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801038a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801038c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801038e:	2200      	movs	r2, #0
 8010390:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010394:	2200      	movs	r2, #0
 8010396:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801039a:	683a      	ldr	r2, [r7, #0]
 801039c:	68f9      	ldr	r1, [r7, #12]
 801039e:	69b8      	ldr	r0, [r7, #24]
 80103a0:	f000 fecc 	bl	801113c <pxPortInitialiseStack>
 80103a4:	4602      	mov	r2, r0
 80103a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103a8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80103aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d002      	beq.n	80103b6 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80103b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80103b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80103b6:	bf00      	nop
 80103b8:	3720      	adds	r7, #32
 80103ba:	46bd      	mov	sp, r7
 80103bc:	bd80      	pop	{r7, pc}
	...

080103c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80103c0:	b580      	push	{r7, lr}
 80103c2:	b082      	sub	sp, #8
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80103c8:	f000 ffe4 	bl	8011394 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80103cc:	4b2a      	ldr	r3, [pc, #168]	; (8010478 <prvAddNewTaskToReadyList+0xb8>)
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	3301      	adds	r3, #1
 80103d2:	4a29      	ldr	r2, [pc, #164]	; (8010478 <prvAddNewTaskToReadyList+0xb8>)
 80103d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80103d6:	4b29      	ldr	r3, [pc, #164]	; (801047c <prvAddNewTaskToReadyList+0xbc>)
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d109      	bne.n	80103f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80103de:	4a27      	ldr	r2, [pc, #156]	; (801047c <prvAddNewTaskToReadyList+0xbc>)
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80103e4:	4b24      	ldr	r3, [pc, #144]	; (8010478 <prvAddNewTaskToReadyList+0xb8>)
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	2b01      	cmp	r3, #1
 80103ea:	d110      	bne.n	801040e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80103ec:	f000 fbc6 	bl	8010b7c <prvInitialiseTaskLists>
 80103f0:	e00d      	b.n	801040e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80103f2:	4b23      	ldr	r3, [pc, #140]	; (8010480 <prvAddNewTaskToReadyList+0xc0>)
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d109      	bne.n	801040e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80103fa:	4b20      	ldr	r3, [pc, #128]	; (801047c <prvAddNewTaskToReadyList+0xbc>)
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010404:	429a      	cmp	r2, r3
 8010406:	d802      	bhi.n	801040e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010408:	4a1c      	ldr	r2, [pc, #112]	; (801047c <prvAddNewTaskToReadyList+0xbc>)
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801040e:	4b1d      	ldr	r3, [pc, #116]	; (8010484 <prvAddNewTaskToReadyList+0xc4>)
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	3301      	adds	r3, #1
 8010414:	4a1b      	ldr	r2, [pc, #108]	; (8010484 <prvAddNewTaskToReadyList+0xc4>)
 8010416:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801041c:	2201      	movs	r2, #1
 801041e:	409a      	lsls	r2, r3
 8010420:	4b19      	ldr	r3, [pc, #100]	; (8010488 <prvAddNewTaskToReadyList+0xc8>)
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	4313      	orrs	r3, r2
 8010426:	4a18      	ldr	r2, [pc, #96]	; (8010488 <prvAddNewTaskToReadyList+0xc8>)
 8010428:	6013      	str	r3, [r2, #0]
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801042e:	4613      	mov	r3, r2
 8010430:	009b      	lsls	r3, r3, #2
 8010432:	4413      	add	r3, r2
 8010434:	009b      	lsls	r3, r3, #2
 8010436:	4a15      	ldr	r2, [pc, #84]	; (801048c <prvAddNewTaskToReadyList+0xcc>)
 8010438:	441a      	add	r2, r3
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	3304      	adds	r3, #4
 801043e:	4619      	mov	r1, r3
 8010440:	4610      	mov	r0, r2
 8010442:	f7ff f810 	bl	800f466 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010446:	f000 ffd5 	bl	80113f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801044a:	4b0d      	ldr	r3, [pc, #52]	; (8010480 <prvAddNewTaskToReadyList+0xc0>)
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	2b00      	cmp	r3, #0
 8010450:	d00e      	beq.n	8010470 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010452:	4b0a      	ldr	r3, [pc, #40]	; (801047c <prvAddNewTaskToReadyList+0xbc>)
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801045c:	429a      	cmp	r2, r3
 801045e:	d207      	bcs.n	8010470 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010460:	4b0b      	ldr	r3, [pc, #44]	; (8010490 <prvAddNewTaskToReadyList+0xd0>)
 8010462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010466:	601a      	str	r2, [r3, #0]
 8010468:	f3bf 8f4f 	dsb	sy
 801046c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010470:	bf00      	nop
 8010472:	3708      	adds	r7, #8
 8010474:	46bd      	mov	sp, r7
 8010476:	bd80      	pop	{r7, pc}
 8010478:	24000848 	.word	0x24000848
 801047c:	24000748 	.word	0x24000748
 8010480:	24000854 	.word	0x24000854
 8010484:	24000864 	.word	0x24000864
 8010488:	24000850 	.word	0x24000850
 801048c:	2400074c 	.word	0x2400074c
 8010490:	e000ed04 	.word	0xe000ed04

08010494 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010494:	b580      	push	{r7, lr}
 8010496:	b084      	sub	sp, #16
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801049c:	2300      	movs	r3, #0
 801049e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d017      	beq.n	80104d6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80104a6:	4b13      	ldr	r3, [pc, #76]	; (80104f4 <vTaskDelay+0x60>)
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d00a      	beq.n	80104c4 <vTaskDelay+0x30>
	__asm volatile
 80104ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104b2:	f383 8811 	msr	BASEPRI, r3
 80104b6:	f3bf 8f6f 	isb	sy
 80104ba:	f3bf 8f4f 	dsb	sy
 80104be:	60bb      	str	r3, [r7, #8]
}
 80104c0:	bf00      	nop
 80104c2:	e7fe      	b.n	80104c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80104c4:	f000 f87a 	bl	80105bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80104c8:	2100      	movs	r1, #0
 80104ca:	6878      	ldr	r0, [r7, #4]
 80104cc:	f000 fdd0 	bl	8011070 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80104d0:	f000 f882 	bl	80105d8 <xTaskResumeAll>
 80104d4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d107      	bne.n	80104ec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80104dc:	4b06      	ldr	r3, [pc, #24]	; (80104f8 <vTaskDelay+0x64>)
 80104de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80104e2:	601a      	str	r2, [r3, #0]
 80104e4:	f3bf 8f4f 	dsb	sy
 80104e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80104ec:	bf00      	nop
 80104ee:	3710      	adds	r7, #16
 80104f0:	46bd      	mov	sp, r7
 80104f2:	bd80      	pop	{r7, pc}
 80104f4:	24000870 	.word	0x24000870
 80104f8:	e000ed04 	.word	0xe000ed04

080104fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80104fc:	b580      	push	{r7, lr}
 80104fe:	b08a      	sub	sp, #40	; 0x28
 8010500:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010502:	2300      	movs	r3, #0
 8010504:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010506:	2300      	movs	r3, #0
 8010508:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801050a:	463a      	mov	r2, r7
 801050c:	1d39      	adds	r1, r7, #4
 801050e:	f107 0308 	add.w	r3, r7, #8
 8010512:	4618      	mov	r0, r3
 8010514:	f7f0 f86e 	bl	80005f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010518:	6839      	ldr	r1, [r7, #0]
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	68ba      	ldr	r2, [r7, #8]
 801051e:	9202      	str	r2, [sp, #8]
 8010520:	9301      	str	r3, [sp, #4]
 8010522:	2300      	movs	r3, #0
 8010524:	9300      	str	r3, [sp, #0]
 8010526:	2300      	movs	r3, #0
 8010528:	460a      	mov	r2, r1
 801052a:	491e      	ldr	r1, [pc, #120]	; (80105a4 <vTaskStartScheduler+0xa8>)
 801052c:	481e      	ldr	r0, [pc, #120]	; (80105a8 <vTaskStartScheduler+0xac>)
 801052e:	f7ff fe1d 	bl	801016c <xTaskCreateStatic>
 8010532:	4603      	mov	r3, r0
 8010534:	4a1d      	ldr	r2, [pc, #116]	; (80105ac <vTaskStartScheduler+0xb0>)
 8010536:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010538:	4b1c      	ldr	r3, [pc, #112]	; (80105ac <vTaskStartScheduler+0xb0>)
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	2b00      	cmp	r3, #0
 801053e:	d002      	beq.n	8010546 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010540:	2301      	movs	r3, #1
 8010542:	617b      	str	r3, [r7, #20]
 8010544:	e001      	b.n	801054a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010546:	2300      	movs	r3, #0
 8010548:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801054a:	697b      	ldr	r3, [r7, #20]
 801054c:	2b01      	cmp	r3, #1
 801054e:	d116      	bne.n	801057e <vTaskStartScheduler+0x82>
	__asm volatile
 8010550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010554:	f383 8811 	msr	BASEPRI, r3
 8010558:	f3bf 8f6f 	isb	sy
 801055c:	f3bf 8f4f 	dsb	sy
 8010560:	613b      	str	r3, [r7, #16]
}
 8010562:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010564:	4b12      	ldr	r3, [pc, #72]	; (80105b0 <vTaskStartScheduler+0xb4>)
 8010566:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801056a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801056c:	4b11      	ldr	r3, [pc, #68]	; (80105b4 <vTaskStartScheduler+0xb8>)
 801056e:	2201      	movs	r2, #1
 8010570:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010572:	4b11      	ldr	r3, [pc, #68]	; (80105b8 <vTaskStartScheduler+0xbc>)
 8010574:	2200      	movs	r2, #0
 8010576:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010578:	f000 fe6a 	bl	8011250 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801057c:	e00e      	b.n	801059c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801057e:	697b      	ldr	r3, [r7, #20]
 8010580:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010584:	d10a      	bne.n	801059c <vTaskStartScheduler+0xa0>
	__asm volatile
 8010586:	f04f 0350 	mov.w	r3, #80	; 0x50
 801058a:	f383 8811 	msr	BASEPRI, r3
 801058e:	f3bf 8f6f 	isb	sy
 8010592:	f3bf 8f4f 	dsb	sy
 8010596:	60fb      	str	r3, [r7, #12]
}
 8010598:	bf00      	nop
 801059a:	e7fe      	b.n	801059a <vTaskStartScheduler+0x9e>
}
 801059c:	bf00      	nop
 801059e:	3718      	adds	r7, #24
 80105a0:	46bd      	mov	sp, r7
 80105a2:	bd80      	pop	{r7, pc}
 80105a4:	08011c4c 	.word	0x08011c4c
 80105a8:	08010b4d 	.word	0x08010b4d
 80105ac:	2400086c 	.word	0x2400086c
 80105b0:	24000868 	.word	0x24000868
 80105b4:	24000854 	.word	0x24000854
 80105b8:	2400084c 	.word	0x2400084c

080105bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80105bc:	b480      	push	{r7}
 80105be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80105c0:	4b04      	ldr	r3, [pc, #16]	; (80105d4 <vTaskSuspendAll+0x18>)
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	3301      	adds	r3, #1
 80105c6:	4a03      	ldr	r2, [pc, #12]	; (80105d4 <vTaskSuspendAll+0x18>)
 80105c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80105ca:	bf00      	nop
 80105cc:	46bd      	mov	sp, r7
 80105ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d2:	4770      	bx	lr
 80105d4:	24000870 	.word	0x24000870

080105d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80105d8:	b580      	push	{r7, lr}
 80105da:	b084      	sub	sp, #16
 80105dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80105de:	2300      	movs	r3, #0
 80105e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80105e2:	2300      	movs	r3, #0
 80105e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80105e6:	4b41      	ldr	r3, [pc, #260]	; (80106ec <xTaskResumeAll+0x114>)
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d10a      	bne.n	8010604 <xTaskResumeAll+0x2c>
	__asm volatile
 80105ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105f2:	f383 8811 	msr	BASEPRI, r3
 80105f6:	f3bf 8f6f 	isb	sy
 80105fa:	f3bf 8f4f 	dsb	sy
 80105fe:	603b      	str	r3, [r7, #0]
}
 8010600:	bf00      	nop
 8010602:	e7fe      	b.n	8010602 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010604:	f000 fec6 	bl	8011394 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010608:	4b38      	ldr	r3, [pc, #224]	; (80106ec <xTaskResumeAll+0x114>)
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	3b01      	subs	r3, #1
 801060e:	4a37      	ldr	r2, [pc, #220]	; (80106ec <xTaskResumeAll+0x114>)
 8010610:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010612:	4b36      	ldr	r3, [pc, #216]	; (80106ec <xTaskResumeAll+0x114>)
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	2b00      	cmp	r3, #0
 8010618:	d161      	bne.n	80106de <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801061a:	4b35      	ldr	r3, [pc, #212]	; (80106f0 <xTaskResumeAll+0x118>)
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d05d      	beq.n	80106de <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010622:	e02e      	b.n	8010682 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010624:	4b33      	ldr	r3, [pc, #204]	; (80106f4 <xTaskResumeAll+0x11c>)
 8010626:	68db      	ldr	r3, [r3, #12]
 8010628:	68db      	ldr	r3, [r3, #12]
 801062a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	3318      	adds	r3, #24
 8010630:	4618      	mov	r0, r3
 8010632:	f7fe ff75 	bl	800f520 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	3304      	adds	r3, #4
 801063a:	4618      	mov	r0, r3
 801063c:	f7fe ff70 	bl	800f520 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010644:	2201      	movs	r2, #1
 8010646:	409a      	lsls	r2, r3
 8010648:	4b2b      	ldr	r3, [pc, #172]	; (80106f8 <xTaskResumeAll+0x120>)
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	4313      	orrs	r3, r2
 801064e:	4a2a      	ldr	r2, [pc, #168]	; (80106f8 <xTaskResumeAll+0x120>)
 8010650:	6013      	str	r3, [r2, #0]
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010656:	4613      	mov	r3, r2
 8010658:	009b      	lsls	r3, r3, #2
 801065a:	4413      	add	r3, r2
 801065c:	009b      	lsls	r3, r3, #2
 801065e:	4a27      	ldr	r2, [pc, #156]	; (80106fc <xTaskResumeAll+0x124>)
 8010660:	441a      	add	r2, r3
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	3304      	adds	r3, #4
 8010666:	4619      	mov	r1, r3
 8010668:	4610      	mov	r0, r2
 801066a:	f7fe fefc 	bl	800f466 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010672:	4b23      	ldr	r3, [pc, #140]	; (8010700 <xTaskResumeAll+0x128>)
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010678:	429a      	cmp	r2, r3
 801067a:	d302      	bcc.n	8010682 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 801067c:	4b21      	ldr	r3, [pc, #132]	; (8010704 <xTaskResumeAll+0x12c>)
 801067e:	2201      	movs	r2, #1
 8010680:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010682:	4b1c      	ldr	r3, [pc, #112]	; (80106f4 <xTaskResumeAll+0x11c>)
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d1cc      	bne.n	8010624 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d001      	beq.n	8010694 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010690:	f000 fb12 	bl	8010cb8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8010694:	4b1c      	ldr	r3, [pc, #112]	; (8010708 <xTaskResumeAll+0x130>)
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	2b00      	cmp	r3, #0
 801069e:	d010      	beq.n	80106c2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80106a0:	f000 f836 	bl	8010710 <xTaskIncrementTick>
 80106a4:	4603      	mov	r3, r0
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d002      	beq.n	80106b0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80106aa:	4b16      	ldr	r3, [pc, #88]	; (8010704 <xTaskResumeAll+0x12c>)
 80106ac:	2201      	movs	r2, #1
 80106ae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	3b01      	subs	r3, #1
 80106b4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d1f1      	bne.n	80106a0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80106bc:	4b12      	ldr	r3, [pc, #72]	; (8010708 <xTaskResumeAll+0x130>)
 80106be:	2200      	movs	r2, #0
 80106c0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80106c2:	4b10      	ldr	r3, [pc, #64]	; (8010704 <xTaskResumeAll+0x12c>)
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d009      	beq.n	80106de <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80106ca:	2301      	movs	r3, #1
 80106cc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80106ce:	4b0f      	ldr	r3, [pc, #60]	; (801070c <xTaskResumeAll+0x134>)
 80106d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80106d4:	601a      	str	r2, [r3, #0]
 80106d6:	f3bf 8f4f 	dsb	sy
 80106da:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80106de:	f000 fe89 	bl	80113f4 <vPortExitCritical>

	return xAlreadyYielded;
 80106e2:	68bb      	ldr	r3, [r7, #8]
}
 80106e4:	4618      	mov	r0, r3
 80106e6:	3710      	adds	r7, #16
 80106e8:	46bd      	mov	sp, r7
 80106ea:	bd80      	pop	{r7, pc}
 80106ec:	24000870 	.word	0x24000870
 80106f0:	24000848 	.word	0x24000848
 80106f4:	24000808 	.word	0x24000808
 80106f8:	24000850 	.word	0x24000850
 80106fc:	2400074c 	.word	0x2400074c
 8010700:	24000748 	.word	0x24000748
 8010704:	2400085c 	.word	0x2400085c
 8010708:	24000858 	.word	0x24000858
 801070c:	e000ed04 	.word	0xe000ed04

08010710 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010710:	b580      	push	{r7, lr}
 8010712:	b086      	sub	sp, #24
 8010714:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010716:	2300      	movs	r3, #0
 8010718:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801071a:	4b4e      	ldr	r3, [pc, #312]	; (8010854 <xTaskIncrementTick+0x144>)
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	2b00      	cmp	r3, #0
 8010720:	f040 808e 	bne.w	8010840 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010724:	4b4c      	ldr	r3, [pc, #304]	; (8010858 <xTaskIncrementTick+0x148>)
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	3301      	adds	r3, #1
 801072a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801072c:	4a4a      	ldr	r2, [pc, #296]	; (8010858 <xTaskIncrementTick+0x148>)
 801072e:	693b      	ldr	r3, [r7, #16]
 8010730:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010732:	693b      	ldr	r3, [r7, #16]
 8010734:	2b00      	cmp	r3, #0
 8010736:	d120      	bne.n	801077a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8010738:	4b48      	ldr	r3, [pc, #288]	; (801085c <xTaskIncrementTick+0x14c>)
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	2b00      	cmp	r3, #0
 8010740:	d00a      	beq.n	8010758 <xTaskIncrementTick+0x48>
	__asm volatile
 8010742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010746:	f383 8811 	msr	BASEPRI, r3
 801074a:	f3bf 8f6f 	isb	sy
 801074e:	f3bf 8f4f 	dsb	sy
 8010752:	603b      	str	r3, [r7, #0]
}
 8010754:	bf00      	nop
 8010756:	e7fe      	b.n	8010756 <xTaskIncrementTick+0x46>
 8010758:	4b40      	ldr	r3, [pc, #256]	; (801085c <xTaskIncrementTick+0x14c>)
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	60fb      	str	r3, [r7, #12]
 801075e:	4b40      	ldr	r3, [pc, #256]	; (8010860 <xTaskIncrementTick+0x150>)
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	4a3e      	ldr	r2, [pc, #248]	; (801085c <xTaskIncrementTick+0x14c>)
 8010764:	6013      	str	r3, [r2, #0]
 8010766:	4a3e      	ldr	r2, [pc, #248]	; (8010860 <xTaskIncrementTick+0x150>)
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	6013      	str	r3, [r2, #0]
 801076c:	4b3d      	ldr	r3, [pc, #244]	; (8010864 <xTaskIncrementTick+0x154>)
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	3301      	adds	r3, #1
 8010772:	4a3c      	ldr	r2, [pc, #240]	; (8010864 <xTaskIncrementTick+0x154>)
 8010774:	6013      	str	r3, [r2, #0]
 8010776:	f000 fa9f 	bl	8010cb8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801077a:	4b3b      	ldr	r3, [pc, #236]	; (8010868 <xTaskIncrementTick+0x158>)
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	693a      	ldr	r2, [r7, #16]
 8010780:	429a      	cmp	r2, r3
 8010782:	d348      	bcc.n	8010816 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010784:	4b35      	ldr	r3, [pc, #212]	; (801085c <xTaskIncrementTick+0x14c>)
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d104      	bne.n	8010798 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801078e:	4b36      	ldr	r3, [pc, #216]	; (8010868 <xTaskIncrementTick+0x158>)
 8010790:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010794:	601a      	str	r2, [r3, #0]
					break;
 8010796:	e03e      	b.n	8010816 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010798:	4b30      	ldr	r3, [pc, #192]	; (801085c <xTaskIncrementTick+0x14c>)
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	68db      	ldr	r3, [r3, #12]
 801079e:	68db      	ldr	r3, [r3, #12]
 80107a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80107a2:	68bb      	ldr	r3, [r7, #8]
 80107a4:	685b      	ldr	r3, [r3, #4]
 80107a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80107a8:	693a      	ldr	r2, [r7, #16]
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	429a      	cmp	r2, r3
 80107ae:	d203      	bcs.n	80107b8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80107b0:	4a2d      	ldr	r2, [pc, #180]	; (8010868 <xTaskIncrementTick+0x158>)
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80107b6:	e02e      	b.n	8010816 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80107b8:	68bb      	ldr	r3, [r7, #8]
 80107ba:	3304      	adds	r3, #4
 80107bc:	4618      	mov	r0, r3
 80107be:	f7fe feaf 	bl	800f520 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80107c2:	68bb      	ldr	r3, [r7, #8]
 80107c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d004      	beq.n	80107d4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80107ca:	68bb      	ldr	r3, [r7, #8]
 80107cc:	3318      	adds	r3, #24
 80107ce:	4618      	mov	r0, r3
 80107d0:	f7fe fea6 	bl	800f520 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80107d4:	68bb      	ldr	r3, [r7, #8]
 80107d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107d8:	2201      	movs	r2, #1
 80107da:	409a      	lsls	r2, r3
 80107dc:	4b23      	ldr	r3, [pc, #140]	; (801086c <xTaskIncrementTick+0x15c>)
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	4313      	orrs	r3, r2
 80107e2:	4a22      	ldr	r2, [pc, #136]	; (801086c <xTaskIncrementTick+0x15c>)
 80107e4:	6013      	str	r3, [r2, #0]
 80107e6:	68bb      	ldr	r3, [r7, #8]
 80107e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107ea:	4613      	mov	r3, r2
 80107ec:	009b      	lsls	r3, r3, #2
 80107ee:	4413      	add	r3, r2
 80107f0:	009b      	lsls	r3, r3, #2
 80107f2:	4a1f      	ldr	r2, [pc, #124]	; (8010870 <xTaskIncrementTick+0x160>)
 80107f4:	441a      	add	r2, r3
 80107f6:	68bb      	ldr	r3, [r7, #8]
 80107f8:	3304      	adds	r3, #4
 80107fa:	4619      	mov	r1, r3
 80107fc:	4610      	mov	r0, r2
 80107fe:	f7fe fe32 	bl	800f466 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010802:	68bb      	ldr	r3, [r7, #8]
 8010804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010806:	4b1b      	ldr	r3, [pc, #108]	; (8010874 <xTaskIncrementTick+0x164>)
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801080c:	429a      	cmp	r2, r3
 801080e:	d3b9      	bcc.n	8010784 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8010810:	2301      	movs	r3, #1
 8010812:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010814:	e7b6      	b.n	8010784 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010816:	4b17      	ldr	r3, [pc, #92]	; (8010874 <xTaskIncrementTick+0x164>)
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801081c:	4914      	ldr	r1, [pc, #80]	; (8010870 <xTaskIncrementTick+0x160>)
 801081e:	4613      	mov	r3, r2
 8010820:	009b      	lsls	r3, r3, #2
 8010822:	4413      	add	r3, r2
 8010824:	009b      	lsls	r3, r3, #2
 8010826:	440b      	add	r3, r1
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	2b01      	cmp	r3, #1
 801082c:	d901      	bls.n	8010832 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 801082e:	2301      	movs	r3, #1
 8010830:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010832:	4b11      	ldr	r3, [pc, #68]	; (8010878 <xTaskIncrementTick+0x168>)
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	2b00      	cmp	r3, #0
 8010838:	d007      	beq.n	801084a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 801083a:	2301      	movs	r3, #1
 801083c:	617b      	str	r3, [r7, #20]
 801083e:	e004      	b.n	801084a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8010840:	4b0e      	ldr	r3, [pc, #56]	; (801087c <xTaskIncrementTick+0x16c>)
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	3301      	adds	r3, #1
 8010846:	4a0d      	ldr	r2, [pc, #52]	; (801087c <xTaskIncrementTick+0x16c>)
 8010848:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801084a:	697b      	ldr	r3, [r7, #20]
}
 801084c:	4618      	mov	r0, r3
 801084e:	3718      	adds	r7, #24
 8010850:	46bd      	mov	sp, r7
 8010852:	bd80      	pop	{r7, pc}
 8010854:	24000870 	.word	0x24000870
 8010858:	2400084c 	.word	0x2400084c
 801085c:	24000800 	.word	0x24000800
 8010860:	24000804 	.word	0x24000804
 8010864:	24000860 	.word	0x24000860
 8010868:	24000868 	.word	0x24000868
 801086c:	24000850 	.word	0x24000850
 8010870:	2400074c 	.word	0x2400074c
 8010874:	24000748 	.word	0x24000748
 8010878:	2400085c 	.word	0x2400085c
 801087c:	24000858 	.word	0x24000858

08010880 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010880:	b480      	push	{r7}
 8010882:	b087      	sub	sp, #28
 8010884:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010886:	4b27      	ldr	r3, [pc, #156]	; (8010924 <vTaskSwitchContext+0xa4>)
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	2b00      	cmp	r3, #0
 801088c:	d003      	beq.n	8010896 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801088e:	4b26      	ldr	r3, [pc, #152]	; (8010928 <vTaskSwitchContext+0xa8>)
 8010890:	2201      	movs	r2, #1
 8010892:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010894:	e03f      	b.n	8010916 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8010896:	4b24      	ldr	r3, [pc, #144]	; (8010928 <vTaskSwitchContext+0xa8>)
 8010898:	2200      	movs	r2, #0
 801089a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801089c:	4b23      	ldr	r3, [pc, #140]	; (801092c <vTaskSwitchContext+0xac>)
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	fab3 f383 	clz	r3, r3
 80108a8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80108aa:	7afb      	ldrb	r3, [r7, #11]
 80108ac:	f1c3 031f 	rsb	r3, r3, #31
 80108b0:	617b      	str	r3, [r7, #20]
 80108b2:	491f      	ldr	r1, [pc, #124]	; (8010930 <vTaskSwitchContext+0xb0>)
 80108b4:	697a      	ldr	r2, [r7, #20]
 80108b6:	4613      	mov	r3, r2
 80108b8:	009b      	lsls	r3, r3, #2
 80108ba:	4413      	add	r3, r2
 80108bc:	009b      	lsls	r3, r3, #2
 80108be:	440b      	add	r3, r1
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d10a      	bne.n	80108dc <vTaskSwitchContext+0x5c>
	__asm volatile
 80108c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108ca:	f383 8811 	msr	BASEPRI, r3
 80108ce:	f3bf 8f6f 	isb	sy
 80108d2:	f3bf 8f4f 	dsb	sy
 80108d6:	607b      	str	r3, [r7, #4]
}
 80108d8:	bf00      	nop
 80108da:	e7fe      	b.n	80108da <vTaskSwitchContext+0x5a>
 80108dc:	697a      	ldr	r2, [r7, #20]
 80108de:	4613      	mov	r3, r2
 80108e0:	009b      	lsls	r3, r3, #2
 80108e2:	4413      	add	r3, r2
 80108e4:	009b      	lsls	r3, r3, #2
 80108e6:	4a12      	ldr	r2, [pc, #72]	; (8010930 <vTaskSwitchContext+0xb0>)
 80108e8:	4413      	add	r3, r2
 80108ea:	613b      	str	r3, [r7, #16]
 80108ec:	693b      	ldr	r3, [r7, #16]
 80108ee:	685b      	ldr	r3, [r3, #4]
 80108f0:	685a      	ldr	r2, [r3, #4]
 80108f2:	693b      	ldr	r3, [r7, #16]
 80108f4:	605a      	str	r2, [r3, #4]
 80108f6:	693b      	ldr	r3, [r7, #16]
 80108f8:	685a      	ldr	r2, [r3, #4]
 80108fa:	693b      	ldr	r3, [r7, #16]
 80108fc:	3308      	adds	r3, #8
 80108fe:	429a      	cmp	r2, r3
 8010900:	d104      	bne.n	801090c <vTaskSwitchContext+0x8c>
 8010902:	693b      	ldr	r3, [r7, #16]
 8010904:	685b      	ldr	r3, [r3, #4]
 8010906:	685a      	ldr	r2, [r3, #4]
 8010908:	693b      	ldr	r3, [r7, #16]
 801090a:	605a      	str	r2, [r3, #4]
 801090c:	693b      	ldr	r3, [r7, #16]
 801090e:	685b      	ldr	r3, [r3, #4]
 8010910:	68db      	ldr	r3, [r3, #12]
 8010912:	4a08      	ldr	r2, [pc, #32]	; (8010934 <vTaskSwitchContext+0xb4>)
 8010914:	6013      	str	r3, [r2, #0]
}
 8010916:	bf00      	nop
 8010918:	371c      	adds	r7, #28
 801091a:	46bd      	mov	sp, r7
 801091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010920:	4770      	bx	lr
 8010922:	bf00      	nop
 8010924:	24000870 	.word	0x24000870
 8010928:	2400085c 	.word	0x2400085c
 801092c:	24000850 	.word	0x24000850
 8010930:	2400074c 	.word	0x2400074c
 8010934:	24000748 	.word	0x24000748

08010938 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010938:	b580      	push	{r7, lr}
 801093a:	b084      	sub	sp, #16
 801093c:	af00      	add	r7, sp, #0
 801093e:	6078      	str	r0, [r7, #4]
 8010940:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	2b00      	cmp	r3, #0
 8010946:	d10a      	bne.n	801095e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8010948:	f04f 0350 	mov.w	r3, #80	; 0x50
 801094c:	f383 8811 	msr	BASEPRI, r3
 8010950:	f3bf 8f6f 	isb	sy
 8010954:	f3bf 8f4f 	dsb	sy
 8010958:	60fb      	str	r3, [r7, #12]
}
 801095a:	bf00      	nop
 801095c:	e7fe      	b.n	801095c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801095e:	4b07      	ldr	r3, [pc, #28]	; (801097c <vTaskPlaceOnEventList+0x44>)
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	3318      	adds	r3, #24
 8010964:	4619      	mov	r1, r3
 8010966:	6878      	ldr	r0, [r7, #4]
 8010968:	f7fe fda1 	bl	800f4ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801096c:	2101      	movs	r1, #1
 801096e:	6838      	ldr	r0, [r7, #0]
 8010970:	f000 fb7e 	bl	8011070 <prvAddCurrentTaskToDelayedList>
}
 8010974:	bf00      	nop
 8010976:	3710      	adds	r7, #16
 8010978:	46bd      	mov	sp, r7
 801097a:	bd80      	pop	{r7, pc}
 801097c:	24000748 	.word	0x24000748

08010980 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010980:	b580      	push	{r7, lr}
 8010982:	b086      	sub	sp, #24
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	68db      	ldr	r3, [r3, #12]
 801098c:	68db      	ldr	r3, [r3, #12]
 801098e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010990:	693b      	ldr	r3, [r7, #16]
 8010992:	2b00      	cmp	r3, #0
 8010994:	d10a      	bne.n	80109ac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8010996:	f04f 0350 	mov.w	r3, #80	; 0x50
 801099a:	f383 8811 	msr	BASEPRI, r3
 801099e:	f3bf 8f6f 	isb	sy
 80109a2:	f3bf 8f4f 	dsb	sy
 80109a6:	60fb      	str	r3, [r7, #12]
}
 80109a8:	bf00      	nop
 80109aa:	e7fe      	b.n	80109aa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80109ac:	693b      	ldr	r3, [r7, #16]
 80109ae:	3318      	adds	r3, #24
 80109b0:	4618      	mov	r0, r3
 80109b2:	f7fe fdb5 	bl	800f520 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80109b6:	4b1d      	ldr	r3, [pc, #116]	; (8010a2c <xTaskRemoveFromEventList+0xac>)
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d11c      	bne.n	80109f8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80109be:	693b      	ldr	r3, [r7, #16]
 80109c0:	3304      	adds	r3, #4
 80109c2:	4618      	mov	r0, r3
 80109c4:	f7fe fdac 	bl	800f520 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80109c8:	693b      	ldr	r3, [r7, #16]
 80109ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109cc:	2201      	movs	r2, #1
 80109ce:	409a      	lsls	r2, r3
 80109d0:	4b17      	ldr	r3, [pc, #92]	; (8010a30 <xTaskRemoveFromEventList+0xb0>)
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	4313      	orrs	r3, r2
 80109d6:	4a16      	ldr	r2, [pc, #88]	; (8010a30 <xTaskRemoveFromEventList+0xb0>)
 80109d8:	6013      	str	r3, [r2, #0]
 80109da:	693b      	ldr	r3, [r7, #16]
 80109dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80109de:	4613      	mov	r3, r2
 80109e0:	009b      	lsls	r3, r3, #2
 80109e2:	4413      	add	r3, r2
 80109e4:	009b      	lsls	r3, r3, #2
 80109e6:	4a13      	ldr	r2, [pc, #76]	; (8010a34 <xTaskRemoveFromEventList+0xb4>)
 80109e8:	441a      	add	r2, r3
 80109ea:	693b      	ldr	r3, [r7, #16]
 80109ec:	3304      	adds	r3, #4
 80109ee:	4619      	mov	r1, r3
 80109f0:	4610      	mov	r0, r2
 80109f2:	f7fe fd38 	bl	800f466 <vListInsertEnd>
 80109f6:	e005      	b.n	8010a04 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80109f8:	693b      	ldr	r3, [r7, #16]
 80109fa:	3318      	adds	r3, #24
 80109fc:	4619      	mov	r1, r3
 80109fe:	480e      	ldr	r0, [pc, #56]	; (8010a38 <xTaskRemoveFromEventList+0xb8>)
 8010a00:	f7fe fd31 	bl	800f466 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010a04:	693b      	ldr	r3, [r7, #16]
 8010a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a08:	4b0c      	ldr	r3, [pc, #48]	; (8010a3c <xTaskRemoveFromEventList+0xbc>)
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a0e:	429a      	cmp	r2, r3
 8010a10:	d905      	bls.n	8010a1e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010a12:	2301      	movs	r3, #1
 8010a14:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010a16:	4b0a      	ldr	r3, [pc, #40]	; (8010a40 <xTaskRemoveFromEventList+0xc0>)
 8010a18:	2201      	movs	r2, #1
 8010a1a:	601a      	str	r2, [r3, #0]
 8010a1c:	e001      	b.n	8010a22 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8010a1e:	2300      	movs	r3, #0
 8010a20:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010a22:	697b      	ldr	r3, [r7, #20]
}
 8010a24:	4618      	mov	r0, r3
 8010a26:	3718      	adds	r7, #24
 8010a28:	46bd      	mov	sp, r7
 8010a2a:	bd80      	pop	{r7, pc}
 8010a2c:	24000870 	.word	0x24000870
 8010a30:	24000850 	.word	0x24000850
 8010a34:	2400074c 	.word	0x2400074c
 8010a38:	24000808 	.word	0x24000808
 8010a3c:	24000748 	.word	0x24000748
 8010a40:	2400085c 	.word	0x2400085c

08010a44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010a44:	b480      	push	{r7}
 8010a46:	b083      	sub	sp, #12
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010a4c:	4b06      	ldr	r3, [pc, #24]	; (8010a68 <vTaskInternalSetTimeOutState+0x24>)
 8010a4e:	681a      	ldr	r2, [r3, #0]
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010a54:	4b05      	ldr	r3, [pc, #20]	; (8010a6c <vTaskInternalSetTimeOutState+0x28>)
 8010a56:	681a      	ldr	r2, [r3, #0]
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	605a      	str	r2, [r3, #4]
}
 8010a5c:	bf00      	nop
 8010a5e:	370c      	adds	r7, #12
 8010a60:	46bd      	mov	sp, r7
 8010a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a66:	4770      	bx	lr
 8010a68:	24000860 	.word	0x24000860
 8010a6c:	2400084c 	.word	0x2400084c

08010a70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010a70:	b580      	push	{r7, lr}
 8010a72:	b088      	sub	sp, #32
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	6078      	str	r0, [r7, #4]
 8010a78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d10a      	bne.n	8010a96 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8010a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a84:	f383 8811 	msr	BASEPRI, r3
 8010a88:	f3bf 8f6f 	isb	sy
 8010a8c:	f3bf 8f4f 	dsb	sy
 8010a90:	613b      	str	r3, [r7, #16]
}
 8010a92:	bf00      	nop
 8010a94:	e7fe      	b.n	8010a94 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8010a96:	683b      	ldr	r3, [r7, #0]
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d10a      	bne.n	8010ab2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8010a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010aa0:	f383 8811 	msr	BASEPRI, r3
 8010aa4:	f3bf 8f6f 	isb	sy
 8010aa8:	f3bf 8f4f 	dsb	sy
 8010aac:	60fb      	str	r3, [r7, #12]
}
 8010aae:	bf00      	nop
 8010ab0:	e7fe      	b.n	8010ab0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8010ab2:	f000 fc6f 	bl	8011394 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010ab6:	4b1d      	ldr	r3, [pc, #116]	; (8010b2c <xTaskCheckForTimeOut+0xbc>)
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	685b      	ldr	r3, [r3, #4]
 8010ac0:	69ba      	ldr	r2, [r7, #24]
 8010ac2:	1ad3      	subs	r3, r2, r3
 8010ac4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010ac6:	683b      	ldr	r3, [r7, #0]
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010ace:	d102      	bne.n	8010ad6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010ad0:	2300      	movs	r3, #0
 8010ad2:	61fb      	str	r3, [r7, #28]
 8010ad4:	e023      	b.n	8010b1e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	681a      	ldr	r2, [r3, #0]
 8010ada:	4b15      	ldr	r3, [pc, #84]	; (8010b30 <xTaskCheckForTimeOut+0xc0>)
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	429a      	cmp	r2, r3
 8010ae0:	d007      	beq.n	8010af2 <xTaskCheckForTimeOut+0x82>
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	685b      	ldr	r3, [r3, #4]
 8010ae6:	69ba      	ldr	r2, [r7, #24]
 8010ae8:	429a      	cmp	r2, r3
 8010aea:	d302      	bcc.n	8010af2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010aec:	2301      	movs	r3, #1
 8010aee:	61fb      	str	r3, [r7, #28]
 8010af0:	e015      	b.n	8010b1e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010af2:	683b      	ldr	r3, [r7, #0]
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	697a      	ldr	r2, [r7, #20]
 8010af8:	429a      	cmp	r2, r3
 8010afa:	d20b      	bcs.n	8010b14 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010afc:	683b      	ldr	r3, [r7, #0]
 8010afe:	681a      	ldr	r2, [r3, #0]
 8010b00:	697b      	ldr	r3, [r7, #20]
 8010b02:	1ad2      	subs	r2, r2, r3
 8010b04:	683b      	ldr	r3, [r7, #0]
 8010b06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010b08:	6878      	ldr	r0, [r7, #4]
 8010b0a:	f7ff ff9b 	bl	8010a44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010b0e:	2300      	movs	r3, #0
 8010b10:	61fb      	str	r3, [r7, #28]
 8010b12:	e004      	b.n	8010b1e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8010b14:	683b      	ldr	r3, [r7, #0]
 8010b16:	2200      	movs	r2, #0
 8010b18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010b1a:	2301      	movs	r3, #1
 8010b1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010b1e:	f000 fc69 	bl	80113f4 <vPortExitCritical>

	return xReturn;
 8010b22:	69fb      	ldr	r3, [r7, #28]
}
 8010b24:	4618      	mov	r0, r3
 8010b26:	3720      	adds	r7, #32
 8010b28:	46bd      	mov	sp, r7
 8010b2a:	bd80      	pop	{r7, pc}
 8010b2c:	2400084c 	.word	0x2400084c
 8010b30:	24000860 	.word	0x24000860

08010b34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010b34:	b480      	push	{r7}
 8010b36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010b38:	4b03      	ldr	r3, [pc, #12]	; (8010b48 <vTaskMissedYield+0x14>)
 8010b3a:	2201      	movs	r2, #1
 8010b3c:	601a      	str	r2, [r3, #0]
}
 8010b3e:	bf00      	nop
 8010b40:	46bd      	mov	sp, r7
 8010b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b46:	4770      	bx	lr
 8010b48:	2400085c 	.word	0x2400085c

08010b4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010b4c:	b580      	push	{r7, lr}
 8010b4e:	b082      	sub	sp, #8
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010b54:	f000 f852 	bl	8010bfc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010b58:	4b06      	ldr	r3, [pc, #24]	; (8010b74 <prvIdleTask+0x28>)
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	2b01      	cmp	r3, #1
 8010b5e:	d9f9      	bls.n	8010b54 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010b60:	4b05      	ldr	r3, [pc, #20]	; (8010b78 <prvIdleTask+0x2c>)
 8010b62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b66:	601a      	str	r2, [r3, #0]
 8010b68:	f3bf 8f4f 	dsb	sy
 8010b6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010b70:	e7f0      	b.n	8010b54 <prvIdleTask+0x8>
 8010b72:	bf00      	nop
 8010b74:	2400074c 	.word	0x2400074c
 8010b78:	e000ed04 	.word	0xe000ed04

08010b7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b082      	sub	sp, #8
 8010b80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010b82:	2300      	movs	r3, #0
 8010b84:	607b      	str	r3, [r7, #4]
 8010b86:	e00c      	b.n	8010ba2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010b88:	687a      	ldr	r2, [r7, #4]
 8010b8a:	4613      	mov	r3, r2
 8010b8c:	009b      	lsls	r3, r3, #2
 8010b8e:	4413      	add	r3, r2
 8010b90:	009b      	lsls	r3, r3, #2
 8010b92:	4a12      	ldr	r2, [pc, #72]	; (8010bdc <prvInitialiseTaskLists+0x60>)
 8010b94:	4413      	add	r3, r2
 8010b96:	4618      	mov	r0, r3
 8010b98:	f7fe fc38 	bl	800f40c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	3301      	adds	r3, #1
 8010ba0:	607b      	str	r3, [r7, #4]
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	2b06      	cmp	r3, #6
 8010ba6:	d9ef      	bls.n	8010b88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010ba8:	480d      	ldr	r0, [pc, #52]	; (8010be0 <prvInitialiseTaskLists+0x64>)
 8010baa:	f7fe fc2f 	bl	800f40c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010bae:	480d      	ldr	r0, [pc, #52]	; (8010be4 <prvInitialiseTaskLists+0x68>)
 8010bb0:	f7fe fc2c 	bl	800f40c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010bb4:	480c      	ldr	r0, [pc, #48]	; (8010be8 <prvInitialiseTaskLists+0x6c>)
 8010bb6:	f7fe fc29 	bl	800f40c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010bba:	480c      	ldr	r0, [pc, #48]	; (8010bec <prvInitialiseTaskLists+0x70>)
 8010bbc:	f7fe fc26 	bl	800f40c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010bc0:	480b      	ldr	r0, [pc, #44]	; (8010bf0 <prvInitialiseTaskLists+0x74>)
 8010bc2:	f7fe fc23 	bl	800f40c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010bc6:	4b0b      	ldr	r3, [pc, #44]	; (8010bf4 <prvInitialiseTaskLists+0x78>)
 8010bc8:	4a05      	ldr	r2, [pc, #20]	; (8010be0 <prvInitialiseTaskLists+0x64>)
 8010bca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010bcc:	4b0a      	ldr	r3, [pc, #40]	; (8010bf8 <prvInitialiseTaskLists+0x7c>)
 8010bce:	4a05      	ldr	r2, [pc, #20]	; (8010be4 <prvInitialiseTaskLists+0x68>)
 8010bd0:	601a      	str	r2, [r3, #0]
}
 8010bd2:	bf00      	nop
 8010bd4:	3708      	adds	r7, #8
 8010bd6:	46bd      	mov	sp, r7
 8010bd8:	bd80      	pop	{r7, pc}
 8010bda:	bf00      	nop
 8010bdc:	2400074c 	.word	0x2400074c
 8010be0:	240007d8 	.word	0x240007d8
 8010be4:	240007ec 	.word	0x240007ec
 8010be8:	24000808 	.word	0x24000808
 8010bec:	2400081c 	.word	0x2400081c
 8010bf0:	24000834 	.word	0x24000834
 8010bf4:	24000800 	.word	0x24000800
 8010bf8:	24000804 	.word	0x24000804

08010bfc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010bfc:	b580      	push	{r7, lr}
 8010bfe:	b082      	sub	sp, #8
 8010c00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010c02:	e019      	b.n	8010c38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010c04:	f000 fbc6 	bl	8011394 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010c08:	4b10      	ldr	r3, [pc, #64]	; (8010c4c <prvCheckTasksWaitingTermination+0x50>)
 8010c0a:	68db      	ldr	r3, [r3, #12]
 8010c0c:	68db      	ldr	r3, [r3, #12]
 8010c0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	3304      	adds	r3, #4
 8010c14:	4618      	mov	r0, r3
 8010c16:	f7fe fc83 	bl	800f520 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010c1a:	4b0d      	ldr	r3, [pc, #52]	; (8010c50 <prvCheckTasksWaitingTermination+0x54>)
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	3b01      	subs	r3, #1
 8010c20:	4a0b      	ldr	r2, [pc, #44]	; (8010c50 <prvCheckTasksWaitingTermination+0x54>)
 8010c22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010c24:	4b0b      	ldr	r3, [pc, #44]	; (8010c54 <prvCheckTasksWaitingTermination+0x58>)
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	3b01      	subs	r3, #1
 8010c2a:	4a0a      	ldr	r2, [pc, #40]	; (8010c54 <prvCheckTasksWaitingTermination+0x58>)
 8010c2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010c2e:	f000 fbe1 	bl	80113f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010c32:	6878      	ldr	r0, [r7, #4]
 8010c34:	f000 f810 	bl	8010c58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010c38:	4b06      	ldr	r3, [pc, #24]	; (8010c54 <prvCheckTasksWaitingTermination+0x58>)
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d1e1      	bne.n	8010c04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010c40:	bf00      	nop
 8010c42:	bf00      	nop
 8010c44:	3708      	adds	r7, #8
 8010c46:	46bd      	mov	sp, r7
 8010c48:	bd80      	pop	{r7, pc}
 8010c4a:	bf00      	nop
 8010c4c:	2400081c 	.word	0x2400081c
 8010c50:	24000848 	.word	0x24000848
 8010c54:	24000830 	.word	0x24000830

08010c58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b084      	sub	sp, #16
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d108      	bne.n	8010c7c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c6e:	4618      	mov	r0, r3
 8010c70:	f000 fd7e 	bl	8011770 <vPortFree>
				vPortFree( pxTCB );
 8010c74:	6878      	ldr	r0, [r7, #4]
 8010c76:	f000 fd7b 	bl	8011770 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010c7a:	e018      	b.n	8010cae <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010c82:	2b01      	cmp	r3, #1
 8010c84:	d103      	bne.n	8010c8e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8010c86:	6878      	ldr	r0, [r7, #4]
 8010c88:	f000 fd72 	bl	8011770 <vPortFree>
	}
 8010c8c:	e00f      	b.n	8010cae <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010c94:	2b02      	cmp	r3, #2
 8010c96:	d00a      	beq.n	8010cae <prvDeleteTCB+0x56>
	__asm volatile
 8010c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c9c:	f383 8811 	msr	BASEPRI, r3
 8010ca0:	f3bf 8f6f 	isb	sy
 8010ca4:	f3bf 8f4f 	dsb	sy
 8010ca8:	60fb      	str	r3, [r7, #12]
}
 8010caa:	bf00      	nop
 8010cac:	e7fe      	b.n	8010cac <prvDeleteTCB+0x54>
	}
 8010cae:	bf00      	nop
 8010cb0:	3710      	adds	r7, #16
 8010cb2:	46bd      	mov	sp, r7
 8010cb4:	bd80      	pop	{r7, pc}
	...

08010cb8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010cb8:	b480      	push	{r7}
 8010cba:	b083      	sub	sp, #12
 8010cbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010cbe:	4b0c      	ldr	r3, [pc, #48]	; (8010cf0 <prvResetNextTaskUnblockTime+0x38>)
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d104      	bne.n	8010cd2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010cc8:	4b0a      	ldr	r3, [pc, #40]	; (8010cf4 <prvResetNextTaskUnblockTime+0x3c>)
 8010cca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010cce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010cd0:	e008      	b.n	8010ce4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010cd2:	4b07      	ldr	r3, [pc, #28]	; (8010cf0 <prvResetNextTaskUnblockTime+0x38>)
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	68db      	ldr	r3, [r3, #12]
 8010cd8:	68db      	ldr	r3, [r3, #12]
 8010cda:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	685b      	ldr	r3, [r3, #4]
 8010ce0:	4a04      	ldr	r2, [pc, #16]	; (8010cf4 <prvResetNextTaskUnblockTime+0x3c>)
 8010ce2:	6013      	str	r3, [r2, #0]
}
 8010ce4:	bf00      	nop
 8010ce6:	370c      	adds	r7, #12
 8010ce8:	46bd      	mov	sp, r7
 8010cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cee:	4770      	bx	lr
 8010cf0:	24000800 	.word	0x24000800
 8010cf4:	24000868 	.word	0x24000868

08010cf8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010cf8:	b480      	push	{r7}
 8010cfa:	b083      	sub	sp, #12
 8010cfc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010cfe:	4b0b      	ldr	r3, [pc, #44]	; (8010d2c <xTaskGetSchedulerState+0x34>)
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d102      	bne.n	8010d0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010d06:	2301      	movs	r3, #1
 8010d08:	607b      	str	r3, [r7, #4]
 8010d0a:	e008      	b.n	8010d1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010d0c:	4b08      	ldr	r3, [pc, #32]	; (8010d30 <xTaskGetSchedulerState+0x38>)
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d102      	bne.n	8010d1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010d14:	2302      	movs	r3, #2
 8010d16:	607b      	str	r3, [r7, #4]
 8010d18:	e001      	b.n	8010d1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010d1a:	2300      	movs	r3, #0
 8010d1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010d1e:	687b      	ldr	r3, [r7, #4]
	}
 8010d20:	4618      	mov	r0, r3
 8010d22:	370c      	adds	r7, #12
 8010d24:	46bd      	mov	sp, r7
 8010d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d2a:	4770      	bx	lr
 8010d2c:	24000854 	.word	0x24000854
 8010d30:	24000870 	.word	0x24000870

08010d34 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010d34:	b580      	push	{r7, lr}
 8010d36:	b084      	sub	sp, #16
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010d40:	2300      	movs	r3, #0
 8010d42:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d05e      	beq.n	8010e08 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010d4a:	68bb      	ldr	r3, [r7, #8]
 8010d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d4e:	4b31      	ldr	r3, [pc, #196]	; (8010e14 <xTaskPriorityInherit+0xe0>)
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d54:	429a      	cmp	r2, r3
 8010d56:	d24e      	bcs.n	8010df6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010d58:	68bb      	ldr	r3, [r7, #8]
 8010d5a:	699b      	ldr	r3, [r3, #24]
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	db06      	blt.n	8010d6e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010d60:	4b2c      	ldr	r3, [pc, #176]	; (8010e14 <xTaskPriorityInherit+0xe0>)
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d66:	f1c3 0207 	rsb	r2, r3, #7
 8010d6a:	68bb      	ldr	r3, [r7, #8]
 8010d6c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010d6e:	68bb      	ldr	r3, [r7, #8]
 8010d70:	6959      	ldr	r1, [r3, #20]
 8010d72:	68bb      	ldr	r3, [r7, #8]
 8010d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d76:	4613      	mov	r3, r2
 8010d78:	009b      	lsls	r3, r3, #2
 8010d7a:	4413      	add	r3, r2
 8010d7c:	009b      	lsls	r3, r3, #2
 8010d7e:	4a26      	ldr	r2, [pc, #152]	; (8010e18 <xTaskPriorityInherit+0xe4>)
 8010d80:	4413      	add	r3, r2
 8010d82:	4299      	cmp	r1, r3
 8010d84:	d12f      	bne.n	8010de6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010d86:	68bb      	ldr	r3, [r7, #8]
 8010d88:	3304      	adds	r3, #4
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	f7fe fbc8 	bl	800f520 <uxListRemove>
 8010d90:	4603      	mov	r3, r0
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d10a      	bne.n	8010dac <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8010d96:	68bb      	ldr	r3, [r7, #8]
 8010d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d9a:	2201      	movs	r2, #1
 8010d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8010da0:	43da      	mvns	r2, r3
 8010da2:	4b1e      	ldr	r3, [pc, #120]	; (8010e1c <xTaskPriorityInherit+0xe8>)
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	4013      	ands	r3, r2
 8010da8:	4a1c      	ldr	r2, [pc, #112]	; (8010e1c <xTaskPriorityInherit+0xe8>)
 8010daa:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010dac:	4b19      	ldr	r3, [pc, #100]	; (8010e14 <xTaskPriorityInherit+0xe0>)
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010db2:	68bb      	ldr	r3, [r7, #8]
 8010db4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010db6:	68bb      	ldr	r3, [r7, #8]
 8010db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010dba:	2201      	movs	r2, #1
 8010dbc:	409a      	lsls	r2, r3
 8010dbe:	4b17      	ldr	r3, [pc, #92]	; (8010e1c <xTaskPriorityInherit+0xe8>)
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	4313      	orrs	r3, r2
 8010dc4:	4a15      	ldr	r2, [pc, #84]	; (8010e1c <xTaskPriorityInherit+0xe8>)
 8010dc6:	6013      	str	r3, [r2, #0]
 8010dc8:	68bb      	ldr	r3, [r7, #8]
 8010dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010dcc:	4613      	mov	r3, r2
 8010dce:	009b      	lsls	r3, r3, #2
 8010dd0:	4413      	add	r3, r2
 8010dd2:	009b      	lsls	r3, r3, #2
 8010dd4:	4a10      	ldr	r2, [pc, #64]	; (8010e18 <xTaskPriorityInherit+0xe4>)
 8010dd6:	441a      	add	r2, r3
 8010dd8:	68bb      	ldr	r3, [r7, #8]
 8010dda:	3304      	adds	r3, #4
 8010ddc:	4619      	mov	r1, r3
 8010dde:	4610      	mov	r0, r2
 8010de0:	f7fe fb41 	bl	800f466 <vListInsertEnd>
 8010de4:	e004      	b.n	8010df0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010de6:	4b0b      	ldr	r3, [pc, #44]	; (8010e14 <xTaskPriorityInherit+0xe0>)
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010dec:	68bb      	ldr	r3, [r7, #8]
 8010dee:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010df0:	2301      	movs	r3, #1
 8010df2:	60fb      	str	r3, [r7, #12]
 8010df4:	e008      	b.n	8010e08 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010df6:	68bb      	ldr	r3, [r7, #8]
 8010df8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010dfa:	4b06      	ldr	r3, [pc, #24]	; (8010e14 <xTaskPriorityInherit+0xe0>)
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e00:	429a      	cmp	r2, r3
 8010e02:	d201      	bcs.n	8010e08 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010e04:	2301      	movs	r3, #1
 8010e06:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010e08:	68fb      	ldr	r3, [r7, #12]
	}
 8010e0a:	4618      	mov	r0, r3
 8010e0c:	3710      	adds	r7, #16
 8010e0e:	46bd      	mov	sp, r7
 8010e10:	bd80      	pop	{r7, pc}
 8010e12:	bf00      	nop
 8010e14:	24000748 	.word	0x24000748
 8010e18:	2400074c 	.word	0x2400074c
 8010e1c:	24000850 	.word	0x24000850

08010e20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010e20:	b580      	push	{r7, lr}
 8010e22:	b086      	sub	sp, #24
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010e2c:	2300      	movs	r3, #0
 8010e2e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d06e      	beq.n	8010f14 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010e36:	4b3a      	ldr	r3, [pc, #232]	; (8010f20 <xTaskPriorityDisinherit+0x100>)
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	693a      	ldr	r2, [r7, #16]
 8010e3c:	429a      	cmp	r2, r3
 8010e3e:	d00a      	beq.n	8010e56 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8010e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e44:	f383 8811 	msr	BASEPRI, r3
 8010e48:	f3bf 8f6f 	isb	sy
 8010e4c:	f3bf 8f4f 	dsb	sy
 8010e50:	60fb      	str	r3, [r7, #12]
}
 8010e52:	bf00      	nop
 8010e54:	e7fe      	b.n	8010e54 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8010e56:	693b      	ldr	r3, [r7, #16]
 8010e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d10a      	bne.n	8010e74 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8010e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e62:	f383 8811 	msr	BASEPRI, r3
 8010e66:	f3bf 8f6f 	isb	sy
 8010e6a:	f3bf 8f4f 	dsb	sy
 8010e6e:	60bb      	str	r3, [r7, #8]
}
 8010e70:	bf00      	nop
 8010e72:	e7fe      	b.n	8010e72 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8010e74:	693b      	ldr	r3, [r7, #16]
 8010e76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010e78:	1e5a      	subs	r2, r3, #1
 8010e7a:	693b      	ldr	r3, [r7, #16]
 8010e7c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010e7e:	693b      	ldr	r3, [r7, #16]
 8010e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e82:	693b      	ldr	r3, [r7, #16]
 8010e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e86:	429a      	cmp	r2, r3
 8010e88:	d044      	beq.n	8010f14 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010e8a:	693b      	ldr	r3, [r7, #16]
 8010e8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d140      	bne.n	8010f14 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010e92:	693b      	ldr	r3, [r7, #16]
 8010e94:	3304      	adds	r3, #4
 8010e96:	4618      	mov	r0, r3
 8010e98:	f7fe fb42 	bl	800f520 <uxListRemove>
 8010e9c:	4603      	mov	r3, r0
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d115      	bne.n	8010ece <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8010ea2:	693b      	ldr	r3, [r7, #16]
 8010ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ea6:	491f      	ldr	r1, [pc, #124]	; (8010f24 <xTaskPriorityDisinherit+0x104>)
 8010ea8:	4613      	mov	r3, r2
 8010eaa:	009b      	lsls	r3, r3, #2
 8010eac:	4413      	add	r3, r2
 8010eae:	009b      	lsls	r3, r3, #2
 8010eb0:	440b      	add	r3, r1
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d10a      	bne.n	8010ece <xTaskPriorityDisinherit+0xae>
 8010eb8:	693b      	ldr	r3, [r7, #16]
 8010eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ebc:	2201      	movs	r2, #1
 8010ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8010ec2:	43da      	mvns	r2, r3
 8010ec4:	4b18      	ldr	r3, [pc, #96]	; (8010f28 <xTaskPriorityDisinherit+0x108>)
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	4013      	ands	r3, r2
 8010eca:	4a17      	ldr	r2, [pc, #92]	; (8010f28 <xTaskPriorityDisinherit+0x108>)
 8010ecc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010ece:	693b      	ldr	r3, [r7, #16]
 8010ed0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010ed2:	693b      	ldr	r3, [r7, #16]
 8010ed4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010ed6:	693b      	ldr	r3, [r7, #16]
 8010ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010eda:	f1c3 0207 	rsb	r2, r3, #7
 8010ede:	693b      	ldr	r3, [r7, #16]
 8010ee0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010ee2:	693b      	ldr	r3, [r7, #16]
 8010ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ee6:	2201      	movs	r2, #1
 8010ee8:	409a      	lsls	r2, r3
 8010eea:	4b0f      	ldr	r3, [pc, #60]	; (8010f28 <xTaskPriorityDisinherit+0x108>)
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	4313      	orrs	r3, r2
 8010ef0:	4a0d      	ldr	r2, [pc, #52]	; (8010f28 <xTaskPriorityDisinherit+0x108>)
 8010ef2:	6013      	str	r3, [r2, #0]
 8010ef4:	693b      	ldr	r3, [r7, #16]
 8010ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ef8:	4613      	mov	r3, r2
 8010efa:	009b      	lsls	r3, r3, #2
 8010efc:	4413      	add	r3, r2
 8010efe:	009b      	lsls	r3, r3, #2
 8010f00:	4a08      	ldr	r2, [pc, #32]	; (8010f24 <xTaskPriorityDisinherit+0x104>)
 8010f02:	441a      	add	r2, r3
 8010f04:	693b      	ldr	r3, [r7, #16]
 8010f06:	3304      	adds	r3, #4
 8010f08:	4619      	mov	r1, r3
 8010f0a:	4610      	mov	r0, r2
 8010f0c:	f7fe faab 	bl	800f466 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010f10:	2301      	movs	r3, #1
 8010f12:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010f14:	697b      	ldr	r3, [r7, #20]
	}
 8010f16:	4618      	mov	r0, r3
 8010f18:	3718      	adds	r7, #24
 8010f1a:	46bd      	mov	sp, r7
 8010f1c:	bd80      	pop	{r7, pc}
 8010f1e:	bf00      	nop
 8010f20:	24000748 	.word	0x24000748
 8010f24:	2400074c 	.word	0x2400074c
 8010f28:	24000850 	.word	0x24000850

08010f2c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010f2c:	b580      	push	{r7, lr}
 8010f2e:	b088      	sub	sp, #32
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	6078      	str	r0, [r7, #4]
 8010f34:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8010f3a:	2301      	movs	r3, #1
 8010f3c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d077      	beq.n	8011034 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010f44:	69bb      	ldr	r3, [r7, #24]
 8010f46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d10a      	bne.n	8010f62 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8010f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f50:	f383 8811 	msr	BASEPRI, r3
 8010f54:	f3bf 8f6f 	isb	sy
 8010f58:	f3bf 8f4f 	dsb	sy
 8010f5c:	60fb      	str	r3, [r7, #12]
}
 8010f5e:	bf00      	nop
 8010f60:	e7fe      	b.n	8010f60 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010f62:	69bb      	ldr	r3, [r7, #24]
 8010f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f66:	683a      	ldr	r2, [r7, #0]
 8010f68:	429a      	cmp	r2, r3
 8010f6a:	d902      	bls.n	8010f72 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010f6c:	683b      	ldr	r3, [r7, #0]
 8010f6e:	61fb      	str	r3, [r7, #28]
 8010f70:	e002      	b.n	8010f78 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010f72:	69bb      	ldr	r3, [r7, #24]
 8010f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f76:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010f78:	69bb      	ldr	r3, [r7, #24]
 8010f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f7c:	69fa      	ldr	r2, [r7, #28]
 8010f7e:	429a      	cmp	r2, r3
 8010f80:	d058      	beq.n	8011034 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010f82:	69bb      	ldr	r3, [r7, #24]
 8010f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010f86:	697a      	ldr	r2, [r7, #20]
 8010f88:	429a      	cmp	r2, r3
 8010f8a:	d153      	bne.n	8011034 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010f8c:	4b2b      	ldr	r3, [pc, #172]	; (801103c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	69ba      	ldr	r2, [r7, #24]
 8010f92:	429a      	cmp	r2, r3
 8010f94:	d10a      	bne.n	8010fac <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8010f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f9a:	f383 8811 	msr	BASEPRI, r3
 8010f9e:	f3bf 8f6f 	isb	sy
 8010fa2:	f3bf 8f4f 	dsb	sy
 8010fa6:	60bb      	str	r3, [r7, #8]
}
 8010fa8:	bf00      	nop
 8010faa:	e7fe      	b.n	8010faa <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010fac:	69bb      	ldr	r3, [r7, #24]
 8010fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fb0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010fb2:	69bb      	ldr	r3, [r7, #24]
 8010fb4:	69fa      	ldr	r2, [r7, #28]
 8010fb6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010fb8:	69bb      	ldr	r3, [r7, #24]
 8010fba:	699b      	ldr	r3, [r3, #24]
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	db04      	blt.n	8010fca <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010fc0:	69fb      	ldr	r3, [r7, #28]
 8010fc2:	f1c3 0207 	rsb	r2, r3, #7
 8010fc6:	69bb      	ldr	r3, [r7, #24]
 8010fc8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010fca:	69bb      	ldr	r3, [r7, #24]
 8010fcc:	6959      	ldr	r1, [r3, #20]
 8010fce:	693a      	ldr	r2, [r7, #16]
 8010fd0:	4613      	mov	r3, r2
 8010fd2:	009b      	lsls	r3, r3, #2
 8010fd4:	4413      	add	r3, r2
 8010fd6:	009b      	lsls	r3, r3, #2
 8010fd8:	4a19      	ldr	r2, [pc, #100]	; (8011040 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8010fda:	4413      	add	r3, r2
 8010fdc:	4299      	cmp	r1, r3
 8010fde:	d129      	bne.n	8011034 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010fe0:	69bb      	ldr	r3, [r7, #24]
 8010fe2:	3304      	adds	r3, #4
 8010fe4:	4618      	mov	r0, r3
 8010fe6:	f7fe fa9b 	bl	800f520 <uxListRemove>
 8010fea:	4603      	mov	r3, r0
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d10a      	bne.n	8011006 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8010ff0:	69bb      	ldr	r3, [r7, #24]
 8010ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ff4:	2201      	movs	r2, #1
 8010ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8010ffa:	43da      	mvns	r2, r3
 8010ffc:	4b11      	ldr	r3, [pc, #68]	; (8011044 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	4013      	ands	r3, r2
 8011002:	4a10      	ldr	r2, [pc, #64]	; (8011044 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8011004:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011006:	69bb      	ldr	r3, [r7, #24]
 8011008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801100a:	2201      	movs	r2, #1
 801100c:	409a      	lsls	r2, r3
 801100e:	4b0d      	ldr	r3, [pc, #52]	; (8011044 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	4313      	orrs	r3, r2
 8011014:	4a0b      	ldr	r2, [pc, #44]	; (8011044 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8011016:	6013      	str	r3, [r2, #0]
 8011018:	69bb      	ldr	r3, [r7, #24]
 801101a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801101c:	4613      	mov	r3, r2
 801101e:	009b      	lsls	r3, r3, #2
 8011020:	4413      	add	r3, r2
 8011022:	009b      	lsls	r3, r3, #2
 8011024:	4a06      	ldr	r2, [pc, #24]	; (8011040 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8011026:	441a      	add	r2, r3
 8011028:	69bb      	ldr	r3, [r7, #24]
 801102a:	3304      	adds	r3, #4
 801102c:	4619      	mov	r1, r3
 801102e:	4610      	mov	r0, r2
 8011030:	f7fe fa19 	bl	800f466 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011034:	bf00      	nop
 8011036:	3720      	adds	r7, #32
 8011038:	46bd      	mov	sp, r7
 801103a:	bd80      	pop	{r7, pc}
 801103c:	24000748 	.word	0x24000748
 8011040:	2400074c 	.word	0x2400074c
 8011044:	24000850 	.word	0x24000850

08011048 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011048:	b480      	push	{r7}
 801104a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801104c:	4b07      	ldr	r3, [pc, #28]	; (801106c <pvTaskIncrementMutexHeldCount+0x24>)
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	2b00      	cmp	r3, #0
 8011052:	d004      	beq.n	801105e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011054:	4b05      	ldr	r3, [pc, #20]	; (801106c <pvTaskIncrementMutexHeldCount+0x24>)
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801105a:	3201      	adds	r2, #1
 801105c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 801105e:	4b03      	ldr	r3, [pc, #12]	; (801106c <pvTaskIncrementMutexHeldCount+0x24>)
 8011060:	681b      	ldr	r3, [r3, #0]
	}
 8011062:	4618      	mov	r0, r3
 8011064:	46bd      	mov	sp, r7
 8011066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801106a:	4770      	bx	lr
 801106c:	24000748 	.word	0x24000748

08011070 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011070:	b580      	push	{r7, lr}
 8011072:	b084      	sub	sp, #16
 8011074:	af00      	add	r7, sp, #0
 8011076:	6078      	str	r0, [r7, #4]
 8011078:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801107a:	4b29      	ldr	r3, [pc, #164]	; (8011120 <prvAddCurrentTaskToDelayedList+0xb0>)
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011080:	4b28      	ldr	r3, [pc, #160]	; (8011124 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	3304      	adds	r3, #4
 8011086:	4618      	mov	r0, r3
 8011088:	f7fe fa4a 	bl	800f520 <uxListRemove>
 801108c:	4603      	mov	r3, r0
 801108e:	2b00      	cmp	r3, #0
 8011090:	d10b      	bne.n	80110aa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8011092:	4b24      	ldr	r3, [pc, #144]	; (8011124 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011098:	2201      	movs	r2, #1
 801109a:	fa02 f303 	lsl.w	r3, r2, r3
 801109e:	43da      	mvns	r2, r3
 80110a0:	4b21      	ldr	r3, [pc, #132]	; (8011128 <prvAddCurrentTaskToDelayedList+0xb8>)
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	4013      	ands	r3, r2
 80110a6:	4a20      	ldr	r2, [pc, #128]	; (8011128 <prvAddCurrentTaskToDelayedList+0xb8>)
 80110a8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80110b0:	d10a      	bne.n	80110c8 <prvAddCurrentTaskToDelayedList+0x58>
 80110b2:	683b      	ldr	r3, [r7, #0]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d007      	beq.n	80110c8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80110b8:	4b1a      	ldr	r3, [pc, #104]	; (8011124 <prvAddCurrentTaskToDelayedList+0xb4>)
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	3304      	adds	r3, #4
 80110be:	4619      	mov	r1, r3
 80110c0:	481a      	ldr	r0, [pc, #104]	; (801112c <prvAddCurrentTaskToDelayedList+0xbc>)
 80110c2:	f7fe f9d0 	bl	800f466 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80110c6:	e026      	b.n	8011116 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80110c8:	68fa      	ldr	r2, [r7, #12]
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	4413      	add	r3, r2
 80110ce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80110d0:	4b14      	ldr	r3, [pc, #80]	; (8011124 <prvAddCurrentTaskToDelayedList+0xb4>)
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	68ba      	ldr	r2, [r7, #8]
 80110d6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80110d8:	68ba      	ldr	r2, [r7, #8]
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	429a      	cmp	r2, r3
 80110de:	d209      	bcs.n	80110f4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80110e0:	4b13      	ldr	r3, [pc, #76]	; (8011130 <prvAddCurrentTaskToDelayedList+0xc0>)
 80110e2:	681a      	ldr	r2, [r3, #0]
 80110e4:	4b0f      	ldr	r3, [pc, #60]	; (8011124 <prvAddCurrentTaskToDelayedList+0xb4>)
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	3304      	adds	r3, #4
 80110ea:	4619      	mov	r1, r3
 80110ec:	4610      	mov	r0, r2
 80110ee:	f7fe f9de 	bl	800f4ae <vListInsert>
}
 80110f2:	e010      	b.n	8011116 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80110f4:	4b0f      	ldr	r3, [pc, #60]	; (8011134 <prvAddCurrentTaskToDelayedList+0xc4>)
 80110f6:	681a      	ldr	r2, [r3, #0]
 80110f8:	4b0a      	ldr	r3, [pc, #40]	; (8011124 <prvAddCurrentTaskToDelayedList+0xb4>)
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	3304      	adds	r3, #4
 80110fe:	4619      	mov	r1, r3
 8011100:	4610      	mov	r0, r2
 8011102:	f7fe f9d4 	bl	800f4ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011106:	4b0c      	ldr	r3, [pc, #48]	; (8011138 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	68ba      	ldr	r2, [r7, #8]
 801110c:	429a      	cmp	r2, r3
 801110e:	d202      	bcs.n	8011116 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8011110:	4a09      	ldr	r2, [pc, #36]	; (8011138 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011112:	68bb      	ldr	r3, [r7, #8]
 8011114:	6013      	str	r3, [r2, #0]
}
 8011116:	bf00      	nop
 8011118:	3710      	adds	r7, #16
 801111a:	46bd      	mov	sp, r7
 801111c:	bd80      	pop	{r7, pc}
 801111e:	bf00      	nop
 8011120:	2400084c 	.word	0x2400084c
 8011124:	24000748 	.word	0x24000748
 8011128:	24000850 	.word	0x24000850
 801112c:	24000834 	.word	0x24000834
 8011130:	24000804 	.word	0x24000804
 8011134:	24000800 	.word	0x24000800
 8011138:	24000868 	.word	0x24000868

0801113c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801113c:	b480      	push	{r7}
 801113e:	b085      	sub	sp, #20
 8011140:	af00      	add	r7, sp, #0
 8011142:	60f8      	str	r0, [r7, #12]
 8011144:	60b9      	str	r1, [r7, #8]
 8011146:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	3b04      	subs	r3, #4
 801114c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011154:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	3b04      	subs	r3, #4
 801115a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801115c:	68bb      	ldr	r3, [r7, #8]
 801115e:	f023 0201 	bic.w	r2, r3, #1
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	3b04      	subs	r3, #4
 801116a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801116c:	4a0c      	ldr	r2, [pc, #48]	; (80111a0 <pxPortInitialiseStack+0x64>)
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	3b14      	subs	r3, #20
 8011176:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011178:	687a      	ldr	r2, [r7, #4]
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	3b04      	subs	r3, #4
 8011182:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	f06f 0202 	mvn.w	r2, #2
 801118a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	3b20      	subs	r3, #32
 8011190:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011192:	68fb      	ldr	r3, [r7, #12]
}
 8011194:	4618      	mov	r0, r3
 8011196:	3714      	adds	r7, #20
 8011198:	46bd      	mov	sp, r7
 801119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801119e:	4770      	bx	lr
 80111a0:	080111a5 	.word	0x080111a5

080111a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80111a4:	b480      	push	{r7}
 80111a6:	b085      	sub	sp, #20
 80111a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80111aa:	2300      	movs	r3, #0
 80111ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80111ae:	4b12      	ldr	r3, [pc, #72]	; (80111f8 <prvTaskExitError+0x54>)
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80111b6:	d00a      	beq.n	80111ce <prvTaskExitError+0x2a>
	__asm volatile
 80111b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111bc:	f383 8811 	msr	BASEPRI, r3
 80111c0:	f3bf 8f6f 	isb	sy
 80111c4:	f3bf 8f4f 	dsb	sy
 80111c8:	60fb      	str	r3, [r7, #12]
}
 80111ca:	bf00      	nop
 80111cc:	e7fe      	b.n	80111cc <prvTaskExitError+0x28>
	__asm volatile
 80111ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111d2:	f383 8811 	msr	BASEPRI, r3
 80111d6:	f3bf 8f6f 	isb	sy
 80111da:	f3bf 8f4f 	dsb	sy
 80111de:	60bb      	str	r3, [r7, #8]
}
 80111e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80111e2:	bf00      	nop
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d0fc      	beq.n	80111e4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80111ea:	bf00      	nop
 80111ec:	bf00      	nop
 80111ee:	3714      	adds	r7, #20
 80111f0:	46bd      	mov	sp, r7
 80111f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f6:	4770      	bx	lr
 80111f8:	24000014 	.word	0x24000014
 80111fc:	00000000 	.word	0x00000000

08011200 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011200:	4b07      	ldr	r3, [pc, #28]	; (8011220 <pxCurrentTCBConst2>)
 8011202:	6819      	ldr	r1, [r3, #0]
 8011204:	6808      	ldr	r0, [r1, #0]
 8011206:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801120a:	f380 8809 	msr	PSP, r0
 801120e:	f3bf 8f6f 	isb	sy
 8011212:	f04f 0000 	mov.w	r0, #0
 8011216:	f380 8811 	msr	BASEPRI, r0
 801121a:	4770      	bx	lr
 801121c:	f3af 8000 	nop.w

08011220 <pxCurrentTCBConst2>:
 8011220:	24000748 	.word	0x24000748
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011224:	bf00      	nop
 8011226:	bf00      	nop

08011228 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011228:	4808      	ldr	r0, [pc, #32]	; (801124c <prvPortStartFirstTask+0x24>)
 801122a:	6800      	ldr	r0, [r0, #0]
 801122c:	6800      	ldr	r0, [r0, #0]
 801122e:	f380 8808 	msr	MSP, r0
 8011232:	f04f 0000 	mov.w	r0, #0
 8011236:	f380 8814 	msr	CONTROL, r0
 801123a:	b662      	cpsie	i
 801123c:	b661      	cpsie	f
 801123e:	f3bf 8f4f 	dsb	sy
 8011242:	f3bf 8f6f 	isb	sy
 8011246:	df00      	svc	0
 8011248:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801124a:	bf00      	nop
 801124c:	e000ed08 	.word	0xe000ed08

08011250 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011250:	b580      	push	{r7, lr}
 8011252:	b086      	sub	sp, #24
 8011254:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011256:	4b46      	ldr	r3, [pc, #280]	; (8011370 <xPortStartScheduler+0x120>)
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	4a46      	ldr	r2, [pc, #280]	; (8011374 <xPortStartScheduler+0x124>)
 801125c:	4293      	cmp	r3, r2
 801125e:	d10a      	bne.n	8011276 <xPortStartScheduler+0x26>
	__asm volatile
 8011260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011264:	f383 8811 	msr	BASEPRI, r3
 8011268:	f3bf 8f6f 	isb	sy
 801126c:	f3bf 8f4f 	dsb	sy
 8011270:	613b      	str	r3, [r7, #16]
}
 8011272:	bf00      	nop
 8011274:	e7fe      	b.n	8011274 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011276:	4b3e      	ldr	r3, [pc, #248]	; (8011370 <xPortStartScheduler+0x120>)
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	4a3f      	ldr	r2, [pc, #252]	; (8011378 <xPortStartScheduler+0x128>)
 801127c:	4293      	cmp	r3, r2
 801127e:	d10a      	bne.n	8011296 <xPortStartScheduler+0x46>
	__asm volatile
 8011280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011284:	f383 8811 	msr	BASEPRI, r3
 8011288:	f3bf 8f6f 	isb	sy
 801128c:	f3bf 8f4f 	dsb	sy
 8011290:	60fb      	str	r3, [r7, #12]
}
 8011292:	bf00      	nop
 8011294:	e7fe      	b.n	8011294 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011296:	4b39      	ldr	r3, [pc, #228]	; (801137c <xPortStartScheduler+0x12c>)
 8011298:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801129a:	697b      	ldr	r3, [r7, #20]
 801129c:	781b      	ldrb	r3, [r3, #0]
 801129e:	b2db      	uxtb	r3, r3
 80112a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80112a2:	697b      	ldr	r3, [r7, #20]
 80112a4:	22ff      	movs	r2, #255	; 0xff
 80112a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80112a8:	697b      	ldr	r3, [r7, #20]
 80112aa:	781b      	ldrb	r3, [r3, #0]
 80112ac:	b2db      	uxtb	r3, r3
 80112ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80112b0:	78fb      	ldrb	r3, [r7, #3]
 80112b2:	b2db      	uxtb	r3, r3
 80112b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80112b8:	b2da      	uxtb	r2, r3
 80112ba:	4b31      	ldr	r3, [pc, #196]	; (8011380 <xPortStartScheduler+0x130>)
 80112bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80112be:	4b31      	ldr	r3, [pc, #196]	; (8011384 <xPortStartScheduler+0x134>)
 80112c0:	2207      	movs	r2, #7
 80112c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80112c4:	e009      	b.n	80112da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80112c6:	4b2f      	ldr	r3, [pc, #188]	; (8011384 <xPortStartScheduler+0x134>)
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	3b01      	subs	r3, #1
 80112cc:	4a2d      	ldr	r2, [pc, #180]	; (8011384 <xPortStartScheduler+0x134>)
 80112ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80112d0:	78fb      	ldrb	r3, [r7, #3]
 80112d2:	b2db      	uxtb	r3, r3
 80112d4:	005b      	lsls	r3, r3, #1
 80112d6:	b2db      	uxtb	r3, r3
 80112d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80112da:	78fb      	ldrb	r3, [r7, #3]
 80112dc:	b2db      	uxtb	r3, r3
 80112de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80112e2:	2b80      	cmp	r3, #128	; 0x80
 80112e4:	d0ef      	beq.n	80112c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80112e6:	4b27      	ldr	r3, [pc, #156]	; (8011384 <xPortStartScheduler+0x134>)
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	f1c3 0307 	rsb	r3, r3, #7
 80112ee:	2b04      	cmp	r3, #4
 80112f0:	d00a      	beq.n	8011308 <xPortStartScheduler+0xb8>
	__asm volatile
 80112f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112f6:	f383 8811 	msr	BASEPRI, r3
 80112fa:	f3bf 8f6f 	isb	sy
 80112fe:	f3bf 8f4f 	dsb	sy
 8011302:	60bb      	str	r3, [r7, #8]
}
 8011304:	bf00      	nop
 8011306:	e7fe      	b.n	8011306 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011308:	4b1e      	ldr	r3, [pc, #120]	; (8011384 <xPortStartScheduler+0x134>)
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	021b      	lsls	r3, r3, #8
 801130e:	4a1d      	ldr	r2, [pc, #116]	; (8011384 <xPortStartScheduler+0x134>)
 8011310:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011312:	4b1c      	ldr	r3, [pc, #112]	; (8011384 <xPortStartScheduler+0x134>)
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801131a:	4a1a      	ldr	r2, [pc, #104]	; (8011384 <xPortStartScheduler+0x134>)
 801131c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	b2da      	uxtb	r2, r3
 8011322:	697b      	ldr	r3, [r7, #20]
 8011324:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011326:	4b18      	ldr	r3, [pc, #96]	; (8011388 <xPortStartScheduler+0x138>)
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	4a17      	ldr	r2, [pc, #92]	; (8011388 <xPortStartScheduler+0x138>)
 801132c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011330:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011332:	4b15      	ldr	r3, [pc, #84]	; (8011388 <xPortStartScheduler+0x138>)
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	4a14      	ldr	r2, [pc, #80]	; (8011388 <xPortStartScheduler+0x138>)
 8011338:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801133c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801133e:	f000 f8dd 	bl	80114fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011342:	4b12      	ldr	r3, [pc, #72]	; (801138c <xPortStartScheduler+0x13c>)
 8011344:	2200      	movs	r2, #0
 8011346:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011348:	f000 f8fc 	bl	8011544 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801134c:	4b10      	ldr	r3, [pc, #64]	; (8011390 <xPortStartScheduler+0x140>)
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	4a0f      	ldr	r2, [pc, #60]	; (8011390 <xPortStartScheduler+0x140>)
 8011352:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011356:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011358:	f7ff ff66 	bl	8011228 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801135c:	f7ff fa90 	bl	8010880 <vTaskSwitchContext>
	prvTaskExitError();
 8011360:	f7ff ff20 	bl	80111a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011364:	2300      	movs	r3, #0
}
 8011366:	4618      	mov	r0, r3
 8011368:	3718      	adds	r7, #24
 801136a:	46bd      	mov	sp, r7
 801136c:	bd80      	pop	{r7, pc}
 801136e:	bf00      	nop
 8011370:	e000ed00 	.word	0xe000ed00
 8011374:	410fc271 	.word	0x410fc271
 8011378:	410fc270 	.word	0x410fc270
 801137c:	e000e400 	.word	0xe000e400
 8011380:	24000874 	.word	0x24000874
 8011384:	24000878 	.word	0x24000878
 8011388:	e000ed20 	.word	0xe000ed20
 801138c:	24000014 	.word	0x24000014
 8011390:	e000ef34 	.word	0xe000ef34

08011394 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011394:	b480      	push	{r7}
 8011396:	b083      	sub	sp, #12
 8011398:	af00      	add	r7, sp, #0
	__asm volatile
 801139a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801139e:	f383 8811 	msr	BASEPRI, r3
 80113a2:	f3bf 8f6f 	isb	sy
 80113a6:	f3bf 8f4f 	dsb	sy
 80113aa:	607b      	str	r3, [r7, #4]
}
 80113ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80113ae:	4b0f      	ldr	r3, [pc, #60]	; (80113ec <vPortEnterCritical+0x58>)
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	3301      	adds	r3, #1
 80113b4:	4a0d      	ldr	r2, [pc, #52]	; (80113ec <vPortEnterCritical+0x58>)
 80113b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80113b8:	4b0c      	ldr	r3, [pc, #48]	; (80113ec <vPortEnterCritical+0x58>)
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	2b01      	cmp	r3, #1
 80113be:	d10f      	bne.n	80113e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80113c0:	4b0b      	ldr	r3, [pc, #44]	; (80113f0 <vPortEnterCritical+0x5c>)
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	b2db      	uxtb	r3, r3
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d00a      	beq.n	80113e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80113ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113ce:	f383 8811 	msr	BASEPRI, r3
 80113d2:	f3bf 8f6f 	isb	sy
 80113d6:	f3bf 8f4f 	dsb	sy
 80113da:	603b      	str	r3, [r7, #0]
}
 80113dc:	bf00      	nop
 80113de:	e7fe      	b.n	80113de <vPortEnterCritical+0x4a>
	}
}
 80113e0:	bf00      	nop
 80113e2:	370c      	adds	r7, #12
 80113e4:	46bd      	mov	sp, r7
 80113e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ea:	4770      	bx	lr
 80113ec:	24000014 	.word	0x24000014
 80113f0:	e000ed04 	.word	0xe000ed04

080113f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80113f4:	b480      	push	{r7}
 80113f6:	b083      	sub	sp, #12
 80113f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80113fa:	4b12      	ldr	r3, [pc, #72]	; (8011444 <vPortExitCritical+0x50>)
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d10a      	bne.n	8011418 <vPortExitCritical+0x24>
	__asm volatile
 8011402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011406:	f383 8811 	msr	BASEPRI, r3
 801140a:	f3bf 8f6f 	isb	sy
 801140e:	f3bf 8f4f 	dsb	sy
 8011412:	607b      	str	r3, [r7, #4]
}
 8011414:	bf00      	nop
 8011416:	e7fe      	b.n	8011416 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011418:	4b0a      	ldr	r3, [pc, #40]	; (8011444 <vPortExitCritical+0x50>)
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	3b01      	subs	r3, #1
 801141e:	4a09      	ldr	r2, [pc, #36]	; (8011444 <vPortExitCritical+0x50>)
 8011420:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011422:	4b08      	ldr	r3, [pc, #32]	; (8011444 <vPortExitCritical+0x50>)
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	2b00      	cmp	r3, #0
 8011428:	d105      	bne.n	8011436 <vPortExitCritical+0x42>
 801142a:	2300      	movs	r3, #0
 801142c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801142e:	683b      	ldr	r3, [r7, #0]
 8011430:	f383 8811 	msr	BASEPRI, r3
}
 8011434:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011436:	bf00      	nop
 8011438:	370c      	adds	r7, #12
 801143a:	46bd      	mov	sp, r7
 801143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011440:	4770      	bx	lr
 8011442:	bf00      	nop
 8011444:	24000014 	.word	0x24000014
	...

08011450 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011450:	f3ef 8009 	mrs	r0, PSP
 8011454:	f3bf 8f6f 	isb	sy
 8011458:	4b15      	ldr	r3, [pc, #84]	; (80114b0 <pxCurrentTCBConst>)
 801145a:	681a      	ldr	r2, [r3, #0]
 801145c:	f01e 0f10 	tst.w	lr, #16
 8011460:	bf08      	it	eq
 8011462:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011466:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801146a:	6010      	str	r0, [r2, #0]
 801146c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011470:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011474:	f380 8811 	msr	BASEPRI, r0
 8011478:	f3bf 8f4f 	dsb	sy
 801147c:	f3bf 8f6f 	isb	sy
 8011480:	f7ff f9fe 	bl	8010880 <vTaskSwitchContext>
 8011484:	f04f 0000 	mov.w	r0, #0
 8011488:	f380 8811 	msr	BASEPRI, r0
 801148c:	bc09      	pop	{r0, r3}
 801148e:	6819      	ldr	r1, [r3, #0]
 8011490:	6808      	ldr	r0, [r1, #0]
 8011492:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011496:	f01e 0f10 	tst.w	lr, #16
 801149a:	bf08      	it	eq
 801149c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80114a0:	f380 8809 	msr	PSP, r0
 80114a4:	f3bf 8f6f 	isb	sy
 80114a8:	4770      	bx	lr
 80114aa:	bf00      	nop
 80114ac:	f3af 8000 	nop.w

080114b0 <pxCurrentTCBConst>:
 80114b0:	24000748 	.word	0x24000748
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80114b4:	bf00      	nop
 80114b6:	bf00      	nop

080114b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80114b8:	b580      	push	{r7, lr}
 80114ba:	b082      	sub	sp, #8
 80114bc:	af00      	add	r7, sp, #0
	__asm volatile
 80114be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114c2:	f383 8811 	msr	BASEPRI, r3
 80114c6:	f3bf 8f6f 	isb	sy
 80114ca:	f3bf 8f4f 	dsb	sy
 80114ce:	607b      	str	r3, [r7, #4]
}
 80114d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80114d2:	f7ff f91d 	bl	8010710 <xTaskIncrementTick>
 80114d6:	4603      	mov	r3, r0
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d003      	beq.n	80114e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80114dc:	4b06      	ldr	r3, [pc, #24]	; (80114f8 <SysTick_Handler+0x40>)
 80114de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80114e2:	601a      	str	r2, [r3, #0]
 80114e4:	2300      	movs	r3, #0
 80114e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80114e8:	683b      	ldr	r3, [r7, #0]
 80114ea:	f383 8811 	msr	BASEPRI, r3
}
 80114ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80114f0:	bf00      	nop
 80114f2:	3708      	adds	r7, #8
 80114f4:	46bd      	mov	sp, r7
 80114f6:	bd80      	pop	{r7, pc}
 80114f8:	e000ed04 	.word	0xe000ed04

080114fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80114fc:	b480      	push	{r7}
 80114fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011500:	4b0b      	ldr	r3, [pc, #44]	; (8011530 <vPortSetupTimerInterrupt+0x34>)
 8011502:	2200      	movs	r2, #0
 8011504:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011506:	4b0b      	ldr	r3, [pc, #44]	; (8011534 <vPortSetupTimerInterrupt+0x38>)
 8011508:	2200      	movs	r2, #0
 801150a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801150c:	4b0a      	ldr	r3, [pc, #40]	; (8011538 <vPortSetupTimerInterrupt+0x3c>)
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	4a0a      	ldr	r2, [pc, #40]	; (801153c <vPortSetupTimerInterrupt+0x40>)
 8011512:	fba2 2303 	umull	r2, r3, r2, r3
 8011516:	099b      	lsrs	r3, r3, #6
 8011518:	4a09      	ldr	r2, [pc, #36]	; (8011540 <vPortSetupTimerInterrupt+0x44>)
 801151a:	3b01      	subs	r3, #1
 801151c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801151e:	4b04      	ldr	r3, [pc, #16]	; (8011530 <vPortSetupTimerInterrupt+0x34>)
 8011520:	2207      	movs	r2, #7
 8011522:	601a      	str	r2, [r3, #0]
}
 8011524:	bf00      	nop
 8011526:	46bd      	mov	sp, r7
 8011528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801152c:	4770      	bx	lr
 801152e:	bf00      	nop
 8011530:	e000e010 	.word	0xe000e010
 8011534:	e000e018 	.word	0xe000e018
 8011538:	24000004 	.word	0x24000004
 801153c:	10624dd3 	.word	0x10624dd3
 8011540:	e000e014 	.word	0xe000e014

08011544 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011544:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011554 <vPortEnableVFP+0x10>
 8011548:	6801      	ldr	r1, [r0, #0]
 801154a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801154e:	6001      	str	r1, [r0, #0]
 8011550:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011552:	bf00      	nop
 8011554:	e000ed88 	.word	0xe000ed88

08011558 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011558:	b480      	push	{r7}
 801155a:	b085      	sub	sp, #20
 801155c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801155e:	f3ef 8305 	mrs	r3, IPSR
 8011562:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	2b0f      	cmp	r3, #15
 8011568:	d914      	bls.n	8011594 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801156a:	4a17      	ldr	r2, [pc, #92]	; (80115c8 <vPortValidateInterruptPriority+0x70>)
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	4413      	add	r3, r2
 8011570:	781b      	ldrb	r3, [r3, #0]
 8011572:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011574:	4b15      	ldr	r3, [pc, #84]	; (80115cc <vPortValidateInterruptPriority+0x74>)
 8011576:	781b      	ldrb	r3, [r3, #0]
 8011578:	7afa      	ldrb	r2, [r7, #11]
 801157a:	429a      	cmp	r2, r3
 801157c:	d20a      	bcs.n	8011594 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801157e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011582:	f383 8811 	msr	BASEPRI, r3
 8011586:	f3bf 8f6f 	isb	sy
 801158a:	f3bf 8f4f 	dsb	sy
 801158e:	607b      	str	r3, [r7, #4]
}
 8011590:	bf00      	nop
 8011592:	e7fe      	b.n	8011592 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011594:	4b0e      	ldr	r3, [pc, #56]	; (80115d0 <vPortValidateInterruptPriority+0x78>)
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801159c:	4b0d      	ldr	r3, [pc, #52]	; (80115d4 <vPortValidateInterruptPriority+0x7c>)
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	429a      	cmp	r2, r3
 80115a2:	d90a      	bls.n	80115ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80115a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115a8:	f383 8811 	msr	BASEPRI, r3
 80115ac:	f3bf 8f6f 	isb	sy
 80115b0:	f3bf 8f4f 	dsb	sy
 80115b4:	603b      	str	r3, [r7, #0]
}
 80115b6:	bf00      	nop
 80115b8:	e7fe      	b.n	80115b8 <vPortValidateInterruptPriority+0x60>
	}
 80115ba:	bf00      	nop
 80115bc:	3714      	adds	r7, #20
 80115be:	46bd      	mov	sp, r7
 80115c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c4:	4770      	bx	lr
 80115c6:	bf00      	nop
 80115c8:	e000e3f0 	.word	0xe000e3f0
 80115cc:	24000874 	.word	0x24000874
 80115d0:	e000ed0c 	.word	0xe000ed0c
 80115d4:	24000878 	.word	0x24000878

080115d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80115d8:	b580      	push	{r7, lr}
 80115da:	b08a      	sub	sp, #40	; 0x28
 80115dc:	af00      	add	r7, sp, #0
 80115de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80115e0:	2300      	movs	r3, #0
 80115e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80115e4:	f7fe ffea 	bl	80105bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80115e8:	4b5b      	ldr	r3, [pc, #364]	; (8011758 <pvPortMalloc+0x180>)
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d101      	bne.n	80115f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80115f0:	f000 f920 	bl	8011834 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80115f4:	4b59      	ldr	r3, [pc, #356]	; (801175c <pvPortMalloc+0x184>)
 80115f6:	681a      	ldr	r2, [r3, #0]
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	4013      	ands	r3, r2
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	f040 8093 	bne.w	8011728 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	2b00      	cmp	r3, #0
 8011606:	d01d      	beq.n	8011644 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8011608:	2208      	movs	r2, #8
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	4413      	add	r3, r2
 801160e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	f003 0307 	and.w	r3, r3, #7
 8011616:	2b00      	cmp	r3, #0
 8011618:	d014      	beq.n	8011644 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	f023 0307 	bic.w	r3, r3, #7
 8011620:	3308      	adds	r3, #8
 8011622:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	f003 0307 	and.w	r3, r3, #7
 801162a:	2b00      	cmp	r3, #0
 801162c:	d00a      	beq.n	8011644 <pvPortMalloc+0x6c>
	__asm volatile
 801162e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011632:	f383 8811 	msr	BASEPRI, r3
 8011636:	f3bf 8f6f 	isb	sy
 801163a:	f3bf 8f4f 	dsb	sy
 801163e:	617b      	str	r3, [r7, #20]
}
 8011640:	bf00      	nop
 8011642:	e7fe      	b.n	8011642 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	2b00      	cmp	r3, #0
 8011648:	d06e      	beq.n	8011728 <pvPortMalloc+0x150>
 801164a:	4b45      	ldr	r3, [pc, #276]	; (8011760 <pvPortMalloc+0x188>)
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	687a      	ldr	r2, [r7, #4]
 8011650:	429a      	cmp	r2, r3
 8011652:	d869      	bhi.n	8011728 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011654:	4b43      	ldr	r3, [pc, #268]	; (8011764 <pvPortMalloc+0x18c>)
 8011656:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011658:	4b42      	ldr	r3, [pc, #264]	; (8011764 <pvPortMalloc+0x18c>)
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801165e:	e004      	b.n	801166a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8011660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011662:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801166c:	685b      	ldr	r3, [r3, #4]
 801166e:	687a      	ldr	r2, [r7, #4]
 8011670:	429a      	cmp	r2, r3
 8011672:	d903      	bls.n	801167c <pvPortMalloc+0xa4>
 8011674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d1f1      	bne.n	8011660 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801167c:	4b36      	ldr	r3, [pc, #216]	; (8011758 <pvPortMalloc+0x180>)
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011682:	429a      	cmp	r2, r3
 8011684:	d050      	beq.n	8011728 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011686:	6a3b      	ldr	r3, [r7, #32]
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	2208      	movs	r2, #8
 801168c:	4413      	add	r3, r2
 801168e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011692:	681a      	ldr	r2, [r3, #0]
 8011694:	6a3b      	ldr	r3, [r7, #32]
 8011696:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801169a:	685a      	ldr	r2, [r3, #4]
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	1ad2      	subs	r2, r2, r3
 80116a0:	2308      	movs	r3, #8
 80116a2:	005b      	lsls	r3, r3, #1
 80116a4:	429a      	cmp	r2, r3
 80116a6:	d91f      	bls.n	80116e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80116a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	4413      	add	r3, r2
 80116ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80116b0:	69bb      	ldr	r3, [r7, #24]
 80116b2:	f003 0307 	and.w	r3, r3, #7
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d00a      	beq.n	80116d0 <pvPortMalloc+0xf8>
	__asm volatile
 80116ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116be:	f383 8811 	msr	BASEPRI, r3
 80116c2:	f3bf 8f6f 	isb	sy
 80116c6:	f3bf 8f4f 	dsb	sy
 80116ca:	613b      	str	r3, [r7, #16]
}
 80116cc:	bf00      	nop
 80116ce:	e7fe      	b.n	80116ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80116d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116d2:	685a      	ldr	r2, [r3, #4]
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	1ad2      	subs	r2, r2, r3
 80116d8:	69bb      	ldr	r3, [r7, #24]
 80116da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80116dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116de:	687a      	ldr	r2, [r7, #4]
 80116e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80116e2:	69b8      	ldr	r0, [r7, #24]
 80116e4:	f000 f908 	bl	80118f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80116e8:	4b1d      	ldr	r3, [pc, #116]	; (8011760 <pvPortMalloc+0x188>)
 80116ea:	681a      	ldr	r2, [r3, #0]
 80116ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116ee:	685b      	ldr	r3, [r3, #4]
 80116f0:	1ad3      	subs	r3, r2, r3
 80116f2:	4a1b      	ldr	r2, [pc, #108]	; (8011760 <pvPortMalloc+0x188>)
 80116f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80116f6:	4b1a      	ldr	r3, [pc, #104]	; (8011760 <pvPortMalloc+0x188>)
 80116f8:	681a      	ldr	r2, [r3, #0]
 80116fa:	4b1b      	ldr	r3, [pc, #108]	; (8011768 <pvPortMalloc+0x190>)
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	429a      	cmp	r2, r3
 8011700:	d203      	bcs.n	801170a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011702:	4b17      	ldr	r3, [pc, #92]	; (8011760 <pvPortMalloc+0x188>)
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	4a18      	ldr	r2, [pc, #96]	; (8011768 <pvPortMalloc+0x190>)
 8011708:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801170a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801170c:	685a      	ldr	r2, [r3, #4]
 801170e:	4b13      	ldr	r3, [pc, #76]	; (801175c <pvPortMalloc+0x184>)
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	431a      	orrs	r2, r3
 8011714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011716:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801171a:	2200      	movs	r2, #0
 801171c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801171e:	4b13      	ldr	r3, [pc, #76]	; (801176c <pvPortMalloc+0x194>)
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	3301      	adds	r3, #1
 8011724:	4a11      	ldr	r2, [pc, #68]	; (801176c <pvPortMalloc+0x194>)
 8011726:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011728:	f7fe ff56 	bl	80105d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801172c:	69fb      	ldr	r3, [r7, #28]
 801172e:	f003 0307 	and.w	r3, r3, #7
 8011732:	2b00      	cmp	r3, #0
 8011734:	d00a      	beq.n	801174c <pvPortMalloc+0x174>
	__asm volatile
 8011736:	f04f 0350 	mov.w	r3, #80	; 0x50
 801173a:	f383 8811 	msr	BASEPRI, r3
 801173e:	f3bf 8f6f 	isb	sy
 8011742:	f3bf 8f4f 	dsb	sy
 8011746:	60fb      	str	r3, [r7, #12]
}
 8011748:	bf00      	nop
 801174a:	e7fe      	b.n	801174a <pvPortMalloc+0x172>
	return pvReturn;
 801174c:	69fb      	ldr	r3, [r7, #28]
}
 801174e:	4618      	mov	r0, r3
 8011750:	3728      	adds	r7, #40	; 0x28
 8011752:	46bd      	mov	sp, r7
 8011754:	bd80      	pop	{r7, pc}
 8011756:	bf00      	nop
 8011758:	24004484 	.word	0x24004484
 801175c:	24004498 	.word	0x24004498
 8011760:	24004488 	.word	0x24004488
 8011764:	2400447c 	.word	0x2400447c
 8011768:	2400448c 	.word	0x2400448c
 801176c:	24004490 	.word	0x24004490

08011770 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011770:	b580      	push	{r7, lr}
 8011772:	b086      	sub	sp, #24
 8011774:	af00      	add	r7, sp, #0
 8011776:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	2b00      	cmp	r3, #0
 8011780:	d04d      	beq.n	801181e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011782:	2308      	movs	r3, #8
 8011784:	425b      	negs	r3, r3
 8011786:	697a      	ldr	r2, [r7, #20]
 8011788:	4413      	add	r3, r2
 801178a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801178c:	697b      	ldr	r3, [r7, #20]
 801178e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011790:	693b      	ldr	r3, [r7, #16]
 8011792:	685a      	ldr	r2, [r3, #4]
 8011794:	4b24      	ldr	r3, [pc, #144]	; (8011828 <vPortFree+0xb8>)
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	4013      	ands	r3, r2
 801179a:	2b00      	cmp	r3, #0
 801179c:	d10a      	bne.n	80117b4 <vPortFree+0x44>
	__asm volatile
 801179e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117a2:	f383 8811 	msr	BASEPRI, r3
 80117a6:	f3bf 8f6f 	isb	sy
 80117aa:	f3bf 8f4f 	dsb	sy
 80117ae:	60fb      	str	r3, [r7, #12]
}
 80117b0:	bf00      	nop
 80117b2:	e7fe      	b.n	80117b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80117b4:	693b      	ldr	r3, [r7, #16]
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d00a      	beq.n	80117d2 <vPortFree+0x62>
	__asm volatile
 80117bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117c0:	f383 8811 	msr	BASEPRI, r3
 80117c4:	f3bf 8f6f 	isb	sy
 80117c8:	f3bf 8f4f 	dsb	sy
 80117cc:	60bb      	str	r3, [r7, #8]
}
 80117ce:	bf00      	nop
 80117d0:	e7fe      	b.n	80117d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80117d2:	693b      	ldr	r3, [r7, #16]
 80117d4:	685a      	ldr	r2, [r3, #4]
 80117d6:	4b14      	ldr	r3, [pc, #80]	; (8011828 <vPortFree+0xb8>)
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	4013      	ands	r3, r2
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d01e      	beq.n	801181e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80117e0:	693b      	ldr	r3, [r7, #16]
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d11a      	bne.n	801181e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80117e8:	693b      	ldr	r3, [r7, #16]
 80117ea:	685a      	ldr	r2, [r3, #4]
 80117ec:	4b0e      	ldr	r3, [pc, #56]	; (8011828 <vPortFree+0xb8>)
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	43db      	mvns	r3, r3
 80117f2:	401a      	ands	r2, r3
 80117f4:	693b      	ldr	r3, [r7, #16]
 80117f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80117f8:	f7fe fee0 	bl	80105bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80117fc:	693b      	ldr	r3, [r7, #16]
 80117fe:	685a      	ldr	r2, [r3, #4]
 8011800:	4b0a      	ldr	r3, [pc, #40]	; (801182c <vPortFree+0xbc>)
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	4413      	add	r3, r2
 8011806:	4a09      	ldr	r2, [pc, #36]	; (801182c <vPortFree+0xbc>)
 8011808:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801180a:	6938      	ldr	r0, [r7, #16]
 801180c:	f000 f874 	bl	80118f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011810:	4b07      	ldr	r3, [pc, #28]	; (8011830 <vPortFree+0xc0>)
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	3301      	adds	r3, #1
 8011816:	4a06      	ldr	r2, [pc, #24]	; (8011830 <vPortFree+0xc0>)
 8011818:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801181a:	f7fe fedd 	bl	80105d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801181e:	bf00      	nop
 8011820:	3718      	adds	r7, #24
 8011822:	46bd      	mov	sp, r7
 8011824:	bd80      	pop	{r7, pc}
 8011826:	bf00      	nop
 8011828:	24004498 	.word	0x24004498
 801182c:	24004488 	.word	0x24004488
 8011830:	24004494 	.word	0x24004494

08011834 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011834:	b480      	push	{r7}
 8011836:	b085      	sub	sp, #20
 8011838:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801183a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801183e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011840:	4b27      	ldr	r3, [pc, #156]	; (80118e0 <prvHeapInit+0xac>)
 8011842:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	f003 0307 	and.w	r3, r3, #7
 801184a:	2b00      	cmp	r3, #0
 801184c:	d00c      	beq.n	8011868 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	3307      	adds	r3, #7
 8011852:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	f023 0307 	bic.w	r3, r3, #7
 801185a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801185c:	68ba      	ldr	r2, [r7, #8]
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	1ad3      	subs	r3, r2, r3
 8011862:	4a1f      	ldr	r2, [pc, #124]	; (80118e0 <prvHeapInit+0xac>)
 8011864:	4413      	add	r3, r2
 8011866:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801186c:	4a1d      	ldr	r2, [pc, #116]	; (80118e4 <prvHeapInit+0xb0>)
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011872:	4b1c      	ldr	r3, [pc, #112]	; (80118e4 <prvHeapInit+0xb0>)
 8011874:	2200      	movs	r2, #0
 8011876:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	68ba      	ldr	r2, [r7, #8]
 801187c:	4413      	add	r3, r2
 801187e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011880:	2208      	movs	r2, #8
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	1a9b      	subs	r3, r3, r2
 8011886:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	f023 0307 	bic.w	r3, r3, #7
 801188e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	4a15      	ldr	r2, [pc, #84]	; (80118e8 <prvHeapInit+0xb4>)
 8011894:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011896:	4b14      	ldr	r3, [pc, #80]	; (80118e8 <prvHeapInit+0xb4>)
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	2200      	movs	r2, #0
 801189c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801189e:	4b12      	ldr	r3, [pc, #72]	; (80118e8 <prvHeapInit+0xb4>)
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	2200      	movs	r2, #0
 80118a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80118aa:	683b      	ldr	r3, [r7, #0]
 80118ac:	68fa      	ldr	r2, [r7, #12]
 80118ae:	1ad2      	subs	r2, r2, r3
 80118b0:	683b      	ldr	r3, [r7, #0]
 80118b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80118b4:	4b0c      	ldr	r3, [pc, #48]	; (80118e8 <prvHeapInit+0xb4>)
 80118b6:	681a      	ldr	r2, [r3, #0]
 80118b8:	683b      	ldr	r3, [r7, #0]
 80118ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80118bc:	683b      	ldr	r3, [r7, #0]
 80118be:	685b      	ldr	r3, [r3, #4]
 80118c0:	4a0a      	ldr	r2, [pc, #40]	; (80118ec <prvHeapInit+0xb8>)
 80118c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80118c4:	683b      	ldr	r3, [r7, #0]
 80118c6:	685b      	ldr	r3, [r3, #4]
 80118c8:	4a09      	ldr	r2, [pc, #36]	; (80118f0 <prvHeapInit+0xbc>)
 80118ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80118cc:	4b09      	ldr	r3, [pc, #36]	; (80118f4 <prvHeapInit+0xc0>)
 80118ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80118d2:	601a      	str	r2, [r3, #0]
}
 80118d4:	bf00      	nop
 80118d6:	3714      	adds	r7, #20
 80118d8:	46bd      	mov	sp, r7
 80118da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118de:	4770      	bx	lr
 80118e0:	2400087c 	.word	0x2400087c
 80118e4:	2400447c 	.word	0x2400447c
 80118e8:	24004484 	.word	0x24004484
 80118ec:	2400448c 	.word	0x2400448c
 80118f0:	24004488 	.word	0x24004488
 80118f4:	24004498 	.word	0x24004498

080118f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80118f8:	b480      	push	{r7}
 80118fa:	b085      	sub	sp, #20
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011900:	4b28      	ldr	r3, [pc, #160]	; (80119a4 <prvInsertBlockIntoFreeList+0xac>)
 8011902:	60fb      	str	r3, [r7, #12]
 8011904:	e002      	b.n	801190c <prvInsertBlockIntoFreeList+0x14>
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	60fb      	str	r3, [r7, #12]
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	687a      	ldr	r2, [r7, #4]
 8011912:	429a      	cmp	r2, r3
 8011914:	d8f7      	bhi.n	8011906 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	685b      	ldr	r3, [r3, #4]
 801191e:	68ba      	ldr	r2, [r7, #8]
 8011920:	4413      	add	r3, r2
 8011922:	687a      	ldr	r2, [r7, #4]
 8011924:	429a      	cmp	r2, r3
 8011926:	d108      	bne.n	801193a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	685a      	ldr	r2, [r3, #4]
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	685b      	ldr	r3, [r3, #4]
 8011930:	441a      	add	r2, r3
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	685b      	ldr	r3, [r3, #4]
 8011942:	68ba      	ldr	r2, [r7, #8]
 8011944:	441a      	add	r2, r3
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	429a      	cmp	r2, r3
 801194c:	d118      	bne.n	8011980 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	681a      	ldr	r2, [r3, #0]
 8011952:	4b15      	ldr	r3, [pc, #84]	; (80119a8 <prvInsertBlockIntoFreeList+0xb0>)
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	429a      	cmp	r2, r3
 8011958:	d00d      	beq.n	8011976 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	685a      	ldr	r2, [r3, #4]
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	685b      	ldr	r3, [r3, #4]
 8011964:	441a      	add	r2, r3
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	681a      	ldr	r2, [r3, #0]
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	601a      	str	r2, [r3, #0]
 8011974:	e008      	b.n	8011988 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011976:	4b0c      	ldr	r3, [pc, #48]	; (80119a8 <prvInsertBlockIntoFreeList+0xb0>)
 8011978:	681a      	ldr	r2, [r3, #0]
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	601a      	str	r2, [r3, #0]
 801197e:	e003      	b.n	8011988 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	681a      	ldr	r2, [r3, #0]
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011988:	68fa      	ldr	r2, [r7, #12]
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	429a      	cmp	r2, r3
 801198e:	d002      	beq.n	8011996 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	687a      	ldr	r2, [r7, #4]
 8011994:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011996:	bf00      	nop
 8011998:	3714      	adds	r7, #20
 801199a:	46bd      	mov	sp, r7
 801199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a0:	4770      	bx	lr
 80119a2:	bf00      	nop
 80119a4:	2400447c 	.word	0x2400447c
 80119a8:	24004484 	.word	0x24004484

080119ac <atoi>:
 80119ac:	220a      	movs	r2, #10
 80119ae:	2100      	movs	r1, #0
 80119b0:	f000 b8c2 	b.w	8011b38 <strtol>

080119b4 <__errno>:
 80119b4:	4b01      	ldr	r3, [pc, #4]	; (80119bc <__errno+0x8>)
 80119b6:	6818      	ldr	r0, [r3, #0]
 80119b8:	4770      	bx	lr
 80119ba:	bf00      	nop
 80119bc:	24000018 	.word	0x24000018

080119c0 <__libc_init_array>:
 80119c0:	b570      	push	{r4, r5, r6, lr}
 80119c2:	4d0d      	ldr	r5, [pc, #52]	; (80119f8 <__libc_init_array+0x38>)
 80119c4:	4c0d      	ldr	r4, [pc, #52]	; (80119fc <__libc_init_array+0x3c>)
 80119c6:	1b64      	subs	r4, r4, r5
 80119c8:	10a4      	asrs	r4, r4, #2
 80119ca:	2600      	movs	r6, #0
 80119cc:	42a6      	cmp	r6, r4
 80119ce:	d109      	bne.n	80119e4 <__libc_init_array+0x24>
 80119d0:	4d0b      	ldr	r5, [pc, #44]	; (8011a00 <__libc_init_array+0x40>)
 80119d2:	4c0c      	ldr	r4, [pc, #48]	; (8011a04 <__libc_init_array+0x44>)
 80119d4:	f000 f900 	bl	8011bd8 <_init>
 80119d8:	1b64      	subs	r4, r4, r5
 80119da:	10a4      	asrs	r4, r4, #2
 80119dc:	2600      	movs	r6, #0
 80119de:	42a6      	cmp	r6, r4
 80119e0:	d105      	bne.n	80119ee <__libc_init_array+0x2e>
 80119e2:	bd70      	pop	{r4, r5, r6, pc}
 80119e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80119e8:	4798      	blx	r3
 80119ea:	3601      	adds	r6, #1
 80119ec:	e7ee      	b.n	80119cc <__libc_init_array+0xc>
 80119ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80119f2:	4798      	blx	r3
 80119f4:	3601      	adds	r6, #1
 80119f6:	e7f2      	b.n	80119de <__libc_init_array+0x1e>
 80119f8:	08011dcc 	.word	0x08011dcc
 80119fc:	08011dcc 	.word	0x08011dcc
 8011a00:	08011dcc 	.word	0x08011dcc
 8011a04:	08011dd0 	.word	0x08011dd0

08011a08 <memcpy>:
 8011a08:	440a      	add	r2, r1
 8011a0a:	4291      	cmp	r1, r2
 8011a0c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011a10:	d100      	bne.n	8011a14 <memcpy+0xc>
 8011a12:	4770      	bx	lr
 8011a14:	b510      	push	{r4, lr}
 8011a16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011a1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011a1e:	4291      	cmp	r1, r2
 8011a20:	d1f9      	bne.n	8011a16 <memcpy+0xe>
 8011a22:	bd10      	pop	{r4, pc}

08011a24 <memset>:
 8011a24:	4402      	add	r2, r0
 8011a26:	4603      	mov	r3, r0
 8011a28:	4293      	cmp	r3, r2
 8011a2a:	d100      	bne.n	8011a2e <memset+0xa>
 8011a2c:	4770      	bx	lr
 8011a2e:	f803 1b01 	strb.w	r1, [r3], #1
 8011a32:	e7f9      	b.n	8011a28 <memset+0x4>

08011a34 <_strtol_l.constprop.0>:
 8011a34:	2b01      	cmp	r3, #1
 8011a36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a3a:	d001      	beq.n	8011a40 <_strtol_l.constprop.0+0xc>
 8011a3c:	2b24      	cmp	r3, #36	; 0x24
 8011a3e:	d906      	bls.n	8011a4e <_strtol_l.constprop.0+0x1a>
 8011a40:	f7ff ffb8 	bl	80119b4 <__errno>
 8011a44:	2316      	movs	r3, #22
 8011a46:	6003      	str	r3, [r0, #0]
 8011a48:	2000      	movs	r0, #0
 8011a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a4e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8011b34 <_strtol_l.constprop.0+0x100>
 8011a52:	460d      	mov	r5, r1
 8011a54:	462e      	mov	r6, r5
 8011a56:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011a5a:	f814 700c 	ldrb.w	r7, [r4, ip]
 8011a5e:	f017 0708 	ands.w	r7, r7, #8
 8011a62:	d1f7      	bne.n	8011a54 <_strtol_l.constprop.0+0x20>
 8011a64:	2c2d      	cmp	r4, #45	; 0x2d
 8011a66:	d132      	bne.n	8011ace <_strtol_l.constprop.0+0x9a>
 8011a68:	782c      	ldrb	r4, [r5, #0]
 8011a6a:	2701      	movs	r7, #1
 8011a6c:	1cb5      	adds	r5, r6, #2
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d05b      	beq.n	8011b2a <_strtol_l.constprop.0+0xf6>
 8011a72:	2b10      	cmp	r3, #16
 8011a74:	d109      	bne.n	8011a8a <_strtol_l.constprop.0+0x56>
 8011a76:	2c30      	cmp	r4, #48	; 0x30
 8011a78:	d107      	bne.n	8011a8a <_strtol_l.constprop.0+0x56>
 8011a7a:	782c      	ldrb	r4, [r5, #0]
 8011a7c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8011a80:	2c58      	cmp	r4, #88	; 0x58
 8011a82:	d14d      	bne.n	8011b20 <_strtol_l.constprop.0+0xec>
 8011a84:	786c      	ldrb	r4, [r5, #1]
 8011a86:	2310      	movs	r3, #16
 8011a88:	3502      	adds	r5, #2
 8011a8a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8011a8e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8011a92:	f04f 0c00 	mov.w	ip, #0
 8011a96:	fbb8 f9f3 	udiv	r9, r8, r3
 8011a9a:	4666      	mov	r6, ip
 8011a9c:	fb03 8a19 	mls	sl, r3, r9, r8
 8011aa0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8011aa4:	f1be 0f09 	cmp.w	lr, #9
 8011aa8:	d816      	bhi.n	8011ad8 <_strtol_l.constprop.0+0xa4>
 8011aaa:	4674      	mov	r4, lr
 8011aac:	42a3      	cmp	r3, r4
 8011aae:	dd24      	ble.n	8011afa <_strtol_l.constprop.0+0xc6>
 8011ab0:	f1bc 0f00 	cmp.w	ip, #0
 8011ab4:	db1e      	blt.n	8011af4 <_strtol_l.constprop.0+0xc0>
 8011ab6:	45b1      	cmp	r9, r6
 8011ab8:	d31c      	bcc.n	8011af4 <_strtol_l.constprop.0+0xc0>
 8011aba:	d101      	bne.n	8011ac0 <_strtol_l.constprop.0+0x8c>
 8011abc:	45a2      	cmp	sl, r4
 8011abe:	db19      	blt.n	8011af4 <_strtol_l.constprop.0+0xc0>
 8011ac0:	fb06 4603 	mla	r6, r6, r3, r4
 8011ac4:	f04f 0c01 	mov.w	ip, #1
 8011ac8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011acc:	e7e8      	b.n	8011aa0 <_strtol_l.constprop.0+0x6c>
 8011ace:	2c2b      	cmp	r4, #43	; 0x2b
 8011ad0:	bf04      	itt	eq
 8011ad2:	782c      	ldrbeq	r4, [r5, #0]
 8011ad4:	1cb5      	addeq	r5, r6, #2
 8011ad6:	e7ca      	b.n	8011a6e <_strtol_l.constprop.0+0x3a>
 8011ad8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8011adc:	f1be 0f19 	cmp.w	lr, #25
 8011ae0:	d801      	bhi.n	8011ae6 <_strtol_l.constprop.0+0xb2>
 8011ae2:	3c37      	subs	r4, #55	; 0x37
 8011ae4:	e7e2      	b.n	8011aac <_strtol_l.constprop.0+0x78>
 8011ae6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8011aea:	f1be 0f19 	cmp.w	lr, #25
 8011aee:	d804      	bhi.n	8011afa <_strtol_l.constprop.0+0xc6>
 8011af0:	3c57      	subs	r4, #87	; 0x57
 8011af2:	e7db      	b.n	8011aac <_strtol_l.constprop.0+0x78>
 8011af4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8011af8:	e7e6      	b.n	8011ac8 <_strtol_l.constprop.0+0x94>
 8011afa:	f1bc 0f00 	cmp.w	ip, #0
 8011afe:	da05      	bge.n	8011b0c <_strtol_l.constprop.0+0xd8>
 8011b00:	2322      	movs	r3, #34	; 0x22
 8011b02:	6003      	str	r3, [r0, #0]
 8011b04:	4646      	mov	r6, r8
 8011b06:	b942      	cbnz	r2, 8011b1a <_strtol_l.constprop.0+0xe6>
 8011b08:	4630      	mov	r0, r6
 8011b0a:	e79e      	b.n	8011a4a <_strtol_l.constprop.0+0x16>
 8011b0c:	b107      	cbz	r7, 8011b10 <_strtol_l.constprop.0+0xdc>
 8011b0e:	4276      	negs	r6, r6
 8011b10:	2a00      	cmp	r2, #0
 8011b12:	d0f9      	beq.n	8011b08 <_strtol_l.constprop.0+0xd4>
 8011b14:	f1bc 0f00 	cmp.w	ip, #0
 8011b18:	d000      	beq.n	8011b1c <_strtol_l.constprop.0+0xe8>
 8011b1a:	1e69      	subs	r1, r5, #1
 8011b1c:	6011      	str	r1, [r2, #0]
 8011b1e:	e7f3      	b.n	8011b08 <_strtol_l.constprop.0+0xd4>
 8011b20:	2430      	movs	r4, #48	; 0x30
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d1b1      	bne.n	8011a8a <_strtol_l.constprop.0+0x56>
 8011b26:	2308      	movs	r3, #8
 8011b28:	e7af      	b.n	8011a8a <_strtol_l.constprop.0+0x56>
 8011b2a:	2c30      	cmp	r4, #48	; 0x30
 8011b2c:	d0a5      	beq.n	8011a7a <_strtol_l.constprop.0+0x46>
 8011b2e:	230a      	movs	r3, #10
 8011b30:	e7ab      	b.n	8011a8a <_strtol_l.constprop.0+0x56>
 8011b32:	bf00      	nop
 8011b34:	08011cc1 	.word	0x08011cc1

08011b38 <strtol>:
 8011b38:	4613      	mov	r3, r2
 8011b3a:	460a      	mov	r2, r1
 8011b3c:	4601      	mov	r1, r0
 8011b3e:	4802      	ldr	r0, [pc, #8]	; (8011b48 <strtol+0x10>)
 8011b40:	6800      	ldr	r0, [r0, #0]
 8011b42:	f7ff bf77 	b.w	8011a34 <_strtol_l.constprop.0>
 8011b46:	bf00      	nop
 8011b48:	24000018 	.word	0x24000018

08011b4c <round>:
 8011b4c:	ee10 1a90 	vmov	r1, s1
 8011b50:	f3c1 500a 	ubfx	r0, r1, #20, #11
 8011b54:	f2a0 32ff 	subw	r2, r0, #1023	; 0x3ff
 8011b58:	2a13      	cmp	r2, #19
 8011b5a:	b510      	push	{r4, lr}
 8011b5c:	ee10 3a10 	vmov	r3, s0
 8011b60:	dc19      	bgt.n	8011b96 <round+0x4a>
 8011b62:	2a00      	cmp	r2, #0
 8011b64:	da09      	bge.n	8011b7a <round+0x2e>
 8011b66:	3201      	adds	r2, #1
 8011b68:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8011b6c:	d103      	bne.n	8011b76 <round+0x2a>
 8011b6e:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8011b72:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8011b76:	2000      	movs	r0, #0
 8011b78:	e026      	b.n	8011bc8 <round+0x7c>
 8011b7a:	4816      	ldr	r0, [pc, #88]	; (8011bd4 <round+0x88>)
 8011b7c:	4110      	asrs	r0, r2
 8011b7e:	ea01 0400 	and.w	r4, r1, r0
 8011b82:	4323      	orrs	r3, r4
 8011b84:	d00e      	beq.n	8011ba4 <round+0x58>
 8011b86:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8011b8a:	fa43 f202 	asr.w	r2, r3, r2
 8011b8e:	4411      	add	r1, r2
 8011b90:	ea21 0100 	bic.w	r1, r1, r0
 8011b94:	e7ef      	b.n	8011b76 <round+0x2a>
 8011b96:	2a33      	cmp	r2, #51	; 0x33
 8011b98:	dd05      	ble.n	8011ba6 <round+0x5a>
 8011b9a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8011b9e:	d101      	bne.n	8011ba4 <round+0x58>
 8011ba0:	ee30 0b00 	vadd.f64	d0, d0, d0
 8011ba4:	bd10      	pop	{r4, pc}
 8011ba6:	f2a0 4413 	subw	r4, r0, #1043	; 0x413
 8011baa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011bae:	40e0      	lsrs	r0, r4
 8011bb0:	4203      	tst	r3, r0
 8011bb2:	d0f7      	beq.n	8011ba4 <round+0x58>
 8011bb4:	2401      	movs	r4, #1
 8011bb6:	f1c2 0233 	rsb	r2, r2, #51	; 0x33
 8011bba:	fa04 f202 	lsl.w	r2, r4, r2
 8011bbe:	189b      	adds	r3, r3, r2
 8011bc0:	bf28      	it	cs
 8011bc2:	1909      	addcs	r1, r1, r4
 8011bc4:	ea23 0000 	bic.w	r0, r3, r0
 8011bc8:	460b      	mov	r3, r1
 8011bca:	4602      	mov	r2, r0
 8011bcc:	ec43 2b10 	vmov	d0, r2, r3
 8011bd0:	e7e8      	b.n	8011ba4 <round+0x58>
 8011bd2:	bf00      	nop
 8011bd4:	000fffff 	.word	0x000fffff

08011bd8 <_init>:
 8011bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bda:	bf00      	nop
 8011bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011bde:	bc08      	pop	{r3}
 8011be0:	469e      	mov	lr, r3
 8011be2:	4770      	bx	lr

08011be4 <_fini>:
 8011be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011be6:	bf00      	nop
 8011be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011bea:	bc08      	pop	{r3}
 8011bec:	469e      	mov	lr, r3
 8011bee:	4770      	bx	lr
